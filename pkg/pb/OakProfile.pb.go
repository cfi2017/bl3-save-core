// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.20.1
// 	protoc        v3.11.3
// source: OakProfile.proto

package pb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type PlayerInputBinding_Button struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RebindDataPath string   `protobuf:"bytes,1,opt,name=rebind_data_path,json=rebindDataPath,proto3" json:"rebind_data_path"`
	KeyNames       []string `protobuf:"bytes,2,rep,name=key_names,json=keyNames,proto3" json:"key_names"`
}

func (x *PlayerInputBinding_Button) Reset() {
	*x = PlayerInputBinding_Button{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakProfile_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerInputBinding_Button) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInputBinding_Button) ProtoMessage() {}

func (x *PlayerInputBinding_Button) ProtoReflect() protoreflect.Message {
	mi := &file_OakProfile_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInputBinding_Button.ProtoReflect.Descriptor instead.
func (*PlayerInputBinding_Button) Descriptor() ([]byte, []int) {
	return file_OakProfile_proto_rawDescGZIP(), []int{0}
}

func (x *PlayerInputBinding_Button) GetRebindDataPath() string {
	if x != nil {
		return x.RebindDataPath
	}
	return ""
}

func (x *PlayerInputBinding_Button) GetKeyNames() []string {
	if x != nil {
		return x.KeyNames
	}
	return nil
}

type PlayerInputBinding_Axis_Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyName  string `protobuf:"bytes,1,opt,name=key_name,json=keyName,proto3" json:"key_name"`
	Scale_3D *Vec3  `protobuf:"bytes,2,opt,name=scale_3d,json=scale3d,proto3" json:"scale_3d"`
}

func (x *PlayerInputBinding_Axis_Key) Reset() {
	*x = PlayerInputBinding_Axis_Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakProfile_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerInputBinding_Axis_Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInputBinding_Axis_Key) ProtoMessage() {}

func (x *PlayerInputBinding_Axis_Key) ProtoReflect() protoreflect.Message {
	mi := &file_OakProfile_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInputBinding_Axis_Key.ProtoReflect.Descriptor instead.
func (*PlayerInputBinding_Axis_Key) Descriptor() ([]byte, []int) {
	return file_OakProfile_proto_rawDescGZIP(), []int{1}
}

func (x *PlayerInputBinding_Axis_Key) GetKeyName() string {
	if x != nil {
		return x.KeyName
	}
	return ""
}

func (x *PlayerInputBinding_Axis_Key) GetScale_3D() *Vec3 {
	if x != nil {
		return x.Scale_3D
	}
	return nil
}

type PlayerInputBinding_Axis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RebindDataPath string                         `protobuf:"bytes,1,opt,name=rebind_data_path,json=rebindDataPath,proto3" json:"rebind_data_path"`
	Keys           []*PlayerInputBinding_Axis_Key `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys"`
}

func (x *PlayerInputBinding_Axis) Reset() {
	*x = PlayerInputBinding_Axis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakProfile_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerInputBinding_Axis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInputBinding_Axis) ProtoMessage() {}

func (x *PlayerInputBinding_Axis) ProtoReflect() protoreflect.Message {
	mi := &file_OakProfile_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInputBinding_Axis.ProtoReflect.Descriptor instead.
func (*PlayerInputBinding_Axis) Descriptor() ([]byte, []int) {
	return file_OakProfile_proto_rawDescGZIP(), []int{2}
}

func (x *PlayerInputBinding_Axis) GetRebindDataPath() string {
	if x != nil {
		return x.RebindDataPath
	}
	return ""
}

func (x *PlayerInputBinding_Axis) GetKeys() []*PlayerInputBinding_Axis_Key {
	if x != nil {
		return x.Keys
	}
	return nil
}

type PlayerInputBinding_Category struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryDataPath string                       `protobuf:"bytes,1,opt,name=category_data_path,json=categoryDataPath,proto3" json:"category_data_path"`
	ContextDataPath  string                       `protobuf:"bytes,2,opt,name=context_data_path,json=contextDataPath,proto3" json:"context_data_path"`
	ButtonBindings   []*PlayerInputBinding_Button `protobuf:"bytes,3,rep,name=button_bindings,json=buttonBindings,proto3" json:"button_bindings"`
	AxisBindings     []*PlayerInputBinding_Axis   `protobuf:"bytes,4,rep,name=axis_bindings,json=axisBindings,proto3" json:"axis_bindings"`
}

func (x *PlayerInputBinding_Category) Reset() {
	*x = PlayerInputBinding_Category{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakProfile_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerInputBinding_Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInputBinding_Category) ProtoMessage() {}

func (x *PlayerInputBinding_Category) ProtoReflect() protoreflect.Message {
	mi := &file_OakProfile_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInputBinding_Category.ProtoReflect.Descriptor instead.
func (*PlayerInputBinding_Category) Descriptor() ([]byte, []int) {
	return file_OakProfile_proto_rawDescGZIP(), []int{3}
}

func (x *PlayerInputBinding_Category) GetCategoryDataPath() string {
	if x != nil {
		return x.CategoryDataPath
	}
	return ""
}

func (x *PlayerInputBinding_Category) GetContextDataPath() string {
	if x != nil {
		return x.ContextDataPath
	}
	return ""
}

func (x *PlayerInputBinding_Category) GetButtonBindings() []*PlayerInputBinding_Button {
	if x != nil {
		return x.ButtonBindings
	}
	return nil
}

func (x *PlayerInputBinding_Category) GetAxisBindings() []*PlayerInputBinding_Axis {
	if x != nil {
		return x.AxisBindings
	}
	return nil
}

type PlayerInputBindings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Categories []*PlayerInputBinding_Category `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories"`
}

func (x *PlayerInputBindings) Reset() {
	*x = PlayerInputBindings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakProfile_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerInputBindings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInputBindings) ProtoMessage() {}

func (x *PlayerInputBindings) ProtoReflect() protoreflect.Message {
	mi := &file_OakProfile_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInputBindings.ProtoReflect.Descriptor instead.
func (*PlayerInputBindings) Descriptor() ([]byte, []int) {
	return file_OakProfile_proto_rawDescGZIP(), []int{4}
}

func (x *PlayerInputBindings) GetCategories() []*PlayerInputBinding_Category {
	if x != nil {
		return x.Categories
	}
	return nil
}

type OakProfileLastInventoryFilterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotTypeId      string `protobuf:"bytes,1,opt,name=slot_type_id,json=slotTypeId,proto3" json:"slot_type_id"`
	LastFilterIndex int32  `protobuf:"varint,2,opt,name=last_filter_index,json=lastFilterIndex,proto3" json:"last_filter_index"`
}

func (x *OakProfileLastInventoryFilterInfo) Reset() {
	*x = OakProfileLastInventoryFilterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakProfile_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OakProfileLastInventoryFilterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OakProfileLastInventoryFilterInfo) ProtoMessage() {}

func (x *OakProfileLastInventoryFilterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_OakProfile_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OakProfileLastInventoryFilterInfo.ProtoReflect.Descriptor instead.
func (*OakProfileLastInventoryFilterInfo) Descriptor() ([]byte, []int) {
	return file_OakProfile_proto_rawDescGZIP(), []int{5}
}

func (x *OakProfileLastInventoryFilterInfo) GetSlotTypeId() string {
	if x != nil {
		return x.SlotTypeId
	}
	return ""
}

func (x *OakProfileLastInventoryFilterInfo) GetLastFilterIndex() int32 {
	if x != nil {
		return x.LastFilterIndex
	}
	return 0
}

type OakProfileMenuTutorialInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeenTutorials                  []string `protobuf:"bytes,1,rep,name=seen_tutorials,json=seenTutorials,proto3" json:"seen_tutorials"`
	TutorialsDisabled              bool     `protobuf:"varint,2,opt,name=tutorials_disabled,json=tutorialsDisabled,proto3" json:"tutorials_disabled"`
	TutorialsAllowedInNonGameModes bool     `protobuf:"varint,3,opt,name=tutorials_allowed_in_non_game_modes,json=tutorialsAllowedInNonGameModes,proto3" json:"tutorials_allowed_in_non_game_modes"`
}

func (x *OakProfileMenuTutorialInfo) Reset() {
	*x = OakProfileMenuTutorialInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakProfile_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OakProfileMenuTutorialInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OakProfileMenuTutorialInfo) ProtoMessage() {}

func (x *OakProfileMenuTutorialInfo) ProtoReflect() protoreflect.Message {
	mi := &file_OakProfile_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OakProfileMenuTutorialInfo.ProtoReflect.Descriptor instead.
func (*OakProfileMenuTutorialInfo) Descriptor() ([]byte, []int) {
	return file_OakProfile_proto_rawDescGZIP(), []int{6}
}

func (x *OakProfileMenuTutorialInfo) GetSeenTutorials() []string {
	if x != nil {
		return x.SeenTutorials
	}
	return nil
}

func (x *OakProfileMenuTutorialInfo) GetTutorialsDisabled() bool {
	if x != nil {
		return x.TutorialsDisabled
	}
	return false
}

func (x *OakProfileMenuTutorialInfo) GetTutorialsAllowedInNonGameModes() bool {
	if x != nil {
		return x.TutorialsAllowedInNonGameModes
	}
	return false
}

type OakFriendEncounterData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumEncounters     uint32 `protobuf:"varint,1,opt,name=num_encounters,json=numEncounters,proto3" json:"num_encounters"`
	TimeLastEncounter int64  `protobuf:"varint,2,opt,name=time_last_encounter,json=timeLastEncounter,proto3" json:"time_last_encounter"`
}

func (x *OakFriendEncounterData) Reset() {
	*x = OakFriendEncounterData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakProfile_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OakFriendEncounterData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OakFriendEncounterData) ProtoMessage() {}

func (x *OakFriendEncounterData) ProtoReflect() protoreflect.Message {
	mi := &file_OakProfile_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OakFriendEncounterData.ProtoReflect.Descriptor instead.
func (*OakFriendEncounterData) Descriptor() ([]byte, []int) {
	return file_OakProfile_proto_rawDescGZIP(), []int{7}
}

func (x *OakFriendEncounterData) GetNumEncounters() uint32 {
	if x != nil {
		return x.NumEncounters
	}
	return 0
}

func (x *OakFriendEncounterData) GetTimeLastEncounter() int64 {
	if x != nil {
		return x.TimeLastEncounter
	}
	return 0
}

type OakMailItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MailItemType      uint32 `protobuf:"varint,1,opt,name=mail_item_type,json=mailItemType,proto3" json:"mail_item_type"`
	SenderDisplayName string `protobuf:"bytes,2,opt,name=sender_display_name,json=senderDisplayName,proto3" json:"sender_display_name"`
	Subject           string `protobuf:"bytes,3,opt,name=subject,proto3" json:"subject"`
	Body              string `protobuf:"bytes,4,opt,name=body,proto3" json:"body"`
	GearSerialNumber  string `protobuf:"bytes,5,opt,name=gear_serial_number,json=gearSerialNumber,proto3" json:"gear_serial_number"`
	MailGuid          string `protobuf:"bytes,6,opt,name=mail_guid,json=mailGuid,proto3" json:"mail_guid"`
	DateSent          int64  `protobuf:"varint,7,opt,name=date_sent,json=dateSent,proto3" json:"date_sent"`
	ExpirationDate    int64  `protobuf:"varint,8,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date"`
	FromPlayerId      string `protobuf:"bytes,9,opt,name=from_player_id,json=fromPlayerId,proto3" json:"from_player_id"`
	HasBeenRead       bool   `protobuf:"varint,10,opt,name=has_been_read,json=hasBeenRead,proto3" json:"has_been_read"`
}

func (x *OakMailItem) Reset() {
	*x = OakMailItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakProfile_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OakMailItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OakMailItem) ProtoMessage() {}

func (x *OakMailItem) ProtoReflect() protoreflect.Message {
	mi := &file_OakProfile_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OakMailItem.ProtoReflect.Descriptor instead.
func (*OakMailItem) Descriptor() ([]byte, []int) {
	return file_OakProfile_proto_rawDescGZIP(), []int{8}
}

func (x *OakMailItem) GetMailItemType() uint32 {
	if x != nil {
		return x.MailItemType
	}
	return 0
}

func (x *OakMailItem) GetSenderDisplayName() string {
	if x != nil {
		return x.SenderDisplayName
	}
	return ""
}

func (x *OakMailItem) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *OakMailItem) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *OakMailItem) GetGearSerialNumber() string {
	if x != nil {
		return x.GearSerialNumber
	}
	return ""
}

func (x *OakMailItem) GetMailGuid() string {
	if x != nil {
		return x.MailGuid
	}
	return ""
}

func (x *OakMailItem) GetDateSent() int64 {
	if x != nil {
		return x.DateSent
	}
	return 0
}

func (x *OakMailItem) GetExpirationDate() int64 {
	if x != nil {
		return x.ExpirationDate
	}
	return 0
}

func (x *OakMailItem) GetFromPlayerId() string {
	if x != nil {
		return x.FromPlayerId
	}
	return ""
}

func (x *OakMailItem) GetHasBeenRead() bool {
	if x != nil {
		return x.HasBeenRead
	}
	return false
}

type GearSoldByFriendData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GearSerialNumber          string `protobuf:"bytes,1,opt,name=gear_serial_number,json=gearSerialNumber,proto3" json:"gear_serial_number"`
	PlayerClassIdentifierHash int32  `protobuf:"varint,2,opt,name=player_class_identifier_hash,json=playerClassIdentifierHash,proto3" json:"player_class_identifier_hash"`
	FriendNetId               string `protobuf:"bytes,3,opt,name=friend_net_id,json=friendNetId,proto3" json:"friend_net_id"`
}

func (x *GearSoldByFriendData) Reset() {
	*x = GearSoldByFriendData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakProfile_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GearSoldByFriendData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GearSoldByFriendData) ProtoMessage() {}

func (x *GearSoldByFriendData) ProtoReflect() protoreflect.Message {
	mi := &file_OakProfile_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GearSoldByFriendData.ProtoReflect.Descriptor instead.
func (*GearSoldByFriendData) Descriptor() ([]byte, []int) {
	return file_OakProfile_proto_rawDescGZIP(), []int{9}
}

func (x *GearSoldByFriendData) GetGearSerialNumber() string {
	if x != nil {
		return x.GearSerialNumber
	}
	return ""
}

func (x *GearSoldByFriendData) GetPlayerClassIdentifierHash() int32 {
	if x != nil {
		return x.PlayerClassIdentifierHash
	}
	return 0
}

func (x *GearSoldByFriendData) GetFriendNetId() string {
	if x != nil {
		return x.FriendNetId
	}
	return ""
}

type OakCustomizationSaveGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsNew                  bool   `protobuf:"varint,1,opt,name=is_new,json=isNew,proto3" json:"is_new"`
	CustomizationAssetPath string `protobuf:"bytes,2,opt,name=customization_asset_path,json=customizationAssetPath,proto3" json:"customization_asset_path"`
}

func (x *OakCustomizationSaveGameData) Reset() {
	*x = OakCustomizationSaveGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakProfile_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OakCustomizationSaveGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OakCustomizationSaveGameData) ProtoMessage() {}

func (x *OakCustomizationSaveGameData) ProtoReflect() protoreflect.Message {
	mi := &file_OakProfile_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OakCustomizationSaveGameData.ProtoReflect.Descriptor instead.
func (*OakCustomizationSaveGameData) Descriptor() ([]byte, []int) {
	return file_OakProfile_proto_rawDescGZIP(), []int{10}
}

func (x *OakCustomizationSaveGameData) GetIsNew() bool {
	if x != nil {
		return x.IsNew
	}
	return false
}

func (x *OakCustomizationSaveGameData) GetCustomizationAssetPath() string {
	if x != nil {
		return x.CustomizationAssetPath
	}
	return ""
}

type OakInventoryCustomizationPartInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomizationPartHash uint32 `protobuf:"varint,1,opt,name=customization_part_hash,json=customizationPartHash,proto3" json:"customization_part_hash"`
	IsNew                 bool   `protobuf:"varint,2,opt,name=is_new,json=isNew,proto3" json:"is_new"`
}

func (x *OakInventoryCustomizationPartInfo) Reset() {
	*x = OakInventoryCustomizationPartInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakProfile_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OakInventoryCustomizationPartInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OakInventoryCustomizationPartInfo) ProtoMessage() {}

func (x *OakInventoryCustomizationPartInfo) ProtoReflect() protoreflect.Message {
	mi := &file_OakProfile_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OakInventoryCustomizationPartInfo.ProtoReflect.Descriptor instead.
func (*OakInventoryCustomizationPartInfo) Descriptor() ([]byte, []int) {
	return file_OakProfile_proto_rawDescGZIP(), []int{11}
}

func (x *OakInventoryCustomizationPartInfo) GetCustomizationPartHash() uint32 {
	if x != nil {
		return x.CustomizationPartHash
	}
	return 0
}

func (x *OakInventoryCustomizationPartInfo) GetIsNew() bool {
	if x != nil {
		return x.IsNew
	}
	return false
}

type GuardianRankRewardSaveGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumTokens      int32  `protobuf:"varint,1,opt,name=num_tokens,json=numTokens,proto3" json:"num_tokens"`
	RewardDataPath string `protobuf:"bytes,2,opt,name=reward_data_path,json=rewardDataPath,proto3" json:"reward_data_path"`
}

func (x *GuardianRankRewardSaveGameData) Reset() {
	*x = GuardianRankRewardSaveGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakProfile_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuardianRankRewardSaveGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuardianRankRewardSaveGameData) ProtoMessage() {}

func (x *GuardianRankRewardSaveGameData) ProtoReflect() protoreflect.Message {
	mi := &file_OakProfile_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuardianRankRewardSaveGameData.ProtoReflect.Descriptor instead.
func (*GuardianRankRewardSaveGameData) Descriptor() ([]byte, []int) {
	return file_OakProfile_proto_rawDescGZIP(), []int{12}
}

func (x *GuardianRankRewardSaveGameData) GetNumTokens() int32 {
	if x != nil {
		return x.NumTokens
	}
	return 0
}

func (x *GuardianRankRewardSaveGameData) GetRewardDataPath() string {
	if x != nil {
		return x.RewardDataPath
	}
	return ""
}

type GuardianRankProfileData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailableTokens          int32                             `protobuf:"varint,1,opt,name=available_tokens,json=availableTokens,proto3" json:"available_tokens"`
	RankRewards              []*GuardianRankRewardSaveGameData `protobuf:"bytes,2,rep,name=rank_rewards,json=rankRewards,proto3" json:"rank_rewards"`
	GuardianRank             int32                             `protobuf:"varint,3,opt,name=guardian_rank,json=guardianRank,proto3" json:"guardian_rank"`
	GuardianExperience       int32                             `protobuf:"varint,4,opt,name=guardian_experience,json=guardianExperience,proto3" json:"guardian_experience"`
	GuardianRewardRandomSeed int32                             `protobuf:"varint,5,opt,name=guardian_reward_random_seed,json=guardianRewardRandomSeed,proto3" json:"guardian_reward_random_seed"`
	NewGuardianExperience    int64                             `protobuf:"varint,6,opt,name=new_guardian_experience,json=newGuardianExperience,proto3" json:"new_guardian_experience"`
}

func (x *GuardianRankProfileData) Reset() {
	*x = GuardianRankProfileData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakProfile_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuardianRankProfileData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuardianRankProfileData) ProtoMessage() {}

func (x *GuardianRankProfileData) ProtoReflect() protoreflect.Message {
	mi := &file_OakProfile_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuardianRankProfileData.ProtoReflect.Descriptor instead.
func (*GuardianRankProfileData) Descriptor() ([]byte, []int) {
	return file_OakProfile_proto_rawDescGZIP(), []int{13}
}

func (x *GuardianRankProfileData) GetAvailableTokens() int32 {
	if x != nil {
		return x.AvailableTokens
	}
	return 0
}

func (x *GuardianRankProfileData) GetRankRewards() []*GuardianRankRewardSaveGameData {
	if x != nil {
		return x.RankRewards
	}
	return nil
}

func (x *GuardianRankProfileData) GetGuardianRank() int32 {
	if x != nil {
		return x.GuardianRank
	}
	return 0
}

func (x *GuardianRankProfileData) GetGuardianExperience() int32 {
	if x != nil {
		return x.GuardianExperience
	}
	return 0
}

func (x *GuardianRankProfileData) GetGuardianRewardRandomSeed() int32 {
	if x != nil {
		return x.GuardianRewardRandomSeed
	}
	return 0
}

func (x *GuardianRankProfileData) GetNewGuardianExperience() int64 {
	if x != nil {
		return x.NewGuardianExperience
	}
	return 0
}

type CrewQuartersDecorationItemSaveGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsNew                   bool   `protobuf:"varint,1,opt,name=is_new,json=isNew,proto3" json:"is_new"`
	DecorationItemAssetPath string `protobuf:"bytes,2,opt,name=decoration_item_asset_path,json=decorationItemAssetPath,proto3" json:"decoration_item_asset_path"`
}

func (x *CrewQuartersDecorationItemSaveGameData) Reset() {
	*x = CrewQuartersDecorationItemSaveGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakProfile_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrewQuartersDecorationItemSaveGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrewQuartersDecorationItemSaveGameData) ProtoMessage() {}

func (x *CrewQuartersDecorationItemSaveGameData) ProtoReflect() protoreflect.Message {
	mi := &file_OakProfile_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrewQuartersDecorationItemSaveGameData.ProtoReflect.Descriptor instead.
func (*CrewQuartersDecorationItemSaveGameData) Descriptor() ([]byte, []int) {
	return file_OakProfile_proto_rawDescGZIP(), []int{14}
}

func (x *CrewQuartersDecorationItemSaveGameData) GetIsNew() bool {
	if x != nil {
		return x.IsNew
	}
	return false
}

func (x *CrewQuartersDecorationItemSaveGameData) GetDecorationItemAssetPath() string {
	if x != nil {
		return x.DecorationItemAssetPath
	}
	return ""
}

type CrewQuartersRoomItemSaveGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsNew             bool   `protobuf:"varint,1,opt,name=is_new,json=isNew,proto3" json:"is_new"`
	RoomItemAssetPath string `protobuf:"bytes,2,opt,name=room_item_asset_path,json=roomItemAssetPath,proto3" json:"room_item_asset_path"`
}

func (x *CrewQuartersRoomItemSaveGameData) Reset() {
	*x = CrewQuartersRoomItemSaveGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakProfile_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrewQuartersRoomItemSaveGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrewQuartersRoomItemSaveGameData) ProtoMessage() {}

func (x *CrewQuartersRoomItemSaveGameData) ProtoReflect() protoreflect.Message {
	mi := &file_OakProfile_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrewQuartersRoomItemSaveGameData.ProtoReflect.Descriptor instead.
func (*CrewQuartersRoomItemSaveGameData) Descriptor() ([]byte, []int) {
	return file_OakProfile_proto_rawDescGZIP(), []int{15}
}

func (x *CrewQuartersRoomItemSaveGameData) GetIsNew() bool {
	if x != nil {
		return x.IsNew
	}
	return false
}

func (x *CrewQuartersRoomItemSaveGameData) GetRoomItemAssetPath() string {
	if x != nil {
		return x.RoomItemAssetPath
	}
	return ""
}

type RecentlyMetPlayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShiftPlayerId        string `protobuf:"bytes,1,opt,name=shift_player_id,json=shiftPlayerId,proto3" json:"shift_player_id"`
	FirstPartyPlayerId   string `protobuf:"bytes,2,opt,name=first_party_player_id,json=firstPartyPlayerId,proto3" json:"first_party_player_id"`
	ShowShiftPlayerEntry bool   `protobuf:"varint,3,opt,name=show_shift_player_entry,json=showShiftPlayerEntry,proto3" json:"show_shift_player_entry"`
}

func (x *RecentlyMetPlayer) Reset() {
	*x = RecentlyMetPlayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakProfile_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecentlyMetPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecentlyMetPlayer) ProtoMessage() {}

func (x *RecentlyMetPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_OakProfile_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecentlyMetPlayer.ProtoReflect.Descriptor instead.
func (*RecentlyMetPlayer) Descriptor() ([]byte, []int) {
	return file_OakProfile_proto_rawDescGZIP(), []int{16}
}

func (x *RecentlyMetPlayer) GetShiftPlayerId() string {
	if x != nil {
		return x.ShiftPlayerId
	}
	return ""
}

func (x *RecentlyMetPlayer) GetFirstPartyPlayerId() string {
	if x != nil {
		return x.FirstPartyPlayerId
	}
	return ""
}

func (x *RecentlyMetPlayer) GetShowShiftPlayerEntry() bool {
	if x != nil {
		return x.ShowShiftPlayerEntry
	}
	return false
}

type Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableAimAssist                             bool                                      `protobuf:"varint,1,opt,name=enable_aim_assist,json=enableAimAssist,proto3" json:"enable_aim_assist"`
	GamepadInvertLook                           bool                                      `protobuf:"varint,2,opt,name=gamepad_invert_look,json=gamepadInvertLook,proto3" json:"gamepad_invert_look"`
	GamepadInvertTurn                           bool                                      `protobuf:"varint,3,opt,name=gamepad_invert_turn,json=gamepadInvertTurn,proto3" json:"gamepad_invert_turn"`
	GamepadInvertMove                           bool                                      `protobuf:"varint,4,opt,name=gamepad_invert_move,json=gamepadInvertMove,proto3" json:"gamepad_invert_move"`
	GamepadInvertStrafe                         bool                                      `protobuf:"varint,5,opt,name=gamepad_invert_strafe,json=gamepadInvertStrafe,proto3" json:"gamepad_invert_strafe"`
	EnableVibration                             bool                                      `protobuf:"varint,6,opt,name=enable_vibration,json=enableVibration,proto3" json:"enable_vibration"`
	InvertMousePitch                            bool                                      `protobuf:"varint,7,opt,name=invert_mouse_pitch,json=invertMousePitch,proto3" json:"invert_mouse_pitch"`
	EnableMouseSmoothing                        bool                                      `protobuf:"varint,8,opt,name=enable_mouse_smoothing,json=enableMouseSmoothing,proto3" json:"enable_mouse_smoothing"`
	MouseScale                                  float32                                   `protobuf:"fixed32,9,opt,name=mouse_scale,json=mouseScale,proto3" json:"mouse_scale"`
	ShowDamageNumbers                           bool                                      `protobuf:"varint,10,opt,name=show_damage_numbers,json=showDamageNumbers,proto3" json:"show_damage_numbers"`
	ShowDamageNumberIcons                       bool                                      `protobuf:"varint,11,opt,name=show_damage_number_icons,json=showDamageNumberIcons,proto3" json:"show_damage_number_icons"`
	EnableTrainingMessages                      bool                                      `protobuf:"varint,12,opt,name=enable_training_messages,json=enableTrainingMessages,proto3" json:"enable_training_messages"`
	ShowTextChat                                bool                                      `protobuf:"varint,13,opt,name=show_text_chat,json=showTextChat,proto3" json:"show_text_chat"`
	CenterCrosshair                             bool                                      `protobuf:"varint,14,opt,name=center_crosshair,json=centerCrosshair,proto3" json:"center_crosshair"`
	ToggleSprint                                bool                                      `protobuf:"varint,15,opt,name=toggle_sprint,json=toggleSprint,proto3" json:"toggle_sprint"`
	ToggleCrouch                                bool                                      `protobuf:"varint,16,opt,name=toggle_crouch,json=toggleCrouch,proto3" json:"toggle_crouch"`
	CensorContent                               bool                                      `protobuf:"varint,17,opt,name=censor_content,json=censorContent,proto3" json:"censor_content"`
	MusicVolume                                 float32                                   `protobuf:"fixed32,18,opt,name=music_volume,json=musicVolume,proto3" json:"music_volume"`
	SoundEffectsVolume                          float32                                   `protobuf:"fixed32,19,opt,name=sound_effects_volume,json=soundEffectsVolume,proto3" json:"sound_effects_volume"`
	VoVolume                                    float32                                   `protobuf:"fixed32,20,opt,name=vo_volume,json=voVolume,proto3" json:"vo_volume"`
	VoiceVolume                                 float32                                   `protobuf:"fixed32,21,opt,name=voice_volume,json=voiceVolume,proto3" json:"voice_volume"`
	EnableOptionalVo                            bool                                      `protobuf:"varint,22,opt,name=enable_optional_vo,json=enableOptionalVo,proto3" json:"enable_optional_vo"`
	PushToTalk                                  bool                                      `protobuf:"varint,23,opt,name=push_to_talk,json=pushToTalk,proto3" json:"push_to_talk"`
	EnableControllerAudio                       bool                                      `protobuf:"varint,24,opt,name=enable_controller_audio,json=enableControllerAudio,proto3" json:"enable_controller_audio"`
	SpeakerAngleFront                           float32                                   `protobuf:"fixed32,25,opt,name=speaker_angle_front,json=speakerAngleFront,proto3" json:"speaker_angle_front"`
	SpeakerAngleSide                            float32                                   `protobuf:"fixed32,26,opt,name=speaker_angle_side,json=speakerAngleSide,proto3" json:"speaker_angle_side"`
	SpeakerAngleBack                            float32                                   `protobuf:"fixed32,27,opt,name=speaker_angle_back,json=speakerAngleBack,proto3" json:"speaker_angle_back"`
	SpeakerSetup                                uint32                                    `protobuf:"varint,28,opt,name=speaker_setup,json=speakerSetup,proto3" json:"speaker_setup"`
	MuteAudioOnFocusLoss                        bool                                      `protobuf:"varint,29,opt,name=mute_audio_on_focus_loss,json=muteAudioOnFocusLoss,proto3" json:"mute_audio_on_focus_loss"`
	HideStrictNatHelpDialog                     bool                                      `protobuf:"varint,34,opt,name=hide_strict_nat_help_dialog,json=hideStrictNatHelpDialog,proto3" json:"hide_strict_nat_help_dialog"`
	PlayerInputBindings                         *PlayerInputBindings                      `protobuf:"bytes,35,opt,name=player_input_bindings,json=playerInputBindings,proto3" json:"player_input_bindings"`
	NewsHashes                                  []uint32                                  `protobuf:"varint,36,rep,packed,name=news_hashes,json=newsHashes,proto3" json:"news_hashes"`
	LastUsedSavegameId                          uint32                                    `protobuf:"varint,37,opt,name=last_used_savegame_id,json=lastUsedSavegameId,proto3" json:"last_used_savegame_id"`
	GamepadHipSensitivityLevel                  int32                                     `protobuf:"varint,38,opt,name=gamepad_hip_sensitivity_level,json=gamepadHipSensitivityLevel,proto3" json:"gamepad_hip_sensitivity_level"`
	GamepadZoomedSensitivityLevel               int32                                     `protobuf:"varint,39,opt,name=gamepad_zoomed_sensitivity_level,json=gamepadZoomedSensitivityLevel,proto3" json:"gamepad_zoomed_sensitivity_level"`
	GamepadVehicleSensitivityLevel              int32                                     `protobuf:"varint,40,opt,name=gamepad_vehicle_sensitivity_level,json=gamepadVehicleSensitivityLevel,proto3" json:"gamepad_vehicle_sensitivity_level"`
	GamepadMovementDeadZoneX                    float32                                   `protobuf:"fixed32,41,opt,name=gamepad_movement_dead_zone_x,json=gamepadMovementDeadZoneX,proto3" json:"gamepad_movement_dead_zone_x"`
	GamepadMovementDeadZoneY                    float32                                   `protobuf:"fixed32,42,opt,name=gamepad_movement_dead_zone_y,json=gamepadMovementDeadZoneY,proto3" json:"gamepad_movement_dead_zone_y"`
	GamepadLookDeadZoneInnerX                   float32                                   `protobuf:"fixed32,43,opt,name=gamepad_look_dead_zone_inner_x,json=gamepadLookDeadZoneInnerX,proto3" json:"gamepad_look_dead_zone_inner_x"`
	GamepadLookDeadZoneOuterX                   float32                                   `protobuf:"fixed32,44,opt,name=gamepad_look_dead_zone_outer_x,json=gamepadLookDeadZoneOuterX,proto3" json:"gamepad_look_dead_zone_outer_x"`
	GamepadLookDeadZoneInnerY                   float32                                   `protobuf:"fixed32,45,opt,name=gamepad_look_dead_zone_inner_y,json=gamepadLookDeadZoneInnerY,proto3" json:"gamepad_look_dead_zone_inner_y"`
	GamepadLookDeadZoneOuterY                   float32                                   `protobuf:"fixed32,46,opt,name=gamepad_look_dead_zone_outer_y,json=gamepadLookDeadZoneOuterY,proto3" json:"gamepad_look_dead_zone_outer_y"`
	GamepadVehicleMovementDeadZoneX             float32                                   `protobuf:"fixed32,47,opt,name=gamepad_vehicle_movement_dead_zone_x,json=gamepadVehicleMovementDeadZoneX,proto3" json:"gamepad_vehicle_movement_dead_zone_x"`
	GamepadVehicleMovementDeadZoneY             float32                                   `protobuf:"fixed32,48,opt,name=gamepad_vehicle_movement_dead_zone_y,json=gamepadVehicleMovementDeadZoneY,proto3" json:"gamepad_vehicle_movement_dead_zone_y"`
	GamepadVehicleLookDeadZoneInnerX            float32                                   `protobuf:"fixed32,49,opt,name=gamepad_vehicle_look_dead_zone_inner_x,json=gamepadVehicleLookDeadZoneInnerX,proto3" json:"gamepad_vehicle_look_dead_zone_inner_x"`
	GamepadVehicleLookDeadZoneOuterX            float32                                   `protobuf:"fixed32,50,opt,name=gamepad_vehicle_look_dead_zone_outer_x,json=gamepadVehicleLookDeadZoneOuterX,proto3" json:"gamepad_vehicle_look_dead_zone_outer_x"`
	GamepadVehicleLookDeadZoneInnerY            float32                                   `protobuf:"fixed32,51,opt,name=gamepad_vehicle_look_dead_zone_inner_y,json=gamepadVehicleLookDeadZoneInnerY,proto3" json:"gamepad_vehicle_look_dead_zone_inner_y"`
	GamepadVehicleLookDeadZoneOuterY            float32                                   `protobuf:"fixed32,52,opt,name=gamepad_vehicle_look_dead_zone_outer_y,json=gamepadVehicleLookDeadZoneOuterY,proto3" json:"gamepad_vehicle_look_dead_zone_outer_y"`
	GamepadLeftDeadZoneInner                    float32                                   `protobuf:"fixed32,53,opt,name=gamepad_left_dead_zone_inner,json=gamepadLeftDeadZoneInner,proto3" json:"gamepad_left_dead_zone_inner"`
	GamepadLeftDeadZoneOuter                    float32                                   `protobuf:"fixed32,54,opt,name=gamepad_left_dead_zone_outer,json=gamepadLeftDeadZoneOuter,proto3" json:"gamepad_left_dead_zone_outer"`
	GamepadRightDeadZoneInner                   float32                                   `protobuf:"fixed32,55,opt,name=gamepad_right_dead_zone_inner,json=gamepadRightDeadZoneInner,proto3" json:"gamepad_right_dead_zone_inner"`
	GamepadRightDeadZoneOuter                   float32                                   `protobuf:"fixed32,56,opt,name=gamepad_right_dead_zone_outer,json=gamepadRightDeadZoneOuter,proto3" json:"gamepad_right_dead_zone_outer"`
	GamepadLookAxialDeadZoneScale               float32                                   `protobuf:"fixed32,57,opt,name=gamepad_look_axial_dead_zone_scale,json=gamepadLookAxialDeadZoneScale,proto3" json:"gamepad_look_axial_dead_zone_scale"`
	GamepadMoveAxialDeadZoneScale               float32                                   `protobuf:"fixed32,58,opt,name=gamepad_move_axial_dead_zone_scale,json=gamepadMoveAxialDeadZoneScale,proto3" json:"gamepad_move_axial_dead_zone_scale"`
	GamepadUseAdvancedHipAimSettings            bool                                      `protobuf:"varint,59,opt,name=gamepad_use_advanced_hip_aim_settings,json=gamepadUseAdvancedHipAimSettings,proto3" json:"gamepad_use_advanced_hip_aim_settings"`
	GamepadUseAdvancedZoomedAimSettings         bool                                      `protobuf:"varint,60,opt,name=gamepad_use_advanced_zoomed_aim_settings,json=gamepadUseAdvancedZoomedAimSettings,proto3" json:"gamepad_use_advanced_zoomed_aim_settings"`
	GamepadUseAdvancedVehicleAimSettings        bool                                      `protobuf:"varint,61,opt,name=gamepad_use_advanced_vehicle_aim_settings,json=gamepadUseAdvancedVehicleAimSettings,proto3" json:"gamepad_use_advanced_vehicle_aim_settings"`
	GamepadHipYawRate                           float32                                   `protobuf:"fixed32,62,opt,name=gamepad_hip_yaw_rate,json=gamepadHipYawRate,proto3" json:"gamepad_hip_yaw_rate"`
	GamepadHipPitchRate                         float32                                   `protobuf:"fixed32,63,opt,name=gamepad_hip_pitch_rate,json=gamepadHipPitchRate,proto3" json:"gamepad_hip_pitch_rate"`
	GamepadHipExtraYaw                          float32                                   `protobuf:"fixed32,64,opt,name=gamepad_hip_extra_yaw,json=gamepadHipExtraYaw,proto3" json:"gamepad_hip_extra_yaw"`
	GamepadHipExtraPitch                        float32                                   `protobuf:"fixed32,65,opt,name=gamepad_hip_extra_pitch,json=gamepadHipExtraPitch,proto3" json:"gamepad_hip_extra_pitch"`
	GamepadHipRampUpTime                        float32                                   `protobuf:"fixed32,66,opt,name=gamepad_hip_ramp_up_time,json=gamepadHipRampUpTime,proto3" json:"gamepad_hip_ramp_up_time"`
	GamepadHipRampUpDelay                       float32                                   `protobuf:"fixed32,67,opt,name=gamepad_hip_ramp_up_delay,json=gamepadHipRampUpDelay,proto3" json:"gamepad_hip_ramp_up_delay"`
	GamepadZoomedYawRate                        float32                                   `protobuf:"fixed32,68,opt,name=gamepad_zoomed_yaw_rate,json=gamepadZoomedYawRate,proto3" json:"gamepad_zoomed_yaw_rate"`
	GamepadZoomedPitchRate                      float32                                   `protobuf:"fixed32,69,opt,name=gamepad_zoomed_pitch_rate,json=gamepadZoomedPitchRate,proto3" json:"gamepad_zoomed_pitch_rate"`
	GamepadZoomedExtraYaw                       float32                                   `protobuf:"fixed32,70,opt,name=gamepad_zoomed_extra_yaw,json=gamepadZoomedExtraYaw,proto3" json:"gamepad_zoomed_extra_yaw"`
	GamepadZoomedExtraPitch                     float32                                   `protobuf:"fixed32,71,opt,name=gamepad_zoomed_extra_pitch,json=gamepadZoomedExtraPitch,proto3" json:"gamepad_zoomed_extra_pitch"`
	GamepadZoomedRampUpTime                     float32                                   `protobuf:"fixed32,72,opt,name=gamepad_zoomed_ramp_up_time,json=gamepadZoomedRampUpTime,proto3" json:"gamepad_zoomed_ramp_up_time"`
	GamepadZoomedRampUpDelay                    float32                                   `protobuf:"fixed32,73,opt,name=gamepad_zoomed_ramp_up_delay,json=gamepadZoomedRampUpDelay,proto3" json:"gamepad_zoomed_ramp_up_delay"`
	GamepadVehicleYawRate                       float32                                   `protobuf:"fixed32,74,opt,name=gamepad_vehicle_yaw_rate,json=gamepadVehicleYawRate,proto3" json:"gamepad_vehicle_yaw_rate"`
	GamepadVehiclePitchRate                     float32                                   `protobuf:"fixed32,75,opt,name=gamepad_vehicle_pitch_rate,json=gamepadVehiclePitchRate,proto3" json:"gamepad_vehicle_pitch_rate"`
	GamepadVehicleExtraYaw                      float32                                   `protobuf:"fixed32,76,opt,name=gamepad_vehicle_extra_yaw,json=gamepadVehicleExtraYaw,proto3" json:"gamepad_vehicle_extra_yaw"`
	GamepadVehicleExtraPitch                    float32                                   `protobuf:"fixed32,77,opt,name=gamepad_vehicle_extra_pitch,json=gamepadVehicleExtraPitch,proto3" json:"gamepad_vehicle_extra_pitch"`
	GamepadVehicleRampUpTime                    float32                                   `protobuf:"fixed32,78,opt,name=gamepad_vehicle_ramp_up_time,json=gamepadVehicleRampUpTime,proto3" json:"gamepad_vehicle_ramp_up_time"`
	GamepadVehicleRampUpDelay                   float32                                   `protobuf:"fixed32,79,opt,name=gamepad_vehicle_ramp_up_delay,json=gamepadVehicleRampUpDelay,proto3" json:"gamepad_vehicle_ramp_up_delay"`
	IronsightAimAssist                          bool                                      `protobuf:"varint,80,opt,name=ironsight_aim_assist,json=ironsightAimAssist,proto3" json:"ironsight_aim_assist"`
	WalkingJoystickScheme                       uint32                                    `protobuf:"varint,81,opt,name=walking_joystick_scheme,json=walkingJoystickScheme,proto3" json:"walking_joystick_scheme"`
	DrivingJoystickScheme                       uint32                                    `protobuf:"varint,82,opt,name=driving_joystick_scheme,json=drivingJoystickScheme,proto3" json:"driving_joystick_scheme"`
	MouseAdsScale                               float32                                   `protobuf:"fixed32,83,opt,name=mouse_ads_scale,json=mouseAdsScale,proto3" json:"mouse_ads_scale"`
	MouseVehicleScale                           float32                                   `protobuf:"fixed32,84,opt,name=mouse_vehicle_scale,json=mouseVehicleScale,proto3" json:"mouse_vehicle_scale"`
	MouseIronsightAimAssist                     bool                                      `protobuf:"varint,85,opt,name=mouse_ironsight_aim_assist,json=mouseIronsightAimAssist,proto3" json:"mouse_ironsight_aim_assist"`
	VehicleInputMode                            uint32                                    `protobuf:"varint,86,opt,name=vehicle_input_mode,json=vehicleInputMode,proto3" json:"vehicle_input_mode"`
	WeaponAimToggle                             bool                                      `protobuf:"varint,87,opt,name=weapon_aim_toggle,json=weaponAimToggle,proto3" json:"weapon_aim_toggle"`
	MantleRequiresButton                        bool                                      `protobuf:"varint,88,opt,name=mantle_requires_button,json=mantleRequiresButton,proto3" json:"mantle_requires_button"`
	FixedMinimapRotation                        bool                                      `protobuf:"varint,89,opt,name=fixed_minimap_rotation,json=fixedMinimapRotation,proto3" json:"fixed_minimap_rotation"`
	MapInvertPitch                              bool                                      `protobuf:"varint,90,opt,name=map_invert_pitch,json=mapInvertPitch,proto3" json:"map_invert_pitch"`
	MapInvertYaw                                bool                                      `protobuf:"varint,91,opt,name=map_invert_yaw,json=mapInvertYaw,proto3" json:"map_invert_yaw"`
	Difficulty                                  uint32                                    `protobuf:"varint,92,opt,name=difficulty,proto3" json:"difficulty"`
	SwapDualWieldControls                       bool                                      `protobuf:"varint,93,opt,name=swap_dual_wield_controls,json=swapDualWieldControls,proto3" json:"swap_dual_wield_controls"`
	BaseFov                                     float32                                   `protobuf:"fixed32,94,opt,name=base_fov,json=baseFov,proto3" json:"base_fov"`
	CrosshairNeutralColorFrame                  uint32                                    `protobuf:"varint,95,opt,name=crosshair_neutral_color_frame,json=crosshairNeutralColorFrame,proto3" json:"crosshair_neutral_color_frame"`
	CrosshairEnemyColorFrame                    uint32                                    `protobuf:"varint,96,opt,name=crosshair_enemy_color_frame,json=crosshairEnemyColorFrame,proto3" json:"crosshair_enemy_color_frame"`
	CrosshairAllyColorFrame                     uint32                                    `protobuf:"varint,97,opt,name=crosshair_ally_color_frame,json=crosshairAllyColorFrame,proto3" json:"crosshair_ally_color_frame"`
	EnableSubtitles                             bool                                      `protobuf:"varint,98,opt,name=enable_subtitles,json=enableSubtitles,proto3" json:"enable_subtitles"`
	EnableClosedCaptions                        bool                                      `protobuf:"varint,99,opt,name=enable_closed_captions,json=enableClosedCaptions,proto3" json:"enable_closed_captions"`
	LastStatusMenuPage                          string                                    `protobuf:"bytes,100,opt,name=last_status_menu_page,json=lastStatusMenuPage,proto3" json:"last_status_menu_page"`
	InventoryScreenLastFilter                   []*OakProfileLastInventoryFilterInfo      `protobuf:"bytes,101,rep,name=inventory_screen_last_filter,json=inventoryScreenLastFilter,proto3" json:"inventory_screen_last_filter"`
	TutorialInfo                                *OakProfileMenuTutorialInfo               `protobuf:"bytes,102,opt,name=tutorial_info,json=tutorialInfo,proto3" json:"tutorial_info"`
	DefaultNetworkType                          uint32                                    `protobuf:"varint,103,opt,name=default_network_type,json=defaultNetworkType,proto3" json:"default_network_type"`
	DefaultInviteType                           uint32                                    `protobuf:"varint,104,opt,name=default_invite_type,json=defaultInviteType,proto3" json:"default_invite_type"`
	MatchmakingRegion                           string                                    `protobuf:"bytes,105,opt,name=matchmaking_region,json=matchmakingRegion,proto3" json:"matchmaking_region"`
	StreamingService                            uint32                                    `protobuf:"varint,106,opt,name=streaming_service,json=streamingService,proto3" json:"streaming_service"`
	MaxCachedFriendEvents                       int32                                     `protobuf:"varint,107,opt,name=max_cached_friend_events,json=maxCachedFriendEvents,proto3" json:"max_cached_friend_events"`
	MaxCachedFriendStatuses                     int32                                     `protobuf:"varint,108,opt,name=max_cached_friend_statuses,json=maxCachedFriendStatuses,proto3" json:"max_cached_friend_statuses"`
	FriendEvents                                []string                                  `protobuf:"bytes,109,rep,name=friend_events,json=friendEvents,proto3" json:"friend_events"`
	FriendStatuses                              []string                                  `protobuf:"bytes,110,rep,name=friend_statuses,json=friendStatuses,proto3" json:"friend_statuses"`
	LastWhisperFetchEventsTime                  int64                                     `protobuf:"varint,111,opt,name=last_whisper_fetch_events_time,json=lastWhisperFetchEventsTime,proto3" json:"last_whisper_fetch_events_time"`
	LastWhisperFetchStatusesTime                int64                                     `protobuf:"varint,112,opt,name=last_whisper_fetch_statuses_time,json=lastWhisperFetchStatusesTime,proto3" json:"last_whisper_fetch_statuses_time"`
	DesiredCrossplayState                       uint32                                    `protobuf:"varint,113,opt,name=desired_crossplay_state,json=desiredCrossplayState,proto3" json:"desired_crossplay_state"`
	FriendEncounters                            []*Profile_FriendEncountersEntry          `protobuf:"bytes,133,rep,name=friend_encounters,json=friendEncounters,proto3" json:"friend_encounters"`
	MaxFriendEncounterSize                      int32                                     `protobuf:"varint,134,opt,name=max_friend_encounter_size,json=maxFriendEncounterSize,proto3" json:"max_friend_encounter_size"`
	ProfileStatsData                            []*GameStatSaveGameData                   `protobuf:"bytes,135,rep,name=profile_stats_data,json=profileStatsData,proto3" json:"profile_stats_data"`
	BankInventoryCategoryList                   []*InventoryCategorySaveData              `protobuf:"bytes,136,rep,name=bank_inventory_category_list,json=bankInventoryCategoryList,proto3" json:"bank_inventory_category_list"`
	BankInventoryList                           [][]byte                                  `protobuf:"bytes,137,rep,name=bank_inventory_list,json=bankInventoryList,proto3" json:"bank_inventory_list"`
	LostLootInventoryList                       [][]byte                                  `protobuf:"bytes,138,rep,name=lost_loot_inventory_list,json=lostLootInventoryList,proto3" json:"lost_loot_inventory_list"`
	NpcMailItems                                []*OakMailItem                            `protobuf:"bytes,139,rep,name=npc_mail_items,json=npcMailItems,proto3" json:"npc_mail_items"`
	MailGuids                                   []string                                  `protobuf:"bytes,140,rep,name=mail_guids,json=mailGuids,proto3" json:"mail_guids"`
	UnreadMailGuids                             []string                                  `protobuf:"bytes,141,rep,name=unread_mail_guids,json=unreadMailGuids,proto3" json:"unread_mail_guids"`
	GearSoldByFriends                           []*GearSoldByFriendData                   `protobuf:"bytes,142,rep,name=gear_sold_by_friends,json=gearSoldByFriends,proto3" json:"gear_sold_by_friends"`
	ProfileSduList                              []*OakSDUSaveGameData                     `protobuf:"bytes,143,rep,name=profile_sdu_list,json=profileSduList,proto3" json:"profile_sdu_list"`
	UnlockedCustomizations                      []*OakCustomizationSaveGameData           `protobuf:"bytes,144,rep,name=unlocked_customizations,json=unlockedCustomizations,proto3" json:"unlocked_customizations"`
	UnlockedInventoryCustomizationParts         []*OakInventoryCustomizationPartInfo      `protobuf:"bytes,145,rep,name=unlocked_inventory_customization_parts,json=unlockedInventoryCustomizationParts,proto3" json:"unlocked_inventory_customization_parts"`
	GuardianRank                                *GuardianRankProfileData                  `protobuf:"bytes,146,opt,name=guardian_rank,json=guardianRank,proto3" json:"guardian_rank"`
	UnlockedCrewQuartersDecorations             []*CrewQuartersDecorationItemSaveGameData `protobuf:"bytes,147,rep,name=unlocked_crew_quarters_decorations,json=unlockedCrewQuartersDecorations,proto3" json:"unlocked_crew_quarters_decorations"`
	UnlockedCrewQuartersRooms                   []*CrewQuartersRoomItemSaveGameData       `protobuf:"bytes,148,rep,name=unlocked_crew_quarters_rooms,json=unlockedCrewQuartersRooms,proto3" json:"unlocked_crew_quarters_rooms"`
	EnableMouseAcceleration                     bool                                      `protobuf:"varint,150,opt,name=enable_mouse_acceleration,json=enableMouseAcceleration,proto3" json:"enable_mouse_acceleration"`
	EnableGamepadInput                          bool                                      `protobuf:"varint,151,opt,name=enable_gamepad_input,json=enableGamepadInput,proto3" json:"enable_gamepad_input"`
	UseClassicGamepadInput                      bool                                      `protobuf:"varint,152,opt,name=use_classic_gamepad_input,json=useClassicGamepadInput,proto3" json:"use_classic_gamepad_input"`
	MasterVolume                                float32                                   `protobuf:"fixed32,153,opt,name=master_volume,json=masterVolume,proto3" json:"master_volume"`
	MonitorDisplayType                          uint32                                    `protobuf:"varint,154,opt,name=monitor_display_type,json=monitorDisplayType,proto3" json:"monitor_display_type"`
	GraphicsMode                                uint32                                    `protobuf:"varint,155,opt,name=graphics_mode,json=graphicsMode,proto3" json:"graphics_mode"`
	FrameRateLimit                              uint32                                    `protobuf:"varint,156,opt,name=frame_rate_limit,json=frameRateLimit,proto3" json:"frame_rate_limit"`
	BaseVehicleFov                              float32                                   `protobuf:"fixed32,157,opt,name=base_vehicle_fov,json=baseVehicleFov,proto3" json:"base_vehicle_fov"`
	GraphicsQuality                             uint32                                    `protobuf:"varint,158,opt,name=graphics_quality,json=graphicsQuality,proto3" json:"graphics_quality"`
	AnisotropicFiltering                        uint32                                    `protobuf:"varint,159,opt,name=anisotropic_filtering,json=anisotropicFiltering,proto3" json:"anisotropic_filtering"`
	ShadowQuality                               uint32                                    `protobuf:"varint,160,opt,name=shadow_quality,json=shadowQuality,proto3" json:"shadow_quality"`
	DisplayPerformanceStats                     uint32                                    `protobuf:"varint,161,opt,name=display_performance_stats,json=displayPerformanceStats,proto3" json:"display_performance_stats"`
	TextureDetail                               uint32                                    `protobuf:"varint,162,opt,name=texture_detail,json=textureDetail,proto3" json:"texture_detail"`
	DrawDistance                                uint32                                    `protobuf:"varint,163,opt,name=draw_distance,json=drawDistance,proto3" json:"draw_distance"`
	Clutter                                     uint32                                    `protobuf:"varint,164,opt,name=clutter,proto3" json:"clutter"`
	Tessellation                                uint32                                    `protobuf:"varint,165,opt,name=tessellation,proto3" json:"tessellation"`
	Foliage                                     uint32                                    `protobuf:"varint,166,opt,name=foliage,proto3" json:"foliage"`
	FoliageShadows                              bool                                      `protobuf:"varint,167,opt,name=foliage_shadows,json=foliageShadows,proto3" json:"foliage_shadows"`
	PlanarReflections                           bool                                      `protobuf:"varint,168,opt,name=planar_reflections,json=planarReflections,proto3" json:"planar_reflections"`
	VolumetricFog                               uint32                                    `protobuf:"varint,169,opt,name=volumetric_fog,json=volumetricFog,proto3" json:"volumetric_fog"`
	ScreenSpaceReflections                      uint32                                    `protobuf:"varint,170,opt,name=screen_space_reflections,json=screenSpaceReflections,proto3" json:"screen_space_reflections"`
	CharacterTextureDetail                      uint32                                    `protobuf:"varint,171,opt,name=character_texture_detail,json=characterTextureDetail,proto3" json:"character_texture_detail"`
	CharacterDetail                             uint32                                    `protobuf:"varint,172,opt,name=character_detail,json=characterDetail,proto3" json:"character_detail"`
	AmbientOcclusionQuality                     uint32                                    `protobuf:"varint,173,opt,name=ambient_occlusion_quality,json=ambientOcclusionQuality,proto3" json:"ambient_occlusion_quality"`
	ObjectMotionBlur                            bool                                      `protobuf:"varint,174,opt,name=object_motion_blur,json=objectMotionBlur,proto3" json:"object_motion_blur"`
	LensFlare                                   bool                                      `protobuf:"varint,175,opt,name=lens_flare,json=lensFlare,proto3" json:"lens_flare"`
	CombatNumberLongFormat                      bool                                      `protobuf:"varint,176,opt,name=combat_number_long_format,json=combatNumberLongFormat,proto3" json:"combat_number_long_format"`
	ShowMinimapLegendaries                      bool                                      `protobuf:"varint,177,opt,name=show_minimap_legendaries,json=showMinimapLegendaries,proto3" json:"show_minimap_legendaries"`
	UsePlayerCallouts                           bool                                      `protobuf:"varint,178,opt,name=use_player_callouts,json=usePlayerCallouts,proto3" json:"use_player_callouts"`
	FriendEventNotificationLifetime             uint32                                    `protobuf:"varint,179,opt,name=friend_event_notification_lifetime,json=friendEventNotificationLifetime,proto3" json:"friend_event_notification_lifetime"`
	FriendEventNotificationFrequency            uint32                                    `protobuf:"varint,180,opt,name=friend_event_notification_frequency,json=friendEventNotificationFrequency,proto3" json:"friend_event_notification_frequency"`
	TradeRequestReceptionType                   uint32                                    `protobuf:"varint,181,opt,name=trade_request_reception_type,json=tradeRequestReceptionType,proto3" json:"trade_request_reception_type"`
	HeadBobScale                                float32                                   `protobuf:"fixed32,182,opt,name=head_bob_scale,json=headBobScale,proto3" json:"head_bob_scale"`
	HasSeenFirstBoot                            bool                                      `protobuf:"varint,184,opt,name=has_seen_first_boot,json=hasSeenFirstBoot,proto3" json:"has_seen_first_boot"`
	SubsCcSize                                  float32                                   `protobuf:"fixed32,189,opt,name=subs_cc_size,json=subsCcSize,proto3" json:"subs_cc_size"`
	CcSubsBackgroundOpacity                     float32                                   `protobuf:"fixed32,190,opt,name=cc_subs_background_opacity,json=ccSubsBackgroundOpacity,proto3" json:"cc_subs_background_opacity"`
	WalkingButtonScheme                         uint32                                    `protobuf:"varint,191,opt,name=walking_button_scheme,json=walkingButtonScheme,proto3" json:"walking_button_scheme"`
	DrivingButtonScheme                         uint32                                    `protobuf:"varint,192,opt,name=driving_button_scheme,json=drivingButtonScheme,proto3" json:"driving_button_scheme"`
	GlyphMode                                   uint32                                    `protobuf:"varint,193,opt,name=glyph_mode,json=glyphMode,proto3" json:"glyph_mode"`
	Use_MPH                                     bool                                      `protobuf:"varint,194,opt,name=use_MPH,json=useMPH,proto3" json:"use_MPH"`
	RegisteredDownloadableEntitlements          []*RegisteredDownloadableEntitlements     `protobuf:"bytes,195,rep,name=registered_downloadable_entitlements,json=registeredDownloadableEntitlements,proto3" json:"registered_downloadable_entitlements"`
	SeenNewsItems                               []string                                  `protobuf:"bytes,196,rep,name=seen_news_items,json=seenNewsItems,proto3" json:"seen_news_items"`
	AutoCenteringEnabled                        bool                                      `protobuf:"varint,197,opt,name=auto_centering_enabled,json=autoCenteringEnabled,proto3" json:"auto_centering_enabled"`
	IncreasedChanceForSubscribers               bool                                      `protobuf:"varint,198,opt,name=increased_chance_for_subscribers,json=increasedChanceForSubscribers,proto3" json:"increased_chance_for_subscribers"`
	RareChestEventEnabled                       bool                                      `protobuf:"varint,199,opt,name=rare_chest_event_enabled,json=rareChestEventEnabled,proto3" json:"rare_chest_event_enabled"`
	BadassEventEnabled                          bool                                      `protobuf:"varint,200,opt,name=badass_event_enabled,json=badassEventEnabled,proto3" json:"badass_event_enabled"`
	PinataEventEnabled                          bool                                      `protobuf:"varint,201,opt,name=pinata_event_enabled,json=pinataEventEnabled,proto3" json:"pinata_event_enabled"`
	MinTimeBetweenBadassEvents                  int32                                     `protobuf:"varint,202,opt,name=min_time_between_badass_events,json=minTimeBetweenBadassEvents,proto3" json:"min_time_between_badass_events"`
	HudScaleMultiplier                          float32                                   `protobuf:"fixed32,203,opt,name=hud_scale_multiplier,json=hudScaleMultiplier,proto3" json:"hud_scale_multiplier"`
	DisableSpatialAudio                         bool                                      `protobuf:"varint,204,opt,name=disable_spatial_audio,json=disableSpatialAudio,proto3" json:"disable_spatial_audio"`
	TotalPlaytimeSeconds                        int32                                     `protobuf:"varint,205,opt,name=total_playtime_seconds,json=totalPlaytimeSeconds,proto3" json:"total_playtime_seconds"`
	MoxxisDrinkEventEnabled                     bool                                      `protobuf:"varint,206,opt,name=moxxis_drink_event_enabled,json=moxxisDrinkEventEnabled,proto3" json:"moxxis_drink_event_enabled"`
	MoxxisDrinkEventBitsProductId               int32                                     `protobuf:"varint,207,opt,name=moxxis_drink_event_bits_product_id,json=moxxisDrinkEventBitsProductId,proto3" json:"moxxis_drink_event_bits_product_id"`
	ChallengeData                               []*ChallengeSaveGameData                  `protobuf:"bytes,208,rep,name=challenge_data,json=challengeData,proto3" json:"challenge_data"`
	CitizenScienceLevelProgression              []int32                                   `protobuf:"varint,209,rep,packed,name=CitizenScienceLevelProgression,proto3" json:"CitizenScienceLevelProgression"`
	DefaultDeadZoneInnerUpdated                 bool                                      `protobuf:"varint,210,opt,name=default_dead_zone_inner_updated,json=defaultDeadZoneInnerUpdated,proto3" json:"default_dead_zone_inner_updated"`
	DisableEventContent                         bool                                      `protobuf:"varint,211,opt,name=disable_event_content,json=disableEventContent,proto3" json:"disable_event_content"`
	DesiredFriendSyncState                      uint32                                    `protobuf:"varint,212,opt,name=desired_friend_sync_state,json=desiredFriendSyncState,proto3" json:"desired_friend_sync_state"`
	NeedsShiftFirstBoot                         bool                                      `protobuf:"varint,213,opt,name=needs_shift_first_boot,json=needsShiftFirstBoot,proto3" json:"needs_shift_first_boot"`
	RecentlyMetPlayers                          []*RecentlyMetPlayer                      `protobuf:"bytes,214,rep,name=recently_met_players,json=recentlyMetPlayers,proto3" json:"recently_met_players"`
	CitizenScienceActiveBoosterIndex            int32                                     `protobuf:"varint,215,opt,name=CitizenScienceActiveBoosterIndex,proto3" json:"CitizenScienceActiveBoosterIndex"`
	CitizenScienceActiveBoosterRemainingTime    float32                                   `protobuf:"fixed32,216,opt,name=CitizenScienceActiveBoosterRemainingTime,proto3" json:"CitizenScienceActiveBoosterRemainingTime"`
	CitizenScienceActiveBoosterTotalTime        float32                                   `protobuf:"fixed32,217,opt,name=CitizenScienceActiveBoosterTotalTime,proto3" json:"CitizenScienceActiveBoosterTotalTime"`
	StreamerPrimaryActiveBoosterIndex           int32                                     `protobuf:"varint,218,opt,name=StreamerPrimaryActiveBoosterIndex,proto3" json:"StreamerPrimaryActiveBoosterIndex"`
	StreamerPrimaryActiveBoosterRemainingTime   float32                                   `protobuf:"fixed32,219,opt,name=StreamerPrimaryActiveBoosterRemainingTime,proto3" json:"StreamerPrimaryActiveBoosterRemainingTime"`
	StreamerPrimaryActiveBoosterTotalTime       float32                                   `protobuf:"fixed32,220,opt,name=StreamerPrimaryActiveBoosterTotalTime,proto3" json:"StreamerPrimaryActiveBoosterTotalTime"`
	StreamerSecondaryActiveBoosterIndex         int32                                     `protobuf:"varint,221,opt,name=StreamerSecondaryActiveBoosterIndex,proto3" json:"StreamerSecondaryActiveBoosterIndex"`
	StreamerSecondaryActiveBoosterRemainingTime float32                                   `protobuf:"fixed32,222,opt,name=StreamerSecondaryActiveBoosterRemainingTime,proto3" json:"StreamerSecondaryActiveBoosterRemainingTime"`
	StreamerSecondaryActiveBoosterTotalTime     float32                                   `protobuf:"fixed32,223,opt,name=StreamerSecondaryActiveBoosterTotalTime,proto3" json:"StreamerSecondaryActiveBoosterTotalTime"`
	StreamerBoosterTier                         int32                                     `protobuf:"varint,224,opt,name=StreamerBoosterTier,proto3" json:"StreamerBoosterTier"`
	CitizenScienceCSBucksAmount                 int32                                     `protobuf:"varint,226,opt,name=CitizenScienceCSBucksAmount,proto3" json:"CitizenScienceCSBucksAmount"`
	BCitizenScienceHasSeenIntroVideo            bool                                      `protobuf:"varint,227,opt,name=bCitizenScienceHasSeenIntroVideo,proto3" json:"bCitizenScienceHasSeenIntroVideo"`
	BCitizenScienceTutorialDone                 bool                                      `protobuf:"varint,228,opt,name=bCitizenScienceTutorialDone,proto3" json:"bCitizenScienceTutorialDone"`
	FixedInitialZonemapRotation                 bool                                      `protobuf:"varint,230,opt,name=fixed_initial_zonemap_rotation,json=fixedInitialZonemapRotation,proto3" json:"fixed_initial_zonemap_rotation"`
}

func (x *Profile) Reset() {
	*x = Profile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakProfile_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profile) ProtoMessage() {}

func (x *Profile) ProtoReflect() protoreflect.Message {
	mi := &file_OakProfile_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profile.ProtoReflect.Descriptor instead.
func (*Profile) Descriptor() ([]byte, []int) {
	return file_OakProfile_proto_rawDescGZIP(), []int{17}
}

func (x *Profile) GetEnableAimAssist() bool {
	if x != nil {
		return x.EnableAimAssist
	}
	return false
}

func (x *Profile) GetGamepadInvertLook() bool {
	if x != nil {
		return x.GamepadInvertLook
	}
	return false
}

func (x *Profile) GetGamepadInvertTurn() bool {
	if x != nil {
		return x.GamepadInvertTurn
	}
	return false
}

func (x *Profile) GetGamepadInvertMove() bool {
	if x != nil {
		return x.GamepadInvertMove
	}
	return false
}

func (x *Profile) GetGamepadInvertStrafe() bool {
	if x != nil {
		return x.GamepadInvertStrafe
	}
	return false
}

func (x *Profile) GetEnableVibration() bool {
	if x != nil {
		return x.EnableVibration
	}
	return false
}

func (x *Profile) GetInvertMousePitch() bool {
	if x != nil {
		return x.InvertMousePitch
	}
	return false
}

func (x *Profile) GetEnableMouseSmoothing() bool {
	if x != nil {
		return x.EnableMouseSmoothing
	}
	return false
}

func (x *Profile) GetMouseScale() float32 {
	if x != nil {
		return x.MouseScale
	}
	return 0
}

func (x *Profile) GetShowDamageNumbers() bool {
	if x != nil {
		return x.ShowDamageNumbers
	}
	return false
}

func (x *Profile) GetShowDamageNumberIcons() bool {
	if x != nil {
		return x.ShowDamageNumberIcons
	}
	return false
}

func (x *Profile) GetEnableTrainingMessages() bool {
	if x != nil {
		return x.EnableTrainingMessages
	}
	return false
}

func (x *Profile) GetShowTextChat() bool {
	if x != nil {
		return x.ShowTextChat
	}
	return false
}

func (x *Profile) GetCenterCrosshair() bool {
	if x != nil {
		return x.CenterCrosshair
	}
	return false
}

func (x *Profile) GetToggleSprint() bool {
	if x != nil {
		return x.ToggleSprint
	}
	return false
}

func (x *Profile) GetToggleCrouch() bool {
	if x != nil {
		return x.ToggleCrouch
	}
	return false
}

func (x *Profile) GetCensorContent() bool {
	if x != nil {
		return x.CensorContent
	}
	return false
}

func (x *Profile) GetMusicVolume() float32 {
	if x != nil {
		return x.MusicVolume
	}
	return 0
}

func (x *Profile) GetSoundEffectsVolume() float32 {
	if x != nil {
		return x.SoundEffectsVolume
	}
	return 0
}

func (x *Profile) GetVoVolume() float32 {
	if x != nil {
		return x.VoVolume
	}
	return 0
}

func (x *Profile) GetVoiceVolume() float32 {
	if x != nil {
		return x.VoiceVolume
	}
	return 0
}

func (x *Profile) GetEnableOptionalVo() bool {
	if x != nil {
		return x.EnableOptionalVo
	}
	return false
}

func (x *Profile) GetPushToTalk() bool {
	if x != nil {
		return x.PushToTalk
	}
	return false
}

func (x *Profile) GetEnableControllerAudio() bool {
	if x != nil {
		return x.EnableControllerAudio
	}
	return false
}

func (x *Profile) GetSpeakerAngleFront() float32 {
	if x != nil {
		return x.SpeakerAngleFront
	}
	return 0
}

func (x *Profile) GetSpeakerAngleSide() float32 {
	if x != nil {
		return x.SpeakerAngleSide
	}
	return 0
}

func (x *Profile) GetSpeakerAngleBack() float32 {
	if x != nil {
		return x.SpeakerAngleBack
	}
	return 0
}

func (x *Profile) GetSpeakerSetup() uint32 {
	if x != nil {
		return x.SpeakerSetup
	}
	return 0
}

func (x *Profile) GetMuteAudioOnFocusLoss() bool {
	if x != nil {
		return x.MuteAudioOnFocusLoss
	}
	return false
}

func (x *Profile) GetHideStrictNatHelpDialog() bool {
	if x != nil {
		return x.HideStrictNatHelpDialog
	}
	return false
}

func (x *Profile) GetPlayerInputBindings() *PlayerInputBindings {
	if x != nil {
		return x.PlayerInputBindings
	}
	return nil
}

func (x *Profile) GetNewsHashes() []uint32 {
	if x != nil {
		return x.NewsHashes
	}
	return nil
}

func (x *Profile) GetLastUsedSavegameId() uint32 {
	if x != nil {
		return x.LastUsedSavegameId
	}
	return 0
}

func (x *Profile) GetGamepadHipSensitivityLevel() int32 {
	if x != nil {
		return x.GamepadHipSensitivityLevel
	}
	return 0
}

func (x *Profile) GetGamepadZoomedSensitivityLevel() int32 {
	if x != nil {
		return x.GamepadZoomedSensitivityLevel
	}
	return 0
}

func (x *Profile) GetGamepadVehicleSensitivityLevel() int32 {
	if x != nil {
		return x.GamepadVehicleSensitivityLevel
	}
	return 0
}

func (x *Profile) GetGamepadMovementDeadZoneX() float32 {
	if x != nil {
		return x.GamepadMovementDeadZoneX
	}
	return 0
}

func (x *Profile) GetGamepadMovementDeadZoneY() float32 {
	if x != nil {
		return x.GamepadMovementDeadZoneY
	}
	return 0
}

func (x *Profile) GetGamepadLookDeadZoneInnerX() float32 {
	if x != nil {
		return x.GamepadLookDeadZoneInnerX
	}
	return 0
}

func (x *Profile) GetGamepadLookDeadZoneOuterX() float32 {
	if x != nil {
		return x.GamepadLookDeadZoneOuterX
	}
	return 0
}

func (x *Profile) GetGamepadLookDeadZoneInnerY() float32 {
	if x != nil {
		return x.GamepadLookDeadZoneInnerY
	}
	return 0
}

func (x *Profile) GetGamepadLookDeadZoneOuterY() float32 {
	if x != nil {
		return x.GamepadLookDeadZoneOuterY
	}
	return 0
}

func (x *Profile) GetGamepadVehicleMovementDeadZoneX() float32 {
	if x != nil {
		return x.GamepadVehicleMovementDeadZoneX
	}
	return 0
}

func (x *Profile) GetGamepadVehicleMovementDeadZoneY() float32 {
	if x != nil {
		return x.GamepadVehicleMovementDeadZoneY
	}
	return 0
}

func (x *Profile) GetGamepadVehicleLookDeadZoneInnerX() float32 {
	if x != nil {
		return x.GamepadVehicleLookDeadZoneInnerX
	}
	return 0
}

func (x *Profile) GetGamepadVehicleLookDeadZoneOuterX() float32 {
	if x != nil {
		return x.GamepadVehicleLookDeadZoneOuterX
	}
	return 0
}

func (x *Profile) GetGamepadVehicleLookDeadZoneInnerY() float32 {
	if x != nil {
		return x.GamepadVehicleLookDeadZoneInnerY
	}
	return 0
}

func (x *Profile) GetGamepadVehicleLookDeadZoneOuterY() float32 {
	if x != nil {
		return x.GamepadVehicleLookDeadZoneOuterY
	}
	return 0
}

func (x *Profile) GetGamepadLeftDeadZoneInner() float32 {
	if x != nil {
		return x.GamepadLeftDeadZoneInner
	}
	return 0
}

func (x *Profile) GetGamepadLeftDeadZoneOuter() float32 {
	if x != nil {
		return x.GamepadLeftDeadZoneOuter
	}
	return 0
}

func (x *Profile) GetGamepadRightDeadZoneInner() float32 {
	if x != nil {
		return x.GamepadRightDeadZoneInner
	}
	return 0
}

func (x *Profile) GetGamepadRightDeadZoneOuter() float32 {
	if x != nil {
		return x.GamepadRightDeadZoneOuter
	}
	return 0
}

func (x *Profile) GetGamepadLookAxialDeadZoneScale() float32 {
	if x != nil {
		return x.GamepadLookAxialDeadZoneScale
	}
	return 0
}

func (x *Profile) GetGamepadMoveAxialDeadZoneScale() float32 {
	if x != nil {
		return x.GamepadMoveAxialDeadZoneScale
	}
	return 0
}

func (x *Profile) GetGamepadUseAdvancedHipAimSettings() bool {
	if x != nil {
		return x.GamepadUseAdvancedHipAimSettings
	}
	return false
}

func (x *Profile) GetGamepadUseAdvancedZoomedAimSettings() bool {
	if x != nil {
		return x.GamepadUseAdvancedZoomedAimSettings
	}
	return false
}

func (x *Profile) GetGamepadUseAdvancedVehicleAimSettings() bool {
	if x != nil {
		return x.GamepadUseAdvancedVehicleAimSettings
	}
	return false
}

func (x *Profile) GetGamepadHipYawRate() float32 {
	if x != nil {
		return x.GamepadHipYawRate
	}
	return 0
}

func (x *Profile) GetGamepadHipPitchRate() float32 {
	if x != nil {
		return x.GamepadHipPitchRate
	}
	return 0
}

func (x *Profile) GetGamepadHipExtraYaw() float32 {
	if x != nil {
		return x.GamepadHipExtraYaw
	}
	return 0
}

func (x *Profile) GetGamepadHipExtraPitch() float32 {
	if x != nil {
		return x.GamepadHipExtraPitch
	}
	return 0
}

func (x *Profile) GetGamepadHipRampUpTime() float32 {
	if x != nil {
		return x.GamepadHipRampUpTime
	}
	return 0
}

func (x *Profile) GetGamepadHipRampUpDelay() float32 {
	if x != nil {
		return x.GamepadHipRampUpDelay
	}
	return 0
}

func (x *Profile) GetGamepadZoomedYawRate() float32 {
	if x != nil {
		return x.GamepadZoomedYawRate
	}
	return 0
}

func (x *Profile) GetGamepadZoomedPitchRate() float32 {
	if x != nil {
		return x.GamepadZoomedPitchRate
	}
	return 0
}

func (x *Profile) GetGamepadZoomedExtraYaw() float32 {
	if x != nil {
		return x.GamepadZoomedExtraYaw
	}
	return 0
}

func (x *Profile) GetGamepadZoomedExtraPitch() float32 {
	if x != nil {
		return x.GamepadZoomedExtraPitch
	}
	return 0
}

func (x *Profile) GetGamepadZoomedRampUpTime() float32 {
	if x != nil {
		return x.GamepadZoomedRampUpTime
	}
	return 0
}

func (x *Profile) GetGamepadZoomedRampUpDelay() float32 {
	if x != nil {
		return x.GamepadZoomedRampUpDelay
	}
	return 0
}

func (x *Profile) GetGamepadVehicleYawRate() float32 {
	if x != nil {
		return x.GamepadVehicleYawRate
	}
	return 0
}

func (x *Profile) GetGamepadVehiclePitchRate() float32 {
	if x != nil {
		return x.GamepadVehiclePitchRate
	}
	return 0
}

func (x *Profile) GetGamepadVehicleExtraYaw() float32 {
	if x != nil {
		return x.GamepadVehicleExtraYaw
	}
	return 0
}

func (x *Profile) GetGamepadVehicleExtraPitch() float32 {
	if x != nil {
		return x.GamepadVehicleExtraPitch
	}
	return 0
}

func (x *Profile) GetGamepadVehicleRampUpTime() float32 {
	if x != nil {
		return x.GamepadVehicleRampUpTime
	}
	return 0
}

func (x *Profile) GetGamepadVehicleRampUpDelay() float32 {
	if x != nil {
		return x.GamepadVehicleRampUpDelay
	}
	return 0
}

func (x *Profile) GetIronsightAimAssist() bool {
	if x != nil {
		return x.IronsightAimAssist
	}
	return false
}

func (x *Profile) GetWalkingJoystickScheme() uint32 {
	if x != nil {
		return x.WalkingJoystickScheme
	}
	return 0
}

func (x *Profile) GetDrivingJoystickScheme() uint32 {
	if x != nil {
		return x.DrivingJoystickScheme
	}
	return 0
}

func (x *Profile) GetMouseAdsScale() float32 {
	if x != nil {
		return x.MouseAdsScale
	}
	return 0
}

func (x *Profile) GetMouseVehicleScale() float32 {
	if x != nil {
		return x.MouseVehicleScale
	}
	return 0
}

func (x *Profile) GetMouseIronsightAimAssist() bool {
	if x != nil {
		return x.MouseIronsightAimAssist
	}
	return false
}

func (x *Profile) GetVehicleInputMode() uint32 {
	if x != nil {
		return x.VehicleInputMode
	}
	return 0
}

func (x *Profile) GetWeaponAimToggle() bool {
	if x != nil {
		return x.WeaponAimToggle
	}
	return false
}

func (x *Profile) GetMantleRequiresButton() bool {
	if x != nil {
		return x.MantleRequiresButton
	}
	return false
}

func (x *Profile) GetFixedMinimapRotation() bool {
	if x != nil {
		return x.FixedMinimapRotation
	}
	return false
}

func (x *Profile) GetMapInvertPitch() bool {
	if x != nil {
		return x.MapInvertPitch
	}
	return false
}

func (x *Profile) GetMapInvertYaw() bool {
	if x != nil {
		return x.MapInvertYaw
	}
	return false
}

func (x *Profile) GetDifficulty() uint32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *Profile) GetSwapDualWieldControls() bool {
	if x != nil {
		return x.SwapDualWieldControls
	}
	return false
}

func (x *Profile) GetBaseFov() float32 {
	if x != nil {
		return x.BaseFov
	}
	return 0
}

func (x *Profile) GetCrosshairNeutralColorFrame() uint32 {
	if x != nil {
		return x.CrosshairNeutralColorFrame
	}
	return 0
}

func (x *Profile) GetCrosshairEnemyColorFrame() uint32 {
	if x != nil {
		return x.CrosshairEnemyColorFrame
	}
	return 0
}

func (x *Profile) GetCrosshairAllyColorFrame() uint32 {
	if x != nil {
		return x.CrosshairAllyColorFrame
	}
	return 0
}

func (x *Profile) GetEnableSubtitles() bool {
	if x != nil {
		return x.EnableSubtitles
	}
	return false
}

func (x *Profile) GetEnableClosedCaptions() bool {
	if x != nil {
		return x.EnableClosedCaptions
	}
	return false
}

func (x *Profile) GetLastStatusMenuPage() string {
	if x != nil {
		return x.LastStatusMenuPage
	}
	return ""
}

func (x *Profile) GetInventoryScreenLastFilter() []*OakProfileLastInventoryFilterInfo {
	if x != nil {
		return x.InventoryScreenLastFilter
	}
	return nil
}

func (x *Profile) GetTutorialInfo() *OakProfileMenuTutorialInfo {
	if x != nil {
		return x.TutorialInfo
	}
	return nil
}

func (x *Profile) GetDefaultNetworkType() uint32 {
	if x != nil {
		return x.DefaultNetworkType
	}
	return 0
}

func (x *Profile) GetDefaultInviteType() uint32 {
	if x != nil {
		return x.DefaultInviteType
	}
	return 0
}

func (x *Profile) GetMatchmakingRegion() string {
	if x != nil {
		return x.MatchmakingRegion
	}
	return ""
}

func (x *Profile) GetStreamingService() uint32 {
	if x != nil {
		return x.StreamingService
	}
	return 0
}

func (x *Profile) GetMaxCachedFriendEvents() int32 {
	if x != nil {
		return x.MaxCachedFriendEvents
	}
	return 0
}

func (x *Profile) GetMaxCachedFriendStatuses() int32 {
	if x != nil {
		return x.MaxCachedFriendStatuses
	}
	return 0
}

func (x *Profile) GetFriendEvents() []string {
	if x != nil {
		return x.FriendEvents
	}
	return nil
}

func (x *Profile) GetFriendStatuses() []string {
	if x != nil {
		return x.FriendStatuses
	}
	return nil
}

func (x *Profile) GetLastWhisperFetchEventsTime() int64 {
	if x != nil {
		return x.LastWhisperFetchEventsTime
	}
	return 0
}

func (x *Profile) GetLastWhisperFetchStatusesTime() int64 {
	if x != nil {
		return x.LastWhisperFetchStatusesTime
	}
	return 0
}

func (x *Profile) GetDesiredCrossplayState() uint32 {
	if x != nil {
		return x.DesiredCrossplayState
	}
	return 0
}

func (x *Profile) GetFriendEncounters() []*Profile_FriendEncountersEntry {
	if x != nil {
		return x.FriendEncounters
	}
	return nil
}

func (x *Profile) GetMaxFriendEncounterSize() int32 {
	if x != nil {
		return x.MaxFriendEncounterSize
	}
	return 0
}

func (x *Profile) GetProfileStatsData() []*GameStatSaveGameData {
	if x != nil {
		return x.ProfileStatsData
	}
	return nil
}

func (x *Profile) GetBankInventoryCategoryList() []*InventoryCategorySaveData {
	if x != nil {
		return x.BankInventoryCategoryList
	}
	return nil
}

func (x *Profile) GetBankInventoryList() [][]byte {
	if x != nil {
		return x.BankInventoryList
	}
	return nil
}

func (x *Profile) GetLostLootInventoryList() [][]byte {
	if x != nil {
		return x.LostLootInventoryList
	}
	return nil
}

func (x *Profile) GetNpcMailItems() []*OakMailItem {
	if x != nil {
		return x.NpcMailItems
	}
	return nil
}

func (x *Profile) GetMailGuids() []string {
	if x != nil {
		return x.MailGuids
	}
	return nil
}

func (x *Profile) GetUnreadMailGuids() []string {
	if x != nil {
		return x.UnreadMailGuids
	}
	return nil
}

func (x *Profile) GetGearSoldByFriends() []*GearSoldByFriendData {
	if x != nil {
		return x.GearSoldByFriends
	}
	return nil
}

func (x *Profile) GetProfileSduList() []*OakSDUSaveGameData {
	if x != nil {
		return x.ProfileSduList
	}
	return nil
}

func (x *Profile) GetUnlockedCustomizations() []*OakCustomizationSaveGameData {
	if x != nil {
		return x.UnlockedCustomizations
	}
	return nil
}

func (x *Profile) GetUnlockedInventoryCustomizationParts() []*OakInventoryCustomizationPartInfo {
	if x != nil {
		return x.UnlockedInventoryCustomizationParts
	}
	return nil
}

func (x *Profile) GetGuardianRank() *GuardianRankProfileData {
	if x != nil {
		return x.GuardianRank
	}
	return nil
}

func (x *Profile) GetUnlockedCrewQuartersDecorations() []*CrewQuartersDecorationItemSaveGameData {
	if x != nil {
		return x.UnlockedCrewQuartersDecorations
	}
	return nil
}

func (x *Profile) GetUnlockedCrewQuartersRooms() []*CrewQuartersRoomItemSaveGameData {
	if x != nil {
		return x.UnlockedCrewQuartersRooms
	}
	return nil
}

func (x *Profile) GetEnableMouseAcceleration() bool {
	if x != nil {
		return x.EnableMouseAcceleration
	}
	return false
}

func (x *Profile) GetEnableGamepadInput() bool {
	if x != nil {
		return x.EnableGamepadInput
	}
	return false
}

func (x *Profile) GetUseClassicGamepadInput() bool {
	if x != nil {
		return x.UseClassicGamepadInput
	}
	return false
}

func (x *Profile) GetMasterVolume() float32 {
	if x != nil {
		return x.MasterVolume
	}
	return 0
}

func (x *Profile) GetMonitorDisplayType() uint32 {
	if x != nil {
		return x.MonitorDisplayType
	}
	return 0
}

func (x *Profile) GetGraphicsMode() uint32 {
	if x != nil {
		return x.GraphicsMode
	}
	return 0
}

func (x *Profile) GetFrameRateLimit() uint32 {
	if x != nil {
		return x.FrameRateLimit
	}
	return 0
}

func (x *Profile) GetBaseVehicleFov() float32 {
	if x != nil {
		return x.BaseVehicleFov
	}
	return 0
}

func (x *Profile) GetGraphicsQuality() uint32 {
	if x != nil {
		return x.GraphicsQuality
	}
	return 0
}

func (x *Profile) GetAnisotropicFiltering() uint32 {
	if x != nil {
		return x.AnisotropicFiltering
	}
	return 0
}

func (x *Profile) GetShadowQuality() uint32 {
	if x != nil {
		return x.ShadowQuality
	}
	return 0
}

func (x *Profile) GetDisplayPerformanceStats() uint32 {
	if x != nil {
		return x.DisplayPerformanceStats
	}
	return 0
}

func (x *Profile) GetTextureDetail() uint32 {
	if x != nil {
		return x.TextureDetail
	}
	return 0
}

func (x *Profile) GetDrawDistance() uint32 {
	if x != nil {
		return x.DrawDistance
	}
	return 0
}

func (x *Profile) GetClutter() uint32 {
	if x != nil {
		return x.Clutter
	}
	return 0
}

func (x *Profile) GetTessellation() uint32 {
	if x != nil {
		return x.Tessellation
	}
	return 0
}

func (x *Profile) GetFoliage() uint32 {
	if x != nil {
		return x.Foliage
	}
	return 0
}

func (x *Profile) GetFoliageShadows() bool {
	if x != nil {
		return x.FoliageShadows
	}
	return false
}

func (x *Profile) GetPlanarReflections() bool {
	if x != nil {
		return x.PlanarReflections
	}
	return false
}

func (x *Profile) GetVolumetricFog() uint32 {
	if x != nil {
		return x.VolumetricFog
	}
	return 0
}

func (x *Profile) GetScreenSpaceReflections() uint32 {
	if x != nil {
		return x.ScreenSpaceReflections
	}
	return 0
}

func (x *Profile) GetCharacterTextureDetail() uint32 {
	if x != nil {
		return x.CharacterTextureDetail
	}
	return 0
}

func (x *Profile) GetCharacterDetail() uint32 {
	if x != nil {
		return x.CharacterDetail
	}
	return 0
}

func (x *Profile) GetAmbientOcclusionQuality() uint32 {
	if x != nil {
		return x.AmbientOcclusionQuality
	}
	return 0
}

func (x *Profile) GetObjectMotionBlur() bool {
	if x != nil {
		return x.ObjectMotionBlur
	}
	return false
}

func (x *Profile) GetLensFlare() bool {
	if x != nil {
		return x.LensFlare
	}
	return false
}

func (x *Profile) GetCombatNumberLongFormat() bool {
	if x != nil {
		return x.CombatNumberLongFormat
	}
	return false
}

func (x *Profile) GetShowMinimapLegendaries() bool {
	if x != nil {
		return x.ShowMinimapLegendaries
	}
	return false
}

func (x *Profile) GetUsePlayerCallouts() bool {
	if x != nil {
		return x.UsePlayerCallouts
	}
	return false
}

func (x *Profile) GetFriendEventNotificationLifetime() uint32 {
	if x != nil {
		return x.FriendEventNotificationLifetime
	}
	return 0
}

func (x *Profile) GetFriendEventNotificationFrequency() uint32 {
	if x != nil {
		return x.FriendEventNotificationFrequency
	}
	return 0
}

func (x *Profile) GetTradeRequestReceptionType() uint32 {
	if x != nil {
		return x.TradeRequestReceptionType
	}
	return 0
}

func (x *Profile) GetHeadBobScale() float32 {
	if x != nil {
		return x.HeadBobScale
	}
	return 0
}

func (x *Profile) GetHasSeenFirstBoot() bool {
	if x != nil {
		return x.HasSeenFirstBoot
	}
	return false
}

func (x *Profile) GetSubsCcSize() float32 {
	if x != nil {
		return x.SubsCcSize
	}
	return 0
}

func (x *Profile) GetCcSubsBackgroundOpacity() float32 {
	if x != nil {
		return x.CcSubsBackgroundOpacity
	}
	return 0
}

func (x *Profile) GetWalkingButtonScheme() uint32 {
	if x != nil {
		return x.WalkingButtonScheme
	}
	return 0
}

func (x *Profile) GetDrivingButtonScheme() uint32 {
	if x != nil {
		return x.DrivingButtonScheme
	}
	return 0
}

func (x *Profile) GetGlyphMode() uint32 {
	if x != nil {
		return x.GlyphMode
	}
	return 0
}

func (x *Profile) GetUse_MPH() bool {
	if x != nil {
		return x.Use_MPH
	}
	return false
}

func (x *Profile) GetRegisteredDownloadableEntitlements() []*RegisteredDownloadableEntitlements {
	if x != nil {
		return x.RegisteredDownloadableEntitlements
	}
	return nil
}

func (x *Profile) GetSeenNewsItems() []string {
	if x != nil {
		return x.SeenNewsItems
	}
	return nil
}

func (x *Profile) GetAutoCenteringEnabled() bool {
	if x != nil {
		return x.AutoCenteringEnabled
	}
	return false
}

func (x *Profile) GetIncreasedChanceForSubscribers() bool {
	if x != nil {
		return x.IncreasedChanceForSubscribers
	}
	return false
}

func (x *Profile) GetRareChestEventEnabled() bool {
	if x != nil {
		return x.RareChestEventEnabled
	}
	return false
}

func (x *Profile) GetBadassEventEnabled() bool {
	if x != nil {
		return x.BadassEventEnabled
	}
	return false
}

func (x *Profile) GetPinataEventEnabled() bool {
	if x != nil {
		return x.PinataEventEnabled
	}
	return false
}

func (x *Profile) GetMinTimeBetweenBadassEvents() int32 {
	if x != nil {
		return x.MinTimeBetweenBadassEvents
	}
	return 0
}

func (x *Profile) GetHudScaleMultiplier() float32 {
	if x != nil {
		return x.HudScaleMultiplier
	}
	return 0
}

func (x *Profile) GetDisableSpatialAudio() bool {
	if x != nil {
		return x.DisableSpatialAudio
	}
	return false
}

func (x *Profile) GetTotalPlaytimeSeconds() int32 {
	if x != nil {
		return x.TotalPlaytimeSeconds
	}
	return 0
}

func (x *Profile) GetMoxxisDrinkEventEnabled() bool {
	if x != nil {
		return x.MoxxisDrinkEventEnabled
	}
	return false
}

func (x *Profile) GetMoxxisDrinkEventBitsProductId() int32 {
	if x != nil {
		return x.MoxxisDrinkEventBitsProductId
	}
	return 0
}

func (x *Profile) GetChallengeData() []*ChallengeSaveGameData {
	if x != nil {
		return x.ChallengeData
	}
	return nil
}

func (x *Profile) GetCitizenScienceLevelProgression() []int32 {
	if x != nil {
		return x.CitizenScienceLevelProgression
	}
	return nil
}

func (x *Profile) GetDefaultDeadZoneInnerUpdated() bool {
	if x != nil {
		return x.DefaultDeadZoneInnerUpdated
	}
	return false
}

func (x *Profile) GetDisableEventContent() bool {
	if x != nil {
		return x.DisableEventContent
	}
	return false
}

func (x *Profile) GetDesiredFriendSyncState() uint32 {
	if x != nil {
		return x.DesiredFriendSyncState
	}
	return 0
}

func (x *Profile) GetNeedsShiftFirstBoot() bool {
	if x != nil {
		return x.NeedsShiftFirstBoot
	}
	return false
}

func (x *Profile) GetRecentlyMetPlayers() []*RecentlyMetPlayer {
	if x != nil {
		return x.RecentlyMetPlayers
	}
	return nil
}

func (x *Profile) GetCitizenScienceActiveBoosterIndex() int32 {
	if x != nil {
		return x.CitizenScienceActiveBoosterIndex
	}
	return 0
}

func (x *Profile) GetCitizenScienceActiveBoosterRemainingTime() float32 {
	if x != nil {
		return x.CitizenScienceActiveBoosterRemainingTime
	}
	return 0
}

func (x *Profile) GetCitizenScienceActiveBoosterTotalTime() float32 {
	if x != nil {
		return x.CitizenScienceActiveBoosterTotalTime
	}
	return 0
}

func (x *Profile) GetStreamerPrimaryActiveBoosterIndex() int32 {
	if x != nil {
		return x.StreamerPrimaryActiveBoosterIndex
	}
	return 0
}

func (x *Profile) GetStreamerPrimaryActiveBoosterRemainingTime() float32 {
	if x != nil {
		return x.StreamerPrimaryActiveBoosterRemainingTime
	}
	return 0
}

func (x *Profile) GetStreamerPrimaryActiveBoosterTotalTime() float32 {
	if x != nil {
		return x.StreamerPrimaryActiveBoosterTotalTime
	}
	return 0
}

func (x *Profile) GetStreamerSecondaryActiveBoosterIndex() int32 {
	if x != nil {
		return x.StreamerSecondaryActiveBoosterIndex
	}
	return 0
}

func (x *Profile) GetStreamerSecondaryActiveBoosterRemainingTime() float32 {
	if x != nil {
		return x.StreamerSecondaryActiveBoosterRemainingTime
	}
	return 0
}

func (x *Profile) GetStreamerSecondaryActiveBoosterTotalTime() float32 {
	if x != nil {
		return x.StreamerSecondaryActiveBoosterTotalTime
	}
	return 0
}

func (x *Profile) GetStreamerBoosterTier() int32 {
	if x != nil {
		return x.StreamerBoosterTier
	}
	return 0
}

func (x *Profile) GetCitizenScienceCSBucksAmount() int32 {
	if x != nil {
		return x.CitizenScienceCSBucksAmount
	}
	return 0
}

func (x *Profile) GetBCitizenScienceHasSeenIntroVideo() bool {
	if x != nil {
		return x.BCitizenScienceHasSeenIntroVideo
	}
	return false
}

func (x *Profile) GetBCitizenScienceTutorialDone() bool {
	if x != nil {
		return x.BCitizenScienceTutorialDone
	}
	return false
}

func (x *Profile) GetFixedInitialZonemapRotation() bool {
	if x != nil {
		return x.FixedInitialZonemapRotation
	}
	return false
}

type Profile_FriendEncountersEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string                  `protobuf:"bytes,1,opt,name=key,proto3" json:"key"`
	Value *OakFriendEncounterData `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
}

func (x *Profile_FriendEncountersEntry) Reset() {
	*x = Profile_FriendEncountersEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakProfile_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profile_FriendEncountersEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profile_FriendEncountersEntry) ProtoMessage() {}

func (x *Profile_FriendEncountersEntry) ProtoReflect() protoreflect.Message {
	mi := &file_OakProfile_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profile_FriendEncountersEntry.ProtoReflect.Descriptor instead.
func (*Profile_FriendEncountersEntry) Descriptor() ([]byte, []int) {
	return file_OakProfile_proto_rawDescGZIP(), []int{17, 0}
}

func (x *Profile_FriendEncountersEntry) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Profile_FriendEncountersEntry) GetValue() *OakFriendEncounterData {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_OakProfile_proto protoreflect.FileDescriptor

var file_OakProfile_proto_rawDesc = []byte{
	0x0a, 0x10, 0x4f, 0x61, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x07, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x1a, 0x0f, 0x4f, 0x61, 0x6b,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x62, 0x0a, 0x19,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x62,
	0x69, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x62, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x22, 0x62, 0x0a, 0x1b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x41, 0x78, 0x69, 0x73, 0x5f, 0x4b, 0x65, 0x79, 0x12,
	0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x5f, 0x33, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4f,
	0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x33, 0x52, 0x07, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x33, 0x64, 0x22, 0x7d, 0x0a, 0x17, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x41, 0x78, 0x69, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x72, 0x65, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x62, 0x69, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76,
	0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x41, 0x78, 0x69, 0x73, 0x5f, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x22, 0x8b, 0x02, 0x0a, 0x1b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x74, 0x68, 0x12, 0x4b, 0x0a,
	0x0f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x52, 0x0e, 0x62, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x45, 0x0a, 0x0d, 0x61, 0x78,
	0x69, 0x73, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x41,
	0x78, 0x69, 0x73, 0x52, 0x0c, 0x61, 0x78, 0x69, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x22, 0x5b, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4f,
	0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x71,
	0x0a, 0x21, 0x4f, 0x61, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x61, 0x73, 0x74,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6c, 0x6f, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0xbf, 0x01, 0x0a, 0x1a, 0x4f, 0x61, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x4d, 0x65, 0x6e, 0x75, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x65, 0x6e, 0x54, 0x75,
	0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x75, 0x74, 0x6f, 0x72,
	0x69, 0x61, 0x6c, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x23, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69,
	0x61, 0x6c, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x6e,
	0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1e, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x49, 0x6e, 0x4e, 0x6f, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x73, 0x22, 0x6f, 0x0a, 0x16, 0x4f, 0x61, 0x6b, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a,
	0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x22, 0xec, 0x02, 0x0a, 0x0b, 0x4f, 0x61, 0x6b, 0x4d, 0x61, 0x69, 0x6c,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61,
	0x69, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x65, 0x61, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x67, 0x65, 0x61, 0x72, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x67,
	0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x69, 0x6c, 0x47,
	0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x5f, 0x62, 0x65, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x42, 0x65, 0x65, 0x6e, 0x52,
	0x65, 0x61, 0x64, 0x22, 0xa9, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x61, 0x72, 0x53, 0x6f, 0x6c, 0x64,
	0x42, 0x79, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x12,
	0x67, 0x65, 0x61, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x67, 0x65, 0x61, 0x72, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x1c, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x19, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x0d, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4e, 0x65, 0x74, 0x49, 0x64, 0x22,
	0x6f, 0x0a, 0x1c, 0x4f, 0x61, 0x6b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x22, 0x72, 0x0a, 0x21, 0x4f, 0x61, 0x6b, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x15, 0x0a,
	0x06, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69,
	0x73, 0x4e, 0x65, 0x77, 0x22, 0x69, 0x0a, 0x1e, 0x47, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e,
	0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61,
	0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x74, 0x68, 0x22,
	0xdd, 0x02, 0x0a, 0x17, 0x47, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x52, 0x61, 0x6e, 0x6b,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x10, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x0c, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x4f,
	0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x47, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x52,
	0x61, 0x6e, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x72, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x72,
	0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x69, 0x61, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x2f, 0x0a, 0x13, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x69, 0x61, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x69, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x53, 0x65, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x6e, 0x65, 0x77, 0x5f, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x6e, 0x65, 0x77, 0x47, 0x75, 0x61,
	0x72, 0x64, 0x69, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x22,
	0x7c, 0x0a, 0x26, 0x43, 0x72, 0x65, 0x77, 0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x73, 0x44,
	0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x61, 0x76,
	0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f,
	0x6e, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x4e, 0x65, 0x77,
	0x12, 0x3b, 0x0a, 0x1a, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x74, 0x65, 0x6d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0x6a, 0x0a,
	0x20, 0x43, 0x72, 0x65, 0x77, 0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x73, 0x52, 0x6f, 0x6f,
	0x6d, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x12, 0x2f, 0x0a, 0x14, 0x72, 0x6f, 0x6f, 0x6d,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x74, 0x65, 0x6d,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0xa5, 0x01, 0x0a, 0x11, 0x52, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x4d, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12,
	0x26, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x68, 0x69, 0x66, 0x74, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x68,
	0x6f, 0x77, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x73, 0x68, 0x6f,
	0x77, 0x53, 0x68, 0x69, 0x66, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x22, 0xc1, 0x5c, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x69, 0x6d, 0x5f, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x41, 0x69, 0x6d, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x61, 0x6d,
	0x65, 0x70, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x49,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x61, 0x6d,
	0x65, 0x70, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x74, 0x75, 0x72, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x49,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x61, 0x6d,
	0x65, 0x70, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x76, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x49,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x67, 0x61, 0x6d,
	0x65, 0x70, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x61,
	0x66, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61,
	0x64, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x53, 0x74, 0x72, 0x61, 0x66, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56,
	0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x69, 0x74, 0x63, 0x68, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x4d, 0x6f, 0x75, 0x73,
	0x65, 0x50, 0x69, 0x74, 0x63, 0x68, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f,
	0x75, 0x73, 0x65, 0x53, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x68, 0x6f, 0x77,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x37, 0x0a,
	0x18, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x63, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x24, 0x0a, 0x0e, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x68,
	0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x65,
	0x78, 0x74, 0x43, 0x68, 0x61, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x5f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x68, 0x61, 0x69, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x68, 0x61, 0x69,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f, 0x73, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x53, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x5f, 0x63, 0x72, 0x6f, 0x75, 0x63, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x74,
	0x6f, 0x67, 0x67, 0x6c, 0x65, 0x43, 0x72, 0x6f, 0x75, 0x63, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x12, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x5f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x76, 0x6f, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x56, 0x6f, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x74, 0x6f,
	0x5f, 0x74, 0x61, 0x6c, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x75, 0x73,
	0x68, 0x54, 0x6f, 0x54, 0x61, 0x6c, 0x6b, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12,
	0x2e, 0x0a, 0x13, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65,
	0x5f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x73, 0x70,
	0x65, 0x61, 0x6b, 0x65, 0x72, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x12,
	0x2c, 0x0a, 0x12, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65,
	0x5f, 0x73, 0x69, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x73, 0x70, 0x65,
	0x61, 0x6b, 0x65, 0x72, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x69, 0x64, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x73, 0x70, 0x65, 0x61, 0x6b,
	0x65, 0x72, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x74, 0x75, 0x70,
	0x12, 0x36, 0x0a, 0x18, 0x6d, 0x75, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x6f,
	0x6e, 0x5f, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x6d, 0x75, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4f, 0x6e, 0x46,
	0x6f, 0x63, 0x75, 0x73, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x68, 0x69, 0x64, 0x65,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x74, 0x5f, 0x68, 0x65, 0x6c, 0x70,
	0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x68,
	0x69, 0x64, 0x65, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x4e, 0x61, 0x74, 0x48, 0x65, 0x6c, 0x70,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x50, 0x0a, 0x15, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x73,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x6e,
	0x65, 0x77, 0x73, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x64, 0x53, 0x61, 0x76, 0x65, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x1d,
	0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x68, 0x69, 0x70, 0x5f, 0x73, 0x65, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x1a, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x48, 0x69, 0x70, 0x53,
	0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x47, 0x0a, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x7a, 0x6f, 0x6f, 0x6d, 0x65,
	0x64, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x27, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1d, 0x67, 0x61, 0x6d, 0x65, 0x70,
	0x61, 0x64, 0x5a, 0x6f, 0x6f, 0x6d, 0x65, 0x64, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x49, 0x0a, 0x21, 0x67, 0x61, 0x6d, 0x65,
	0x70, 0x61, 0x64, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x1e, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x56, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x3e, 0x0a, 0x1c, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x6d,
	0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x7a, 0x6f, 0x6e,
	0x65, 0x5f, 0x78, 0x18, 0x29, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x67, 0x61, 0x6d, 0x65, 0x70,
	0x61, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x61, 0x64, 0x5a, 0x6f,
	0x6e, 0x65, 0x58, 0x12, 0x3e, 0x0a, 0x1c, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x6d,
	0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x7a, 0x6f, 0x6e,
	0x65, 0x5f, 0x79, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x67, 0x61, 0x6d, 0x65, 0x70,
	0x61, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x61, 0x64, 0x5a, 0x6f,
	0x6e, 0x65, 0x59, 0x12, 0x41, 0x0a, 0x1e, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x6c,
	0x6f, 0x6f, 0x6b, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x5f, 0x78, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x19, 0x67, 0x61, 0x6d,
	0x65, 0x70, 0x61, 0x64, 0x4c, 0x6f, 0x6f, 0x6b, 0x44, 0x65, 0x61, 0x64, 0x5a, 0x6f, 0x6e, 0x65,
	0x49, 0x6e, 0x6e, 0x65, 0x72, 0x58, 0x12, 0x41, 0x0a, 0x1e, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61,
	0x64, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x78, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x19,
	0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x4c, 0x6f, 0x6f, 0x6b, 0x44, 0x65, 0x61, 0x64, 0x5a,
	0x6f, 0x6e, 0x65, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x58, 0x12, 0x41, 0x0a, 0x1e, 0x67, 0x61, 0x6d,
	0x65, 0x70, 0x61, 0x64, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x7a,
	0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x79, 0x18, 0x2d, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x19, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x4c, 0x6f, 0x6f, 0x6b, 0x44, 0x65,
	0x61, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x59, 0x12, 0x41, 0x0a, 0x1e,
	0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x5f, 0x64, 0x65, 0x61,
	0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x79, 0x18, 0x2e,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x19, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x4c, 0x6f, 0x6f,
	0x6b, 0x44, 0x65, 0x61, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x59, 0x12,
	0x4d, 0x0a, 0x24, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x61, 0x64,
	0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x78, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1f, 0x67,
	0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x6f, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x61, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x58, 0x12, 0x4d,
	0x0a, 0x24, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x5f,
	0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x79, 0x18, 0x30, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1f, 0x67, 0x61,
	0x6d, 0x65, 0x70, 0x61, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4d, 0x6f, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x61, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x59, 0x12, 0x50, 0x0a,
	0x26, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x78, 0x18, 0x31, 0x20, 0x01, 0x28, 0x02, 0x52, 0x20, 0x67,
	0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x6f, 0x6f,
	0x6b, 0x44, 0x65, 0x61, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x58, 0x12,
	0x50, 0x0a, 0x26, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x7a, 0x6f, 0x6e,
	0x65, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x78, 0x18, 0x32, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x20, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4c,
	0x6f, 0x6f, 0x6b, 0x44, 0x65, 0x61, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x4f, 0x75, 0x74, 0x65, 0x72,
	0x58, 0x12, 0x50, 0x0a, 0x26, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x76, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x7a,
	0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x79, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x44, 0x65, 0x61, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x6e,
	0x65, 0x72, 0x59, 0x12, 0x50, 0x0a, 0x26, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x5f, 0x64, 0x65, 0x61, 0x64,
	0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x79, 0x18, 0x34, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x20, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x56, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x44, 0x65, 0x61, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x4f,
	0x75, 0x74, 0x65, 0x72, 0x59, 0x12, 0x3e, 0x0a, 0x1c, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64,
	0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x35, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x67, 0x61, 0x6d,
	0x65, 0x70, 0x61, 0x64, 0x4c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x61, 0x64, 0x5a, 0x6f, 0x6e, 0x65,
	0x49, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x1c, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64,
	0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x36, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x67, 0x61, 0x6d,
	0x65, 0x70, 0x61, 0x64, 0x4c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x61, 0x64, 0x5a, 0x6f, 0x6e, 0x65,
	0x4f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x1d, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64,
	0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x37, 0x20, 0x01, 0x28, 0x02, 0x52, 0x19, 0x67, 0x61,
	0x6d, 0x65, 0x70, 0x61, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x61, 0x64, 0x5a, 0x6f,
	0x6e, 0x65, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x1d, 0x67, 0x61, 0x6d, 0x65, 0x70,
	0x61, 0x64, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x7a, 0x6f,
	0x6e, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x38, 0x20, 0x01, 0x28, 0x02, 0x52, 0x19,
	0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x61, 0x64,
	0x5a, 0x6f, 0x6e, 0x65, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x22, 0x67, 0x61, 0x6d,
	0x65, 0x70, 0x61, 0x64, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x5f, 0x61, 0x78, 0x69, 0x61, 0x6c, 0x5f,
	0x64, 0x65, 0x61, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18,
	0x39, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1d, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x4c, 0x6f,
	0x6f, 0x6b, 0x41, 0x78, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x12, 0x49, 0x0a, 0x22, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f,
	0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x61, 0x78, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x5f,
	0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x1d, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x41, 0x78, 0x69,
	0x61, 0x6c, 0x44, 0x65, 0x61, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12,
	0x4f, 0x0a, 0x25, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x61,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x70, 0x5f, 0x61, 0x69, 0x6d, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20,
	0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x55, 0x73, 0x65, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63,
	0x65, 0x64, 0x48, 0x69, 0x70, 0x41, 0x69, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x55, 0x0a, 0x28, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x5f,
	0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6f, 0x6d, 0x65, 0x64, 0x5f,
	0x61, 0x69, 0x6d, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x3c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x23, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x55, 0x73, 0x65, 0x41, 0x64,
	0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5a, 0x6f, 0x6f, 0x6d, 0x65, 0x64, 0x41, 0x69, 0x6d, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x57, 0x0a, 0x29, 0x67, 0x61, 0x6d, 0x65, 0x70,
	0x61, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f,
	0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x61, 0x69, 0x6d, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x24, 0x67, 0x61, 0x6d, 0x65,
	0x70, 0x61, 0x64, 0x55, 0x73, 0x65, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x56, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x41, 0x69, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x2f, 0x0a, 0x14, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x68, 0x69, 0x70, 0x5f,
	0x79, 0x61, 0x77, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11,
	0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x48, 0x69, 0x70, 0x59, 0x61, 0x77, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x33, 0x0a, 0x16, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x68, 0x69, 0x70,
	0x5f, 0x70, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x13, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x48, 0x69, 0x70, 0x50, 0x69, 0x74,
	0x63, 0x68, 0x52, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61,
	0x64, 0x5f, 0x68, 0x69, 0x70, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x79, 0x61, 0x77, 0x18,
	0x40, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x48, 0x69,
	0x70, 0x45, 0x78, 0x74, 0x72, 0x61, 0x59, 0x61, 0x77, 0x12, 0x35, 0x0a, 0x17, 0x67, 0x61, 0x6d,
	0x65, 0x70, 0x61, 0x64, 0x5f, 0x68, 0x69, 0x70, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x70,
	0x69, 0x74, 0x63, 0x68, 0x18, 0x41, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x67, 0x61, 0x6d, 0x65,
	0x70, 0x61, 0x64, 0x48, 0x69, 0x70, 0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x69, 0x74, 0x63, 0x68,
	0x12, 0x36, 0x0a, 0x18, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x68, 0x69, 0x70, 0x5f,
	0x72, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x42, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x14, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x48, 0x69, 0x70, 0x52, 0x61,
	0x6d, 0x70, 0x55, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x19, 0x67, 0x61, 0x6d, 0x65,
	0x70, 0x61, 0x64, 0x5f, 0x68, 0x69, 0x70, 0x5f, 0x72, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x70, 0x5f,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x43, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x67, 0x61, 0x6d,
	0x65, 0x70, 0x61, 0x64, 0x48, 0x69, 0x70, 0x52, 0x61, 0x6d, 0x70, 0x55, 0x70, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x12, 0x35, 0x0a, 0x17, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x7a, 0x6f,
	0x6f, 0x6d, 0x65, 0x64, 0x5f, 0x79, 0x61, 0x77, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x44, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x14, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5a, 0x6f, 0x6f, 0x6d,
	0x65, 0x64, 0x59, 0x61, 0x77, 0x52, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x67, 0x61, 0x6d,
	0x65, 0x70, 0x61, 0x64, 0x5f, 0x7a, 0x6f, 0x6f, 0x6d, 0x65, 0x64, 0x5f, 0x70, 0x69, 0x74, 0x63,
	0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x45, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x67, 0x61,
	0x6d, 0x65, 0x70, 0x61, 0x64, 0x5a, 0x6f, 0x6f, 0x6d, 0x65, 0x64, 0x50, 0x69, 0x74, 0x63, 0x68,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f,
	0x7a, 0x6f, 0x6f, 0x6d, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x79, 0x61, 0x77,
	0x18, 0x46, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5a,
	0x6f, 0x6f, 0x6d, 0x65, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x59, 0x61, 0x77, 0x12, 0x3b, 0x0a,
	0x1a, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x7a, 0x6f, 0x6f, 0x6d, 0x65, 0x64, 0x5f,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x70, 0x69, 0x74, 0x63, 0x68, 0x18, 0x47, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x17, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5a, 0x6f, 0x6f, 0x6d, 0x65, 0x64,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x50, 0x69, 0x74, 0x63, 0x68, 0x12, 0x3c, 0x0a, 0x1b, 0x67, 0x61,
	0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x7a, 0x6f, 0x6f, 0x6d, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x6d,
	0x70, 0x5f, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x17, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5a, 0x6f, 0x6f, 0x6d, 0x65, 0x64, 0x52, 0x61,
	0x6d, 0x70, 0x55, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x1c, 0x67, 0x61, 0x6d, 0x65,
	0x70, 0x61, 0x64, 0x5f, 0x7a, 0x6f, 0x6f, 0x6d, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x6d, 0x70, 0x5f,
	0x75, 0x70, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x49, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18,
	0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5a, 0x6f, 0x6f, 0x6d, 0x65, 0x64, 0x52, 0x61, 0x6d,
	0x70, 0x55, 0x70, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x67, 0x61, 0x6d, 0x65,
	0x70, 0x61, 0x64, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x79, 0x61, 0x77, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x67, 0x61, 0x6d, 0x65,
	0x70, 0x61, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x59, 0x61, 0x77, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x76, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x5f, 0x70, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x4b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x56, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x69, 0x74, 0x63, 0x68, 0x52, 0x61, 0x74, 0x65, 0x12, 0x39,
	0x0a, 0x19, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x79, 0x61, 0x77, 0x18, 0x4c, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x16, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x59, 0x61, 0x77, 0x12, 0x3d, 0x0a, 0x1b, 0x67, 0x61, 0x6d,
	0x65, 0x70, 0x61, 0x64, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x5f, 0x70, 0x69, 0x74, 0x63, 0x68, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18,
	0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x50, 0x69, 0x74, 0x63, 0x68, 0x12, 0x3e, 0x0a, 0x1c, 0x67, 0x61, 0x6d, 0x65,
	0x70, 0x61, 0x64, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x6d, 0x70,
	0x5f, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18,
	0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x61,
	0x6d, 0x70, 0x55, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x1d, 0x67, 0x61, 0x6d, 0x65,
	0x70, 0x61, 0x64, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x6d, 0x70,
	0x5f, 0x75, 0x70, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x19, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52,
	0x61, 0x6d, 0x70, 0x55, 0x70, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x72,
	0x6f, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x61, 0x69, 0x6d, 0x5f, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x18, 0x50, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x72, 0x6f, 0x6e, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x41, 0x69, 0x6d, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x17,
	0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x77,
	0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x4a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f,
	0x6a, 0x6f, 0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18,
	0x52, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x64, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x4a, 0x6f,
	0x79, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x6d, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x64, 0x73, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18,
	0x53, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x41, 0x64, 0x73, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x54, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x11, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x72,
	0x6f, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x61, 0x69, 0x6d, 0x5f, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x18, 0x55, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x49,
	0x72, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x41, 0x69, 0x6d, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x12, 0x2c, 0x0a, 0x12, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x56, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x5f, 0x61, 0x69, 0x6d, 0x5f, 0x74, 0x6f,
	0x67, 0x67, 0x6c, 0x65, 0x18, 0x57, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x77, 0x65, 0x61, 0x70,
	0x6f, 0x6e, 0x41, 0x69, 0x6d, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6d,
	0x61, 0x6e, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x62,
	0x75, 0x74, 0x74, 0x6f, 0x6e, 0x18, 0x58, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6d, 0x61, 0x6e,
	0x74, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x42, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x12, 0x34, 0x0a, 0x16, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x61, 0x70, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x59, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x66, 0x69, 0x78, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x70, 0x52,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x69,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x70, 0x69, 0x74, 0x63, 0x68, 0x18, 0x5a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x50, 0x69, 0x74, 0x63,
	0x68, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f,
	0x79, 0x61, 0x77, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x61, 0x70, 0x49, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x59, 0x61, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x64, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x77, 0x61, 0x70, 0x5f,
	0x64, 0x75, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x73, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x77, 0x61, 0x70, 0x44,
	0x75, 0x61, 0x6c, 0x57, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x6f, 0x76, 0x18, 0x5e, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x46, 0x6f, 0x76, 0x12, 0x41, 0x0a, 0x1d, 0x63,
	0x72, 0x6f, 0x73, 0x73, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x5f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1a, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x68, 0x61, 0x69, 0x72, 0x4e, 0x65, 0x75,
	0x74, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x3d,
	0x0a, 0x1b, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x65, 0x6e, 0x65, 0x6d,
	0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x60, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x18, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x68, 0x61, 0x69, 0x72, 0x45, 0x6e,
	0x65, 0x6d, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a,
	0x1a, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x61, 0x6c, 0x6c, 0x79, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x61, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x17, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x68, 0x61, 0x69, 0x72, 0x41, 0x6c, 0x6c, 0x79,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x18, 0x62,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x63, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x64, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x6e, 0x75, 0x50, 0x61, 0x67, 0x65, 0x12, 0x6b,
	0x0a, 0x1c, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x65,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x4f,
	0x61, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x19, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x0d, 0x74,
	0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x66, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x4f, 0x61, 0x6b,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x54, 0x75, 0x74, 0x6f, 0x72,
	0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x67, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x68,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x69, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x6a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x6b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x1a,
	0x6d, 0x61, 0x78, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x17, 0x6d, 0x61, 0x78, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x6d, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65,
	0x73, 0x18, 0x6e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x1e, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x77, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x1a, 0x6c, 0x61, 0x73, 0x74, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x20, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x77, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x70, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x6c, 0x61, 0x73, 0x74, 0x57, 0x68, 0x69, 0x73, 0x70,
	0x65, 0x72, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x63,
	0x72, 0x6f, 0x73, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x71,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x43, 0x72, 0x6f,
	0x73, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x54, 0x0a, 0x11, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x85, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76,
	0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x10, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x3a, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f,
	0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x86,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x4c, 0x0a,
	0x12, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x87, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4f, 0x61, 0x6b,
	0x53, 0x61, 0x76, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x53, 0x61, 0x76,
	0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x64, 0x0a, 0x1c, 0x62,
	0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x88, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x61,
	0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x19, 0x62, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2f, 0x0a, 0x13, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x89, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x11, 0x62, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x6c, 0x6f, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x6f, 0x74, 0x5f,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x8a,
	0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x15, 0x6c, 0x6f, 0x73, 0x74, 0x4c, 0x6f, 0x6f, 0x74, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0e,
	0x6e, 0x70, 0x63, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x8b,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e,
	0x4f, 0x61, 0x6b, 0x4d, 0x61, 0x69, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x6e, 0x70, 0x63,
	0x4d, 0x61, 0x69, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x69,
	0x6c, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x73, 0x18, 0x8c, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x61, 0x69, 0x6c, 0x47, 0x75, 0x69, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x75, 0x6e, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x73, 0x18, 0x8d,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x69,
	0x6c, 0x47, 0x75, 0x69, 0x64, 0x73, 0x12, 0x4f, 0x0a, 0x14, 0x67, 0x65, 0x61, 0x72, 0x5f, 0x73,
	0x6f, 0x6c, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x8e,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e,
	0x47, 0x65, 0x61, 0x72, 0x53, 0x6f, 0x6c, 0x64, 0x42, 0x79, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x67, 0x65, 0x61, 0x72, 0x53, 0x6f, 0x6c, 0x64, 0x42, 0x79,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x73, 0x64, 0x75, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x8f, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x4f, 0x61, 0x6b,
	0x53, 0x44, 0x55, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x64, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x5f, 0x0a, 0x17, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x90, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x4f, 0x61, 0x6b, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x61, 0x76, 0x65,
	0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x16, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x80, 0x01, 0x0a, 0x26, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x91, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x4f, 0x61, 0x6b,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x23,
	0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x0d, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f,
	0x72, 0x61, 0x6e, 0x6b, 0x18, 0x92, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x4f, 0x61,
	0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x47, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x52, 0x61,
	0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x7d, 0x0a, 0x22, 0x75,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x77, 0x5f, 0x71, 0x75, 0x61,
	0x72, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x93, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61,
	0x76, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x77, 0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x73, 0x44,
	0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x61, 0x76,
	0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x1f, 0x75, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x43, 0x72, 0x65, 0x77, 0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x73, 0x44,
	0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6b, 0x0a, 0x1c, 0x75, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x77, 0x5f, 0x71, 0x75, 0x61, 0x72,
	0x74, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x18, 0x94, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x77,
	0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x73, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x74, 0x65, 0x6d,
	0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x19, 0x75, 0x6e,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x43, 0x72, 0x65, 0x77, 0x51, 0x75, 0x61, 0x72, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x6f, 0x6f, 0x6d, 0x73, 0x12, 0x3b, 0x0a, 0x19, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x97, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x70,
	0x61, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x75, 0x73, 0x65, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x5f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x75, 0x73, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x47, 0x61, 0x6d, 0x65, 0x70, 0x61, 0x64, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x9b, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x29, 0x0a,
	0x10, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x66, 0x6f,
	0x76, 0x18, 0x9d, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x56, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x46, 0x6f, 0x76, 0x12, 0x2a, 0x0a, 0x10, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x69, 0x63, 0x73, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x9e, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x73, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x15, 0x61, 0x6e, 0x69, 0x73, 0x6f, 0x74, 0x72, 0x6f,
	0x70, 0x69, 0x63, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x9f, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x61, 0x6e, 0x69, 0x73, 0x6f, 0x74, 0x72, 0x6f, 0x70, 0x69,
	0x63, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0xa0, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x3b, 0x0a, 0x19, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0xa1, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x18, 0xa2, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x72, 0x61, 0x77, 0x5f,
	0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x64, 0x72, 0x61, 0x77, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a,
	0x07, 0x63, 0x6c, 0x75, 0x74, 0x74, 0x65, 0x72, 0x18, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x63, 0x6c, 0x75, 0x74, 0x74, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x73,
	0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x74, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x07, 0x66, 0x6f, 0x6c, 0x69, 0x61, 0x67, 0x65, 0x18, 0xa6, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x66, 0x6f, 0x6c, 0x69, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x6f, 0x6c, 0x69,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x73, 0x18, 0xa7, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x66, 0x6f, 0x6c, 0x69, 0x61, 0x67, 0x65, 0x53, 0x68, 0x61, 0x64, 0x6f,
	0x77, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x72, 0x5f, 0x72, 0x65, 0x66,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xa8, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x72, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x66, 0x6f, 0x67, 0x18, 0xa9, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x46, 0x6f, 0x67, 0x12, 0x39, 0x0a, 0x18, 0x73, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x18, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x18, 0xab, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x2a, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0xac, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x3b, 0x0a, 0x19,
	0x61, 0x6d, 0x62, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x63, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0xad, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x17, 0x61, 0x6d, 0x62, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x63, 0x63, 0x6c, 0x75, 0x73, 0x69,
	0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x75, 0x72, 0x18,
	0xae, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x75, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x65, 0x6e, 0x73,
	0x5f, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x18, 0xaf, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6c,
	0x65, 0x6e, 0x73, 0x46, 0x6c, 0x61, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x62,
	0x61, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0xb0, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x63, 0x6f,
	0x6d, 0x62, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x6f, 0x6e, 0x67, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x39, 0x0a, 0x18, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x61, 0x70, 0x5f, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73,
	0x18, 0xb1, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x73, 0x68, 0x6f, 0x77, 0x4d, 0x69, 0x6e,
	0x69, 0x6d, 0x61, 0x70, 0x4c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x2f, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x73, 0x18, 0xb2, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x75,
	0x73, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x73,
	0x12, 0x4c, 0x0a, 0x22, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69,
	0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xb3, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x4e,
	0x0a, 0x23, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x40,
	0x0a, 0x1c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0xb5,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x74, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x6f, 0x62, 0x5f, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x18, 0xb6, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x42,
	0x6f, 0x62, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x68, 0x61, 0x73, 0x5f, 0x73,
	0x65, 0x65, 0x6e, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x18, 0xb8,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x68, 0x61, 0x73, 0x53, 0x65, 0x65, 0x6e, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x5f,
	0x63, 0x63, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0xbd, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a,
	0x73, 0x75, 0x62, 0x73, 0x43, 0x63, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x63,
	0x5f, 0x73, 0x75, 0x62, 0x73, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x5f, 0x6f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x17, 0x63, 0x63, 0x53, 0x75, 0x62, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x4f, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x15, 0x77, 0x61, 0x6c, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x65, 0x18, 0xbf, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e,
	0x67, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x33, 0x0a,
	0x15, 0x64, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0xc0, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x64,
	0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0xc1, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x4d, 0x50, 0x48, 0x18, 0xc2, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x73, 0x65, 0x4d, 0x50, 0x48, 0x12, 0x7e, 0x0a, 0x24,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0xc3, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x4f, 0x61,
	0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x22, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x65, 0x65, 0x6e, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0xc4, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x65, 0x6e, 0x4e, 0x65, 0x77, 0x73,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x35, 0x0a, 0x16, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0xc5, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x61, 0x75, 0x74, 0x6f, 0x43, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x20,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73,
	0x18, 0xc6, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73,
	0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x61, 0x72, 0x65, 0x5f, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0xc7, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x72, 0x61, 0x72, 0x65, 0x43,
	0x68, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x31, 0x0a, 0x14, 0x62, 0x61, 0x64, 0x61, 0x73, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x62, 0x61, 0x64, 0x61, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x14, 0x70, 0x69, 0x6e, 0x61, 0x74, 0x61, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xc9, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x70, 0x69, 0x6e, 0x61, 0x74, 0x61, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x1e, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x5f, 0x62, 0x61, 0x64, 0x61, 0x73,
	0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0xca, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x1a, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x42,
	0x61, 0x64, 0x61, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x68,
	0x75, 0x64, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x18, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x68, 0x75, 0x64, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x33,
	0x0a, 0x15, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x12, 0x35, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6c, 0x61,
	0x79, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0xcd, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x6d, 0x6f,
	0x78, 0x78, 0x69, 0x73, 0x5f, 0x64, 0x72, 0x69, 0x6e, 0x6b, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xce, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x17, 0x6d, 0x6f, 0x78, 0x78, 0x69, 0x73, 0x44, 0x72, 0x69, 0x6e, 0x6b, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x22, 0x6d, 0x6f, 0x78, 0x78,
	0x69, 0x73, 0x5f, 0x64, 0x72, 0x69, 0x6e, 0x6b, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x62,
	0x69, 0x74, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xcf,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1d, 0x6d, 0x6f, 0x78, 0x78, 0x69, 0x73, 0x44, 0x72, 0x69,
	0x6e, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x69, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0xd0, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x47, 0x0a, 0x1e,
	0x43, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x53, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xd1,
	0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x1e, 0x43, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x53, 0x63,
	0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x1f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x61, 0x64, 0x5a, 0x6f, 0x6e, 0x65,
	0x49, 0x6e, 0x6e, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x15,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x3a, 0x0a, 0x19, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0xd4,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a,
	0x16, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x73, 0x68, 0x69, 0x66, 0x74, 0x5f, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x18, 0xd5, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x6e, 0x65, 0x65, 0x64, 0x73, 0x53, 0x68, 0x69, 0x66, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x42,
	0x6f, 0x6f, 0x74, 0x12, 0x4d, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x5f,
	0x6d, 0x65, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0xd6, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x52, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x6c, 0x79, 0x4d, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x12,
	0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x4d, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x12, 0x4b, 0x0a, 0x20, 0x43, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x53, 0x63, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xd7, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x20, 0x43,
	0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x53, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x5b, 0x0a, 0x28, 0x43, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x53, 0x63, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x18, 0xd8, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x28, 0x43, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x53, 0x63, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x24,
	0x43, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x53, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0xd9, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x24, 0x43, 0x69, 0x74,
	0x69, 0x7a, 0x65, 0x6e, 0x53, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x4d, 0x0a, 0x21, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x50, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xda, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x21, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x5d, 0x0a, 0x29, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x18, 0xdb, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x29, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x50, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x6f, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x55, 0x0a, 0x25, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x25, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x23, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xdd, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x23, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x6f, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x61, 0x0a, 0x2b, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x18, 0xde, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x2b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x27,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0xdf, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x27,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x65, 0x72, 0x18, 0xe0,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x72, 0x42,
	0x6f, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x54, 0x69, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x1b, 0x43, 0x69,
	0x74, 0x69, 0x7a, 0x65, 0x6e, 0x53, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x53, 0x42, 0x75,
	0x63, 0x6b, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xe2, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x1b, 0x43, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x53, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x43, 0x53, 0x42, 0x75, 0x63, 0x6b, 0x73, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4b, 0x0a,
	0x20, 0x62, 0x43, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x53, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x48, 0x61, 0x73, 0x53, 0x65, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x18, 0xe3, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x62, 0x43, 0x69, 0x74, 0x69, 0x7a,
	0x65, 0x6e, 0x53, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x61, 0x73, 0x53, 0x65, 0x65, 0x6e,
	0x49, 0x6e, 0x74, 0x72, 0x6f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x41, 0x0a, 0x1b, 0x62, 0x43,
	0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x53, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x75, 0x74,
	0x6f, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x6f, 0x6e, 0x65, 0x18, 0xe4, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1b, 0x62, 0x43, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x53, 0x63, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x44, 0x0a,
	0x1e, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x7a,
	0x6f, 0x6e, 0x65, 0x6d, 0x61, 0x70, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0xe6, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x5a, 0x6f, 0x6e, 0x65, 0x6d, 0x61, 0x70, 0x52, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x60, 0x0a, 0x15, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x4f, 0x61, 0x6b, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_OakProfile_proto_rawDescOnce sync.Once
	file_OakProfile_proto_rawDescData = file_OakProfile_proto_rawDesc
)

func file_OakProfile_proto_rawDescGZIP() []byte {
	file_OakProfile_proto_rawDescOnce.Do(func() {
		file_OakProfile_proto_rawDescData = protoimpl.X.CompressGZIP(file_OakProfile_proto_rawDescData)
	})
	return file_OakProfile_proto_rawDescData
}

var file_OakProfile_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_OakProfile_proto_goTypes = []interface{}{
	(*PlayerInputBinding_Button)(nil),              // 0: OakSave.PlayerInputBinding_Button
	(*PlayerInputBinding_Axis_Key)(nil),            // 1: OakSave.PlayerInputBinding_Axis_Key
	(*PlayerInputBinding_Axis)(nil),                // 2: OakSave.PlayerInputBinding_Axis
	(*PlayerInputBinding_Category)(nil),            // 3: OakSave.PlayerInputBinding_Category
	(*PlayerInputBindings)(nil),                    // 4: OakSave.PlayerInputBindings
	(*OakProfileLastInventoryFilterInfo)(nil),      // 5: OakSave.OakProfileLastInventoryFilterInfo
	(*OakProfileMenuTutorialInfo)(nil),             // 6: OakSave.OakProfileMenuTutorialInfo
	(*OakFriendEncounterData)(nil),                 // 7: OakSave.OakFriendEncounterData
	(*OakMailItem)(nil),                            // 8: OakSave.OakMailItem
	(*GearSoldByFriendData)(nil),                   // 9: OakSave.GearSoldByFriendData
	(*OakCustomizationSaveGameData)(nil),           // 10: OakSave.OakCustomizationSaveGameData
	(*OakInventoryCustomizationPartInfo)(nil),      // 11: OakSave.OakInventoryCustomizationPartInfo
	(*GuardianRankRewardSaveGameData)(nil),         // 12: OakSave.GuardianRankRewardSaveGameData
	(*GuardianRankProfileData)(nil),                // 13: OakSave.GuardianRankProfileData
	(*CrewQuartersDecorationItemSaveGameData)(nil), // 14: OakSave.CrewQuartersDecorationItemSaveGameData
	(*CrewQuartersRoomItemSaveGameData)(nil),       // 15: OakSave.CrewQuartersRoomItemSaveGameData
	(*RecentlyMetPlayer)(nil),                      // 16: OakSave.RecentlyMetPlayer
	(*Profile)(nil),                                // 17: OakSave.Profile
	(*Profile_FriendEncountersEntry)(nil),          // 18: OakSave.Profile.FriendEncountersEntry
	(*Vec3)(nil),                                   // 19: OakSave.Vec3
	(*GameStatSaveGameData)(nil),                   // 20: OakSave.GameStatSaveGameData
	(*InventoryCategorySaveData)(nil),              // 21: OakSave.InventoryCategorySaveData
	(*OakSDUSaveGameData)(nil),                     // 22: OakSave.OakSDUSaveGameData
	(*RegisteredDownloadableEntitlements)(nil),     // 23: OakSave.RegisteredDownloadableEntitlements
	(*ChallengeSaveGameData)(nil),                  // 24: OakSave.ChallengeSaveGameData
}
var file_OakProfile_proto_depIdxs = []int32{
	19, // 0: OakSave.PlayerInputBinding_Axis_Key.scale_3d:type_name -> OakSave.Vec3
	1,  // 1: OakSave.PlayerInputBinding_Axis.keys:type_name -> OakSave.PlayerInputBinding_Axis_Key
	0,  // 2: OakSave.PlayerInputBinding_Category.button_bindings:type_name -> OakSave.PlayerInputBinding_Button
	2,  // 3: OakSave.PlayerInputBinding_Category.axis_bindings:type_name -> OakSave.PlayerInputBinding_Axis
	3,  // 4: OakSave.PlayerInputBindings.categories:type_name -> OakSave.PlayerInputBinding_Category
	12, // 5: OakSave.GuardianRankProfileData.rank_rewards:type_name -> OakSave.GuardianRankRewardSaveGameData
	4,  // 6: OakSave.Profile.player_input_bindings:type_name -> OakSave.PlayerInputBindings
	5,  // 7: OakSave.Profile.inventory_screen_last_filter:type_name -> OakSave.OakProfileLastInventoryFilterInfo
	6,  // 8: OakSave.Profile.tutorial_info:type_name -> OakSave.OakProfileMenuTutorialInfo
	18, // 9: OakSave.Profile.friend_encounters:type_name -> OakSave.Profile.FriendEncountersEntry
	20, // 10: OakSave.Profile.profile_stats_data:type_name -> OakSave.GameStatSaveGameData
	21, // 11: OakSave.Profile.bank_inventory_category_list:type_name -> OakSave.InventoryCategorySaveData
	8,  // 12: OakSave.Profile.npc_mail_items:type_name -> OakSave.OakMailItem
	9,  // 13: OakSave.Profile.gear_sold_by_friends:type_name -> OakSave.GearSoldByFriendData
	22, // 14: OakSave.Profile.profile_sdu_list:type_name -> OakSave.OakSDUSaveGameData
	10, // 15: OakSave.Profile.unlocked_customizations:type_name -> OakSave.OakCustomizationSaveGameData
	11, // 16: OakSave.Profile.unlocked_inventory_customization_parts:type_name -> OakSave.OakInventoryCustomizationPartInfo
	13, // 17: OakSave.Profile.guardian_rank:type_name -> OakSave.GuardianRankProfileData
	14, // 18: OakSave.Profile.unlocked_crew_quarters_decorations:type_name -> OakSave.CrewQuartersDecorationItemSaveGameData
	15, // 19: OakSave.Profile.unlocked_crew_quarters_rooms:type_name -> OakSave.CrewQuartersRoomItemSaveGameData
	23, // 20: OakSave.Profile.registered_downloadable_entitlements:type_name -> OakSave.RegisteredDownloadableEntitlements
	24, // 21: OakSave.Profile.challenge_data:type_name -> OakSave.ChallengeSaveGameData
	16, // 22: OakSave.Profile.recently_met_players:type_name -> OakSave.RecentlyMetPlayer
	7,  // 23: OakSave.Profile.FriendEncountersEntry.value:type_name -> OakSave.OakFriendEncounterData
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_OakProfile_proto_init() }
func file_OakProfile_proto_init() {
	if File_OakProfile_proto != nil {
		return
	}
	file_OakShared_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_OakProfile_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerInputBinding_Button); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakProfile_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerInputBinding_Axis_Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakProfile_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerInputBinding_Axis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakProfile_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerInputBinding_Category); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakProfile_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerInputBindings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakProfile_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OakProfileLastInventoryFilterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakProfile_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OakProfileMenuTutorialInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakProfile_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OakFriendEncounterData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakProfile_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OakMailItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakProfile_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GearSoldByFriendData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakProfile_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OakCustomizationSaveGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakProfile_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OakInventoryCustomizationPartInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakProfile_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuardianRankRewardSaveGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakProfile_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuardianRankProfileData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakProfile_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrewQuartersDecorationItemSaveGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakProfile_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrewQuartersRoomItemSaveGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakProfile_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecentlyMetPlayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakProfile_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakProfile_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profile_FriendEncountersEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_OakProfile_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_OakProfile_proto_goTypes,
		DependencyIndexes: file_OakProfile_proto_depIdxs,
		MessageInfos:      file_OakProfile_proto_msgTypes,
	}.Build()
	File_OakProfile_proto = out.File
	file_OakProfile_proto_rawDesc = nil
	file_OakProfile_proto_goTypes = nil
	file_OakProfile_proto_depIdxs = nil
}
