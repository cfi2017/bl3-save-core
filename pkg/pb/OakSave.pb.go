// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.20.1
// 	protoc        v3.11.3
// source: OakSave.proto

package pb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type MissionStatusPlayerSaveGameData_MissionState int32

const (
	MissionStatusPlayerSaveGameData_MS_NotStarted MissionStatusPlayerSaveGameData_MissionState = 0
	MissionStatusPlayerSaveGameData_MS_Active     MissionStatusPlayerSaveGameData_MissionState = 1
	MissionStatusPlayerSaveGameData_MS_Complete   MissionStatusPlayerSaveGameData_MissionState = 2
	MissionStatusPlayerSaveGameData_MS_Failed     MissionStatusPlayerSaveGameData_MissionState = 3
	MissionStatusPlayerSaveGameData_MS_Unknown    MissionStatusPlayerSaveGameData_MissionState = 4
)

// Enum value maps for MissionStatusPlayerSaveGameData_MissionState.
var (
	MissionStatusPlayerSaveGameData_MissionState_name = map[int32]string{
		0: "MS_NotStarted",
		1: "MS_Active",
		2: "MS_Complete",
		3: "MS_Failed",
		4: "MS_Unknown",
	}
	MissionStatusPlayerSaveGameData_MissionState_value = map[string]int32{
		"MS_NotStarted": 0,
		"MS_Active":     1,
		"MS_Complete":   2,
		"MS_Failed":     3,
		"MS_Unknown":    4,
	}
)

func (x MissionStatusPlayerSaveGameData_MissionState) Enum() *MissionStatusPlayerSaveGameData_MissionState {
	p := new(MissionStatusPlayerSaveGameData_MissionState)
	*p = x
	return p
}

func (x MissionStatusPlayerSaveGameData_MissionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MissionStatusPlayerSaveGameData_MissionState) Descriptor() protoreflect.EnumDescriptor {
	return file_OakSave_proto_enumTypes[0].Descriptor()
}

func (MissionStatusPlayerSaveGameData_MissionState) Type() protoreflect.EnumType {
	return &file_OakSave_proto_enumTypes[0]
}

func (x MissionStatusPlayerSaveGameData_MissionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MissionStatusPlayerSaveGameData_MissionState.Descriptor instead.
func (MissionStatusPlayerSaveGameData_MissionState) EnumDescriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{11, 0}
}

type PlayerClassSaveGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerClassPath string `protobuf:"bytes,1,opt,name=player_class_path,json=playerClassPath,proto3" json:"player_class_path"`
	DlcPackageId    uint32 `protobuf:"varint,2,opt,name=dlc_package_id,json=dlcPackageId,proto3" json:"dlc_package_id"`
}

func (x *PlayerClassSaveGameData) Reset() {
	*x = PlayerClassSaveGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerClassSaveGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerClassSaveGameData) ProtoMessage() {}

func (x *PlayerClassSaveGameData) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerClassSaveGameData.ProtoReflect.Descriptor instead.
func (*PlayerClassSaveGameData) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{0}
}

func (x *PlayerClassSaveGameData) GetPlayerClassPath() string {
	if x != nil {
		return x.PlayerClassPath
	}
	return ""
}

func (x *PlayerClassSaveGameData) GetDlcPackageId() uint32 {
	if x != nil {
		return x.DlcPackageId
	}
	return 0
}

type ResourcePoolSavegameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount       float32 `protobuf:"fixed32,1,opt,name=amount,proto3" json:"amount"`
	ResourcePath string  `protobuf:"bytes,2,opt,name=resource_path,json=resourcePath,proto3" json:"resource_path"`
}

func (x *ResourcePoolSavegameData) Reset() {
	*x = ResourcePoolSavegameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourcePoolSavegameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourcePoolSavegameData) ProtoMessage() {}

func (x *ResourcePoolSavegameData) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourcePoolSavegameData.ProtoReflect.Descriptor instead.
func (*ResourcePoolSavegameData) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{1}
}

func (x *ResourcePoolSavegameData) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ResourcePoolSavegameData) GetResourcePath() string {
	if x != nil {
		return x.ResourcePath
	}
	return ""
}

type RegionSaveGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameStage      int32  `protobuf:"varint,1,opt,name=game_stage,json=gameStage,proto3" json:"game_stage"`
	PlayThroughIdx int32  `protobuf:"varint,2,opt,name=play_through_idx,json=playThroughIdx,proto3" json:"play_through_idx"`
	RegionPath     string `protobuf:"bytes,3,opt,name=region_path,json=regionPath,proto3" json:"region_path"`
	DlcPackageId   uint32 `protobuf:"varint,4,opt,name=dlc_package_id,json=dlcPackageId,proto3" json:"dlc_package_id"`
}

func (x *RegionSaveGameData) Reset() {
	*x = RegionSaveGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegionSaveGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionSaveGameData) ProtoMessage() {}

func (x *RegionSaveGameData) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionSaveGameData.ProtoReflect.Descriptor instead.
func (*RegionSaveGameData) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{2}
}

func (x *RegionSaveGameData) GetGameStage() int32 {
	if x != nil {
		return x.GameStage
	}
	return 0
}

func (x *RegionSaveGameData) GetPlayThroughIdx() int32 {
	if x != nil {
		return x.PlayThroughIdx
	}
	return 0
}

func (x *RegionSaveGameData) GetRegionPath() string {
	if x != nil {
		return x.RegionPath
	}
	return ""
}

func (x *RegionSaveGameData) GetDlcPackageId() uint32 {
	if x != nil {
		return x.DlcPackageId
	}
	return 0
}

type InventoryBalanceStateInitializationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameStage             int32    `protobuf:"varint,1,opt,name=game_stage,json=gameStage,proto3" json:"game_stage"`
	InventoryData         string   `protobuf:"bytes,2,opt,name=inventory_data,json=inventoryData,proto3" json:"inventory_data"`
	InventoryBalanceData  string   `protobuf:"bytes,3,opt,name=inventory_balance_data,json=inventoryBalanceData,proto3" json:"inventory_balance_data"`
	ManufacturerData      string   `protobuf:"bytes,4,opt,name=manufacturer_data,json=manufacturerData,proto3" json:"manufacturer_data"`
	PartList              []string `protobuf:"bytes,5,rep,name=part_list,json=partList,proto3" json:"part_list"`
	GenericPartList       []string `protobuf:"bytes,6,rep,name=generic_part_list,json=genericPartList,proto3" json:"generic_part_list"`
	AdditionalData        []byte   `protobuf:"bytes,7,opt,name=additional_data,json=additionalData,proto3" json:"additional_data"`
	CustomizationPartList []string `protobuf:"bytes,8,rep,name=customization_part_list,json=customizationPartList,proto3" json:"customization_part_list"`
}

func (x *InventoryBalanceStateInitializationData) Reset() {
	*x = InventoryBalanceStateInitializationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InventoryBalanceStateInitializationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventoryBalanceStateInitializationData) ProtoMessage() {}

func (x *InventoryBalanceStateInitializationData) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventoryBalanceStateInitializationData.ProtoReflect.Descriptor instead.
func (*InventoryBalanceStateInitializationData) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{3}
}

func (x *InventoryBalanceStateInitializationData) GetGameStage() int32 {
	if x != nil {
		return x.GameStage
	}
	return 0
}

func (x *InventoryBalanceStateInitializationData) GetInventoryData() string {
	if x != nil {
		return x.InventoryData
	}
	return ""
}

func (x *InventoryBalanceStateInitializationData) GetInventoryBalanceData() string {
	if x != nil {
		return x.InventoryBalanceData
	}
	return ""
}

func (x *InventoryBalanceStateInitializationData) GetManufacturerData() string {
	if x != nil {
		return x.ManufacturerData
	}
	return ""
}

func (x *InventoryBalanceStateInitializationData) GetPartList() []string {
	if x != nil {
		return x.PartList
	}
	return nil
}

func (x *InventoryBalanceStateInitializationData) GetGenericPartList() []string {
	if x != nil {
		return x.GenericPartList
	}
	return nil
}

func (x *InventoryBalanceStateInitializationData) GetAdditionalData() []byte {
	if x != nil {
		return x.AdditionalData
	}
	return nil
}

func (x *InventoryBalanceStateInitializationData) GetCustomizationPartList() []string {
	if x != nil {
		return x.CustomizationPartList
	}
	return nil
}

type OakInventoryItemSaveGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemSerialNumber    []byte                                   `protobuf:"bytes,1,opt,name=item_serial_number,json=itemSerialNumber,proto3" json:"item_serial_number"`
	PickupOrderIndex    int32                                    `protobuf:"varint,2,opt,name=pickup_order_index,json=pickupOrderIndex,proto3" json:"pickup_order_index"`
	Flags               int32                                    `protobuf:"varint,3,opt,name=flags,proto3" json:"flags"`
	WeaponSkinPath      string                                   `protobuf:"bytes,4,opt,name=weapon_skin_path,json=weaponSkinPath,proto3" json:"weapon_skin_path"`
	DevelopmentSaveData *InventoryBalanceStateInitializationData `protobuf:"bytes,5,opt,name=development_save_data,json=developmentSaveData,proto3" json:"development_save_data"`
}

func (x *OakInventoryItemSaveGameData) Reset() {
	*x = OakInventoryItemSaveGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OakInventoryItemSaveGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OakInventoryItemSaveGameData) ProtoMessage() {}

func (x *OakInventoryItemSaveGameData) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OakInventoryItemSaveGameData.ProtoReflect.Descriptor instead.
func (*OakInventoryItemSaveGameData) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{4}
}

func (x *OakInventoryItemSaveGameData) GetItemSerialNumber() []byte {
	if x != nil {
		return x.ItemSerialNumber
	}
	return nil
}

func (x *OakInventoryItemSaveGameData) GetPickupOrderIndex() int32 {
	if x != nil {
		return x.PickupOrderIndex
	}
	return 0
}

func (x *OakInventoryItemSaveGameData) GetFlags() int32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *OakInventoryItemSaveGameData) GetWeaponSkinPath() string {
	if x != nil {
		return x.WeaponSkinPath
	}
	return ""
}

func (x *OakInventoryItemSaveGameData) GetDevelopmentSaveData() *InventoryBalanceStateInitializationData {
	if x != nil {
		return x.DevelopmentSaveData
	}
	return nil
}

type EquippedInventorySaveGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InventoryListIndex int32  `protobuf:"varint,1,opt,name=inventory_list_index,json=inventoryListIndex,proto3" json:"inventory_list_index"`
	Enabled            bool   `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled"`
	SlotDataPath       string `protobuf:"bytes,3,opt,name=slot_data_path,json=slotDataPath,proto3" json:"slot_data_path"`
	TrinketDataPath    string `protobuf:"bytes,4,opt,name=trinket_data_path,json=trinketDataPath,proto3" json:"trinket_data_path"`
}

func (x *EquippedInventorySaveGameData) Reset() {
	*x = EquippedInventorySaveGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquippedInventorySaveGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquippedInventorySaveGameData) ProtoMessage() {}

func (x *EquippedInventorySaveGameData) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquippedInventorySaveGameData.ProtoReflect.Descriptor instead.
func (*EquippedInventorySaveGameData) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{5}
}

func (x *EquippedInventorySaveGameData) GetInventoryListIndex() int32 {
	if x != nil {
		return x.InventoryListIndex
	}
	return 0
}

func (x *EquippedInventorySaveGameData) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *EquippedInventorySaveGameData) GetSlotDataPath() string {
	if x != nil {
		return x.SlotDataPath
	}
	return ""
}

func (x *EquippedInventorySaveGameData) GetTrinketDataPath() string {
	if x != nil {
		return x.TrinketDataPath
	}
	return ""
}

type OakAbilityTreeItemSaveGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemAssetPath  string `protobuf:"bytes,1,opt,name=item_asset_path,json=itemAssetPath,proto3" json:"item_asset_path"`
	Points         int32  `protobuf:"varint,2,opt,name=points,proto3" json:"points"`
	MaxPoints      int32  `protobuf:"varint,3,opt,name=max_points,json=maxPoints,proto3" json:"max_points"`
	TreeIdentifier int32  `protobuf:"varint,4,opt,name=tree_identifier,json=treeIdentifier,proto3" json:"tree_identifier"`
}

func (x *OakAbilityTreeItemSaveGameData) Reset() {
	*x = OakAbilityTreeItemSaveGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OakAbilityTreeItemSaveGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OakAbilityTreeItemSaveGameData) ProtoMessage() {}

func (x *OakAbilityTreeItemSaveGameData) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OakAbilityTreeItemSaveGameData.ProtoReflect.Descriptor instead.
func (*OakAbilityTreeItemSaveGameData) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{6}
}

func (x *OakAbilityTreeItemSaveGameData) GetItemAssetPath() string {
	if x != nil {
		return x.ItemAssetPath
	}
	return ""
}

func (x *OakAbilityTreeItemSaveGameData) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *OakAbilityTreeItemSaveGameData) GetMaxPoints() int32 {
	if x != nil {
		return x.MaxPoints
	}
	return 0
}

func (x *OakAbilityTreeItemSaveGameData) GetTreeIdentifier() int32 {
	if x != nil {
		return x.TreeIdentifier
	}
	return 0
}

type OakAbilitySlotSaveGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbilityClassPath string `protobuf:"bytes,1,opt,name=ability_class_path,json=abilityClassPath,proto3" json:"ability_class_path"`
	SlotAssetPath    string `protobuf:"bytes,2,opt,name=slot_asset_path,json=slotAssetPath,proto3" json:"slot_asset_path"`
}

func (x *OakAbilitySlotSaveGameData) Reset() {
	*x = OakAbilitySlotSaveGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OakAbilitySlotSaveGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OakAbilitySlotSaveGameData) ProtoMessage() {}

func (x *OakAbilitySlotSaveGameData) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OakAbilitySlotSaveGameData.ProtoReflect.Descriptor instead.
func (*OakAbilitySlotSaveGameData) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{7}
}

func (x *OakAbilitySlotSaveGameData) GetAbilityClassPath() string {
	if x != nil {
		return x.AbilityClassPath
	}
	return ""
}

func (x *OakAbilitySlotSaveGameData) GetSlotAssetPath() string {
	if x != nil {
		return x.SlotAssetPath
	}
	return ""
}

type OakActionAbilityAugmentSaveGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionAbilityClassPath string `protobuf:"bytes,1,opt,name=action_ability_class_path,json=actionAbilityClassPath,proto3" json:"action_ability_class_path"`
	SlotAssetPath          string `protobuf:"bytes,2,opt,name=slot_asset_path,json=slotAssetPath,proto3" json:"slot_asset_path"`
	AugmentAssetPath       string `protobuf:"bytes,3,opt,name=augment_asset_path,json=augmentAssetPath,proto3" json:"augment_asset_path"`
}

func (x *OakActionAbilityAugmentSaveGameData) Reset() {
	*x = OakActionAbilityAugmentSaveGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OakActionAbilityAugmentSaveGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OakActionAbilityAugmentSaveGameData) ProtoMessage() {}

func (x *OakActionAbilityAugmentSaveGameData) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OakActionAbilityAugmentSaveGameData.ProtoReflect.Descriptor instead.
func (*OakActionAbilityAugmentSaveGameData) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{8}
}

func (x *OakActionAbilityAugmentSaveGameData) GetActionAbilityClassPath() string {
	if x != nil {
		return x.ActionAbilityClassPath
	}
	return ""
}

func (x *OakActionAbilityAugmentSaveGameData) GetSlotAssetPath() string {
	if x != nil {
		return x.SlotAssetPath
	}
	return ""
}

func (x *OakActionAbilityAugmentSaveGameData) GetAugmentAssetPath() string {
	if x != nil {
		return x.AugmentAssetPath
	}
	return ""
}

type OakActionAbilityAugmentConfigurationSaveGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbilityClassPath string `protobuf:"bytes,1,opt,name=ability_class_path,json=abilityClassPath,proto3" json:"ability_class_path"`
	AugmentAssetPath string `protobuf:"bytes,2,opt,name=augment_asset_path,json=augmentAssetPath,proto3" json:"augment_asset_path"`
	ModSlotAssetPath string `protobuf:"bytes,3,opt,name=mod_slot_asset_path,json=modSlotAssetPath,proto3" json:"mod_slot_asset_path"`
	ModAssetPath     string `protobuf:"bytes,4,opt,name=mod_asset_path,json=modAssetPath,proto3" json:"mod_asset_path"`
}

func (x *OakActionAbilityAugmentConfigurationSaveGameData) Reset() {
	*x = OakActionAbilityAugmentConfigurationSaveGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OakActionAbilityAugmentConfigurationSaveGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OakActionAbilityAugmentConfigurationSaveGameData) ProtoMessage() {}

func (x *OakActionAbilityAugmentConfigurationSaveGameData) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OakActionAbilityAugmentConfigurationSaveGameData.ProtoReflect.Descriptor instead.
func (*OakActionAbilityAugmentConfigurationSaveGameData) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{9}
}

func (x *OakActionAbilityAugmentConfigurationSaveGameData) GetAbilityClassPath() string {
	if x != nil {
		return x.AbilityClassPath
	}
	return ""
}

func (x *OakActionAbilityAugmentConfigurationSaveGameData) GetAugmentAssetPath() string {
	if x != nil {
		return x.AugmentAssetPath
	}
	return ""
}

func (x *OakActionAbilityAugmentConfigurationSaveGameData) GetModSlotAssetPath() string {
	if x != nil {
		return x.ModSlotAssetPath
	}
	return ""
}

func (x *OakActionAbilityAugmentConfigurationSaveGameData) GetModAssetPath() string {
	if x != nil {
		return x.ModAssetPath
	}
	return ""
}

type OakPlayerAbilitySaveGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbilityPoints            int32                                               `protobuf:"varint,1,opt,name=ability_points,json=abilityPoints,proto3" json:"ability_points"`
	TreeItemList             []*OakAbilityTreeItemSaveGameData                   `protobuf:"bytes,2,rep,name=tree_item_list,json=treeItemList,proto3" json:"tree_item_list"`
	AbilitySlotList          []*OakAbilitySlotSaveGameData                       `protobuf:"bytes,3,rep,name=ability_slot_list,json=abilitySlotList,proto3" json:"ability_slot_list"`
	AugmentSlotList          []*OakActionAbilityAugmentSaveGameData              `protobuf:"bytes,4,rep,name=augment_slot_list,json=augmentSlotList,proto3" json:"augment_slot_list"`
	AugmentConfigurationList []*OakActionAbilityAugmentConfigurationSaveGameData `protobuf:"bytes,5,rep,name=augment_configuration_list,json=augmentConfigurationList,proto3" json:"augment_configuration_list"`
	TreeGrade                int32                                               `protobuf:"varint,6,opt,name=tree_grade,json=treeGrade,proto3" json:"tree_grade"`
}

func (x *OakPlayerAbilitySaveGameData) Reset() {
	*x = OakPlayerAbilitySaveGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OakPlayerAbilitySaveGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OakPlayerAbilitySaveGameData) ProtoMessage() {}

func (x *OakPlayerAbilitySaveGameData) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OakPlayerAbilitySaveGameData.ProtoReflect.Descriptor instead.
func (*OakPlayerAbilitySaveGameData) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{10}
}

func (x *OakPlayerAbilitySaveGameData) GetAbilityPoints() int32 {
	if x != nil {
		return x.AbilityPoints
	}
	return 0
}

func (x *OakPlayerAbilitySaveGameData) GetTreeItemList() []*OakAbilityTreeItemSaveGameData {
	if x != nil {
		return x.TreeItemList
	}
	return nil
}

func (x *OakPlayerAbilitySaveGameData) GetAbilitySlotList() []*OakAbilitySlotSaveGameData {
	if x != nil {
		return x.AbilitySlotList
	}
	return nil
}

func (x *OakPlayerAbilitySaveGameData) GetAugmentSlotList() []*OakActionAbilityAugmentSaveGameData {
	if x != nil {
		return x.AugmentSlotList
	}
	return nil
}

func (x *OakPlayerAbilitySaveGameData) GetAugmentConfigurationList() []*OakActionAbilityAugmentConfigurationSaveGameData {
	if x != nil {
		return x.AugmentConfigurationList
	}
	return nil
}

func (x *OakPlayerAbilitySaveGameData) GetTreeGrade() int32 {
	if x != nil {
		return x.TreeGrade
	}
	return 0
}

type MissionStatusPlayerSaveGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status                 MissionStatusPlayerSaveGameData_MissionState `protobuf:"varint,1,opt,name=status,proto3,enum=OakSave.MissionStatusPlayerSaveGameData_MissionState" json:"status"`
	HasBeenViewedInLog     bool                                         `protobuf:"varint,2,opt,name=has_been_viewed_in_log,json=hasBeenViewedInLog,proto3" json:"has_been_viewed_in_log"`
	ObjectivesProgress     []int32                                      `protobuf:"varint,3,rep,packed,name=objectives_progress,json=objectivesProgress,proto3" json:"objectives_progress"`
	MissionClassPath       string                                       `protobuf:"bytes,4,opt,name=mission_class_path,json=missionClassPath,proto3" json:"mission_class_path"`
	ActiveObjectiveSetPath string                                       `protobuf:"bytes,5,opt,name=active_objective_set_path,json=activeObjectiveSetPath,proto3" json:"active_objective_set_path"`
	DlcPackageId           uint32                                       `protobuf:"varint,6,opt,name=dlc_package_id,json=dlcPackageId,proto3" json:"dlc_package_id"`
	KickoffPlayed          bool                                         `protobuf:"varint,7,opt,name=kickoff_played,json=kickoffPlayed,proto3" json:"kickoff_played"`
	LeagueInstance         uint32                                       `protobuf:"varint,8,opt,name=league_instance,json=leagueInstance,proto3" json:"league_instance"`
}

func (x *MissionStatusPlayerSaveGameData) Reset() {
	*x = MissionStatusPlayerSaveGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionStatusPlayerSaveGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionStatusPlayerSaveGameData) ProtoMessage() {}

func (x *MissionStatusPlayerSaveGameData) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionStatusPlayerSaveGameData.ProtoReflect.Descriptor instead.
func (*MissionStatusPlayerSaveGameData) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{11}
}

func (x *MissionStatusPlayerSaveGameData) GetStatus() MissionStatusPlayerSaveGameData_MissionState {
	if x != nil {
		return x.Status
	}
	return MissionStatusPlayerSaveGameData_MS_NotStarted
}

func (x *MissionStatusPlayerSaveGameData) GetHasBeenViewedInLog() bool {
	if x != nil {
		return x.HasBeenViewedInLog
	}
	return false
}

func (x *MissionStatusPlayerSaveGameData) GetObjectivesProgress() []int32 {
	if x != nil {
		return x.ObjectivesProgress
	}
	return nil
}

func (x *MissionStatusPlayerSaveGameData) GetMissionClassPath() string {
	if x != nil {
		return x.MissionClassPath
	}
	return ""
}

func (x *MissionStatusPlayerSaveGameData) GetActiveObjectiveSetPath() string {
	if x != nil {
		return x.ActiveObjectiveSetPath
	}
	return ""
}

func (x *MissionStatusPlayerSaveGameData) GetDlcPackageId() uint32 {
	if x != nil {
		return x.DlcPackageId
	}
	return 0
}

func (x *MissionStatusPlayerSaveGameData) GetKickoffPlayed() bool {
	if x != nil {
		return x.KickoffPlayed
	}
	return false
}

func (x *MissionStatusPlayerSaveGameData) GetLeagueInstance() uint32 {
	if x != nil {
		return x.LeagueInstance
	}
	return 0
}

type MissionPlaythroughSaveGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MissionList             []*MissionStatusPlayerSaveGameData `protobuf:"bytes,1,rep,name=mission_list,json=missionList,proto3" json:"mission_list"`
	TrackedMissionClassPath string                             `protobuf:"bytes,2,opt,name=tracked_mission_class_path,json=trackedMissionClassPath,proto3" json:"tracked_mission_class_path"`
}

func (x *MissionPlaythroughSaveGameData) Reset() {
	*x = MissionPlaythroughSaveGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionPlaythroughSaveGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionPlaythroughSaveGameData) ProtoMessage() {}

func (x *MissionPlaythroughSaveGameData) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionPlaythroughSaveGameData.ProtoReflect.Descriptor instead.
func (*MissionPlaythroughSaveGameData) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{12}
}

func (x *MissionPlaythroughSaveGameData) GetMissionList() []*MissionStatusPlayerSaveGameData {
	if x != nil {
		return x.MissionList
	}
	return nil
}

func (x *MissionPlaythroughSaveGameData) GetTrackedMissionClassPath() string {
	if x != nil {
		return x.TrackedMissionClassPath
	}
	return ""
}

type ActiveFastTravelSaveData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActiveTravelStationName string `protobuf:"bytes,1,opt,name=active_travel_station_name,json=activeTravelStationName,proto3" json:"active_travel_station_name"`
	Blacklisted             bool   `protobuf:"varint,2,opt,name=blacklisted,proto3" json:"blacklisted"`
}

func (x *ActiveFastTravelSaveData) Reset() {
	*x = ActiveFastTravelSaveData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveFastTravelSaveData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveFastTravelSaveData) ProtoMessage() {}

func (x *ActiveFastTravelSaveData) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveFastTravelSaveData.ProtoReflect.Descriptor instead.
func (*ActiveFastTravelSaveData) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{13}
}

func (x *ActiveFastTravelSaveData) GetActiveTravelStationName() string {
	if x != nil {
		return x.ActiveTravelStationName
	}
	return ""
}

func (x *ActiveFastTravelSaveData) GetBlacklisted() bool {
	if x != nil {
		return x.Blacklisted
	}
	return false
}

type PlaythroughActiveFastTravelSaveData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActiveTravelStations []*ActiveFastTravelSaveData `protobuf:"bytes,1,rep,name=active_travel_stations,json=activeTravelStations,proto3" json:"active_travel_stations"`
}

func (x *PlaythroughActiveFastTravelSaveData) Reset() {
	*x = PlaythroughActiveFastTravelSaveData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaythroughActiveFastTravelSaveData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaythroughActiveFastTravelSaveData) ProtoMessage() {}

func (x *PlaythroughActiveFastTravelSaveData) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaythroughActiveFastTravelSaveData.ProtoReflect.Descriptor instead.
func (*PlaythroughActiveFastTravelSaveData) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{14}
}

func (x *PlaythroughActiveFastTravelSaveData) GetActiveTravelStations() []*ActiveFastTravelSaveData {
	if x != nil {
		return x.ActiveTravelStations
	}
	return nil
}

type DiscoveredAreaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiscoveredAreaName     string `protobuf:"bytes,1,opt,name=discovered_area_name,json=discoveredAreaName,proto3" json:"discovered_area_name"`
	DiscoveredPlaythroughs uint32 `protobuf:"varint,2,opt,name=discovered_playthroughs,json=discoveredPlaythroughs,proto3" json:"discovered_playthroughs"`
}

func (x *DiscoveredAreaInfo) Reset() {
	*x = DiscoveredAreaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoveredAreaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoveredAreaInfo) ProtoMessage() {}

func (x *DiscoveredAreaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoveredAreaInfo.ProtoReflect.Descriptor instead.
func (*DiscoveredAreaInfo) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{15}
}

func (x *DiscoveredAreaInfo) GetDiscoveredAreaName() string {
	if x != nil {
		return x.DiscoveredAreaName
	}
	return ""
}

func (x *DiscoveredAreaInfo) GetDiscoveredPlaythroughs() uint32 {
	if x != nil {
		return x.DiscoveredPlaythroughs
	}
	return 0
}

type DiscoveredLevelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiscoveredLevelName    string                `protobuf:"bytes,1,opt,name=discovered_level_name,json=discoveredLevelName,proto3" json:"discovered_level_name"`
	DiscoveredPlaythroughs uint32                `protobuf:"varint,3,opt,name=discovered_playthroughs,json=discoveredPlaythroughs,proto3" json:"discovered_playthroughs"`
	DiscoveredAreaInfo     []*DiscoveredAreaInfo `protobuf:"bytes,4,rep,name=discovered_area_info,json=discoveredAreaInfo,proto3" json:"discovered_area_info"`
}

func (x *DiscoveredLevelInfo) Reset() {
	*x = DiscoveredLevelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoveredLevelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoveredLevelInfo) ProtoMessage() {}

func (x *DiscoveredLevelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoveredLevelInfo.ProtoReflect.Descriptor instead.
func (*DiscoveredLevelInfo) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{16}
}

func (x *DiscoveredLevelInfo) GetDiscoveredLevelName() string {
	if x != nil {
		return x.DiscoveredLevelName
	}
	return ""
}

func (x *DiscoveredLevelInfo) GetDiscoveredPlaythroughs() uint32 {
	if x != nil {
		return x.DiscoveredPlaythroughs
	}
	return 0
}

func (x *DiscoveredLevelInfo) GetDiscoveredAreaInfo() []*DiscoveredAreaInfo {
	if x != nil {
		return x.DiscoveredAreaInfo
	}
	return nil
}

type DiscoveredPlanetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiscoveredPlanet string `protobuf:"bytes,1,opt,name=discovered_planet,json=discoveredPlanet,proto3" json:"discovered_planet"`
	IsNewPlanet      bool   `protobuf:"varint,2,opt,name=is_new_planet,json=isNewPlanet,proto3" json:"is_new_planet"`
}

func (x *DiscoveredPlanetInfo) Reset() {
	*x = DiscoveredPlanetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoveredPlanetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoveredPlanetInfo) ProtoMessage() {}

func (x *DiscoveredPlanetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoveredPlanetInfo.ProtoReflect.Descriptor instead.
func (*DiscoveredPlanetInfo) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{17}
}

func (x *DiscoveredPlanetInfo) GetDiscoveredPlanet() string {
	if x != nil {
		return x.DiscoveredPlanet
	}
	return ""
}

func (x *DiscoveredPlanetInfo) GetIsNewPlanet() bool {
	if x != nil {
		return x.IsNewPlanet
	}
	return false
}

type DiscoverySaveData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiscoveredLevelInfo []*DiscoveredLevelInfo `protobuf:"bytes,1,rep,name=discovered_level_info,json=discoveredLevelInfo,proto3" json:"discovered_level_info"`
}

func (x *DiscoverySaveData) Reset() {
	*x = DiscoverySaveData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoverySaveData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoverySaveData) ProtoMessage() {}

func (x *DiscoverySaveData) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoverySaveData.ProtoReflect.Descriptor instead.
func (*DiscoverySaveData) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{18}
}

func (x *DiscoverySaveData) GetDiscoveredLevelInfo() []*DiscoveredLevelInfo {
	if x != nil {
		return x.DiscoveredLevelInfo
	}
	return nil
}

type VehicleUnlockedSaveGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetPath    string `protobuf:"bytes,1,opt,name=asset_path,json=assetPath,proto3" json:"asset_path"`
	JustUnlocked bool   `protobuf:"varint,2,opt,name=just_unlocked,json=justUnlocked,proto3" json:"just_unlocked"`
}

func (x *VehicleUnlockedSaveGameData) Reset() {
	*x = VehicleUnlockedSaveGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleUnlockedSaveGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleUnlockedSaveGameData) ProtoMessage() {}

func (x *VehicleUnlockedSaveGameData) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleUnlockedSaveGameData.ProtoReflect.Descriptor instead.
func (*VehicleUnlockedSaveGameData) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{19}
}

func (x *VehicleUnlockedSaveGameData) GetAssetPath() string {
	if x != nil {
		return x.AssetPath
	}
	return ""
}

func (x *VehicleUnlockedSaveGameData) GetJustUnlocked() bool {
	if x != nil {
		return x.JustUnlocked
	}
	return false
}

type OakCARMenuVehicleConfigSaveData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoadoutSaveName        string `protobuf:"bytes,1,opt,name=loadout_save_name,json=loadoutSaveName,proto3" json:"loadout_save_name"`
	BodyAssetPath          string `protobuf:"bytes,2,opt,name=body_asset_path,json=bodyAssetPath,proto3" json:"body_asset_path"`
	WheelAssetPath         string `protobuf:"bytes,3,opt,name=wheel_asset_path,json=wheelAssetPath,proto3" json:"wheel_asset_path"`
	ArmorAssetPath         string `protobuf:"bytes,4,opt,name=armor_asset_path,json=armorAssetPath,proto3" json:"armor_asset_path"`
	CoreModAssetPath       string `protobuf:"bytes,5,opt,name=core_mod_asset_path,json=coreModAssetPath,proto3" json:"core_mod_asset_path"`
	GunnerWeaponAssetPath  string `protobuf:"bytes,6,opt,name=gunner_weapon_asset_path,json=gunnerWeaponAssetPath,proto3" json:"gunner_weapon_asset_path"`
	DriverWeaponAssetPath  string `protobuf:"bytes,7,opt,name=driver_weapon_asset_path,json=driverWeaponAssetPath,proto3" json:"driver_weapon_asset_path"`
	OrnamentAssetPath      string `protobuf:"bytes,8,opt,name=ornament_asset_path,json=ornamentAssetPath,proto3" json:"ornament_asset_path"`
	MaterialDecalAssetPath string `protobuf:"bytes,9,opt,name=material_decal_asset_path,json=materialDecalAssetPath,proto3" json:"material_decal_asset_path"`
	MaterialAssetPath      string `protobuf:"bytes,10,opt,name=material_asset_path,json=materialAssetPath,proto3" json:"material_asset_path"`
	ColorIndex_1           int32  `protobuf:"varint,11,opt,name=color_index_1,json=colorIndex1,proto3" json:"color_index_1"`
	ColorIndex_2           int32  `protobuf:"varint,12,opt,name=color_index_2,json=colorIndex2,proto3" json:"color_index_2"`
	ColorIndex_3           int32  `protobuf:"varint,13,opt,name=color_index_3,json=colorIndex3,proto3" json:"color_index_3"`
}

func (x *OakCARMenuVehicleConfigSaveData) Reset() {
	*x = OakCARMenuVehicleConfigSaveData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OakCARMenuVehicleConfigSaveData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OakCARMenuVehicleConfigSaveData) ProtoMessage() {}

func (x *OakCARMenuVehicleConfigSaveData) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OakCARMenuVehicleConfigSaveData.ProtoReflect.Descriptor instead.
func (*OakCARMenuVehicleConfigSaveData) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{20}
}

func (x *OakCARMenuVehicleConfigSaveData) GetLoadoutSaveName() string {
	if x != nil {
		return x.LoadoutSaveName
	}
	return ""
}

func (x *OakCARMenuVehicleConfigSaveData) GetBodyAssetPath() string {
	if x != nil {
		return x.BodyAssetPath
	}
	return ""
}

func (x *OakCARMenuVehicleConfigSaveData) GetWheelAssetPath() string {
	if x != nil {
		return x.WheelAssetPath
	}
	return ""
}

func (x *OakCARMenuVehicleConfigSaveData) GetArmorAssetPath() string {
	if x != nil {
		return x.ArmorAssetPath
	}
	return ""
}

func (x *OakCARMenuVehicleConfigSaveData) GetCoreModAssetPath() string {
	if x != nil {
		return x.CoreModAssetPath
	}
	return ""
}

func (x *OakCARMenuVehicleConfigSaveData) GetGunnerWeaponAssetPath() string {
	if x != nil {
		return x.GunnerWeaponAssetPath
	}
	return ""
}

func (x *OakCARMenuVehicleConfigSaveData) GetDriverWeaponAssetPath() string {
	if x != nil {
		return x.DriverWeaponAssetPath
	}
	return ""
}

func (x *OakCARMenuVehicleConfigSaveData) GetOrnamentAssetPath() string {
	if x != nil {
		return x.OrnamentAssetPath
	}
	return ""
}

func (x *OakCARMenuVehicleConfigSaveData) GetMaterialDecalAssetPath() string {
	if x != nil {
		return x.MaterialDecalAssetPath
	}
	return ""
}

func (x *OakCARMenuVehicleConfigSaveData) GetMaterialAssetPath() string {
	if x != nil {
		return x.MaterialAssetPath
	}
	return ""
}

func (x *OakCARMenuVehicleConfigSaveData) GetColorIndex_1() int32 {
	if x != nil {
		return x.ColorIndex_1
	}
	return 0
}

func (x *OakCARMenuVehicleConfigSaveData) GetColorIndex_2() int32 {
	if x != nil {
		return x.ColorIndex_2
	}
	return 0
}

func (x *OakCARMenuVehicleConfigSaveData) GetColorIndex_3() int32 {
	if x != nil {
		return x.ColorIndex_3
	}
	return 0
}

type CustomPlayerColorSaveGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColorParameter       string `protobuf:"bytes,1,opt,name=color_parameter,json=colorParameter,proto3" json:"color_parameter"`
	AppliedColor         *Vec3  `protobuf:"bytes,2,opt,name=applied_color,json=appliedColor,proto3" json:"applied_color"`
	SplitColor           *Vec3  `protobuf:"bytes,3,opt,name=split_color,json=splitColor,proto3" json:"split_color"`
	UseDefaultColor      bool   `protobuf:"varint,4,opt,name=use_default_color,json=useDefaultColor,proto3" json:"use_default_color"`
	UseDefaultSplitColor bool   `protobuf:"varint,5,opt,name=use_default_split_color,json=useDefaultSplitColor,proto3" json:"use_default_split_color"`
}

func (x *CustomPlayerColorSaveGameData) Reset() {
	*x = CustomPlayerColorSaveGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomPlayerColorSaveGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomPlayerColorSaveGameData) ProtoMessage() {}

func (x *CustomPlayerColorSaveGameData) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomPlayerColorSaveGameData.ProtoReflect.Descriptor instead.
func (*CustomPlayerColorSaveGameData) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{21}
}

func (x *CustomPlayerColorSaveGameData) GetColorParameter() string {
	if x != nil {
		return x.ColorParameter
	}
	return ""
}

func (x *CustomPlayerColorSaveGameData) GetAppliedColor() *Vec3 {
	if x != nil {
		return x.AppliedColor
	}
	return nil
}

func (x *CustomPlayerColorSaveGameData) GetSplitColor() *Vec3 {
	if x != nil {
		return x.SplitColor
	}
	return nil
}

func (x *CustomPlayerColorSaveGameData) GetUseDefaultColor() bool {
	if x != nil {
		return x.UseDefaultColor
	}
	return false
}

func (x *CustomPlayerColorSaveGameData) GetUseDefaultSplitColor() bool {
	if x != nil {
		return x.UseDefaultSplitColor
	}
	return false
}

type GuardianRankSaveGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuardianRank       int32 `protobuf:"varint,1,opt,name=guardian_rank,json=guardianRank,proto3" json:"guardian_rank"`
	GuardianExperience int32 `protobuf:"varint,2,opt,name=guardian_experience,json=guardianExperience,proto3" json:"guardian_experience"`
}

func (x *GuardianRankSaveGameData) Reset() {
	*x = GuardianRankSaveGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuardianRankSaveGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuardianRankSaveGameData) ProtoMessage() {}

func (x *GuardianRankSaveGameData) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuardianRankSaveGameData.ProtoReflect.Descriptor instead.
func (*GuardianRankSaveGameData) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{22}
}

func (x *GuardianRankSaveGameData) GetGuardianRank() int32 {
	if x != nil {
		return x.GuardianRank
	}
	return 0
}

func (x *GuardianRankSaveGameData) GetGuardianExperience() int32 {
	if x != nil {
		return x.GuardianExperience
	}
	return 0
}

type GuardianRankRewardCharacterSaveGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumTokens      int32  `protobuf:"varint,1,opt,name=num_tokens,json=numTokens,proto3" json:"num_tokens"`
	IsEnabled      bool   `protobuf:"varint,2,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled"`
	RewardDataPath string `protobuf:"bytes,3,opt,name=reward_data_path,json=rewardDataPath,proto3" json:"reward_data_path"`
}

func (x *GuardianRankRewardCharacterSaveGameData) Reset() {
	*x = GuardianRankRewardCharacterSaveGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuardianRankRewardCharacterSaveGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuardianRankRewardCharacterSaveGameData) ProtoMessage() {}

func (x *GuardianRankRewardCharacterSaveGameData) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuardianRankRewardCharacterSaveGameData.ProtoReflect.Descriptor instead.
func (*GuardianRankRewardCharacterSaveGameData) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{23}
}

func (x *GuardianRankRewardCharacterSaveGameData) GetNumTokens() int32 {
	if x != nil {
		return x.NumTokens
	}
	return 0
}

func (x *GuardianRankRewardCharacterSaveGameData) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *GuardianRankRewardCharacterSaveGameData) GetRewardDataPath() string {
	if x != nil {
		return x.RewardDataPath
	}
	return ""
}

type GuardianRankPerkCharacterSaveGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsEnabled    bool   `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled"`
	PerkDataPath string `protobuf:"bytes,2,opt,name=perk_data_path,json=perkDataPath,proto3" json:"perk_data_path"`
}

func (x *GuardianRankPerkCharacterSaveGameData) Reset() {
	*x = GuardianRankPerkCharacterSaveGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuardianRankPerkCharacterSaveGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuardianRankPerkCharacterSaveGameData) ProtoMessage() {}

func (x *GuardianRankPerkCharacterSaveGameData) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuardianRankPerkCharacterSaveGameData.ProtoReflect.Descriptor instead.
func (*GuardianRankPerkCharacterSaveGameData) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{24}
}

func (x *GuardianRankPerkCharacterSaveGameData) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *GuardianRankPerkCharacterSaveGameData) GetPerkDataPath() string {
	if x != nil {
		return x.PerkDataPath
	}
	return ""
}

type GuardianRankCharacterSaveGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuardianAvailableTokens  int32                                      `protobuf:"varint,1,opt,name=guardian_available_tokens,json=guardianAvailableTokens,proto3" json:"guardian_available_tokens"`
	GuardianRank             int32                                      `protobuf:"varint,2,opt,name=guardian_rank,json=guardianRank,proto3" json:"guardian_rank"`
	GuardianExperience       int32                                      `protobuf:"varint,3,opt,name=guardian_experience,json=guardianExperience,proto3" json:"guardian_experience"`
	RankRewards              []*GuardianRankRewardCharacterSaveGameData `protobuf:"bytes,4,rep,name=rank_rewards,json=rankRewards,proto3" json:"rank_rewards"`
	RankPerks                []*GuardianRankPerkCharacterSaveGameData   `protobuf:"bytes,5,rep,name=rank_perks,json=rankPerks,proto3" json:"rank_perks"`
	GuardianRewardRandomSeed int32                                      `protobuf:"varint,6,opt,name=guardian_reward_random_seed,json=guardianRewardRandomSeed,proto3" json:"guardian_reward_random_seed"`
	NewGuardianExperience    int64                                      `protobuf:"varint,7,opt,name=new_guardian_experience,json=newGuardianExperience,proto3" json:"new_guardian_experience"`
	IsRankSystemEnabled      bool                                       `protobuf:"varint,8,opt,name=is_rank_system_enabled,json=isRankSystemEnabled,proto3" json:"is_rank_system_enabled"`
}

func (x *GuardianRankCharacterSaveGameData) Reset() {
	*x = GuardianRankCharacterSaveGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuardianRankCharacterSaveGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuardianRankCharacterSaveGameData) ProtoMessage() {}

func (x *GuardianRankCharacterSaveGameData) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuardianRankCharacterSaveGameData.ProtoReflect.Descriptor instead.
func (*GuardianRankCharacterSaveGameData) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{25}
}

func (x *GuardianRankCharacterSaveGameData) GetGuardianAvailableTokens() int32 {
	if x != nil {
		return x.GuardianAvailableTokens
	}
	return 0
}

func (x *GuardianRankCharacterSaveGameData) GetGuardianRank() int32 {
	if x != nil {
		return x.GuardianRank
	}
	return 0
}

func (x *GuardianRankCharacterSaveGameData) GetGuardianExperience() int32 {
	if x != nil {
		return x.GuardianExperience
	}
	return 0
}

func (x *GuardianRankCharacterSaveGameData) GetRankRewards() []*GuardianRankRewardCharacterSaveGameData {
	if x != nil {
		return x.RankRewards
	}
	return nil
}

func (x *GuardianRankCharacterSaveGameData) GetRankPerks() []*GuardianRankPerkCharacterSaveGameData {
	if x != nil {
		return x.RankPerks
	}
	return nil
}

func (x *GuardianRankCharacterSaveGameData) GetGuardianRewardRandomSeed() int32 {
	if x != nil {
		return x.GuardianRewardRandomSeed
	}
	return 0
}

func (x *GuardianRankCharacterSaveGameData) GetNewGuardianExperience() int64 {
	if x != nil {
		return x.NewGuardianExperience
	}
	return 0
}

func (x *GuardianRankCharacterSaveGameData) GetIsRankSystemEnabled() bool {
	if x != nil {
		return x.IsRankSystemEnabled
	}
	return false
}

type CrewQuartersDecorationSaveData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DecorationIndex    int32  `protobuf:"varint,1,opt,name=decoration_index,json=decorationIndex,proto3" json:"decoration_index"`
	DecorationDataPath string `protobuf:"bytes,2,opt,name=decoration_data_path,json=decorationDataPath,proto3" json:"decoration_data_path"`
}

func (x *CrewQuartersDecorationSaveData) Reset() {
	*x = CrewQuartersDecorationSaveData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrewQuartersDecorationSaveData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrewQuartersDecorationSaveData) ProtoMessage() {}

func (x *CrewQuartersDecorationSaveData) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrewQuartersDecorationSaveData.ProtoReflect.Descriptor instead.
func (*CrewQuartersDecorationSaveData) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{26}
}

func (x *CrewQuartersDecorationSaveData) GetDecorationIndex() int32 {
	if x != nil {
		return x.DecorationIndex
	}
	return 0
}

func (x *CrewQuartersDecorationSaveData) GetDecorationDataPath() string {
	if x != nil {
		return x.DecorationDataPath
	}
	return ""
}

type CrewQuartersSaveData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreferredRoomAssignment int32                             `protobuf:"varint,1,opt,name=preferred_room_assignment,json=preferredRoomAssignment,proto3" json:"preferred_room_assignment"`
	Decorations             []*CrewQuartersDecorationSaveData `protobuf:"bytes,2,rep,name=decorations,proto3" json:"decorations"`
	RoomDataPath            string                            `protobuf:"bytes,3,opt,name=room_data_path,json=roomDataPath,proto3" json:"room_data_path"`
}

func (x *CrewQuartersSaveData) Reset() {
	*x = CrewQuartersSaveData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrewQuartersSaveData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrewQuartersSaveData) ProtoMessage() {}

func (x *CrewQuartersSaveData) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrewQuartersSaveData.ProtoReflect.Descriptor instead.
func (*CrewQuartersSaveData) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{27}
}

func (x *CrewQuartersSaveData) GetPreferredRoomAssignment() int32 {
	if x != nil {
		return x.PreferredRoomAssignment
	}
	return 0
}

func (x *CrewQuartersSaveData) GetDecorations() []*CrewQuartersDecorationSaveData {
	if x != nil {
		return x.Decorations
	}
	return nil
}

func (x *CrewQuartersSaveData) GetRoomDataPath() string {
	if x != nil {
		return x.RoomDataPath
	}
	return ""
}

type CrewQuartersGunRackItemSaveData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedSerialNumber []byte                                   `protobuf:"bytes,1,opt,name=encrypted_serial_number,json=encryptedSerialNumber,proto3" json:"encrypted_serial_number"`
	SlotAssetPath         string                                   `protobuf:"bytes,2,opt,name=slot_asset_path,json=slotAssetPath,proto3" json:"slot_asset_path"`
	DevelopmentSaveData   *InventoryBalanceStateInitializationData `protobuf:"bytes,3,opt,name=development_save_data,json=developmentSaveData,proto3" json:"development_save_data"`
}

func (x *CrewQuartersGunRackItemSaveData) Reset() {
	*x = CrewQuartersGunRackItemSaveData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrewQuartersGunRackItemSaveData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrewQuartersGunRackItemSaveData) ProtoMessage() {}

func (x *CrewQuartersGunRackItemSaveData) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrewQuartersGunRackItemSaveData.ProtoReflect.Descriptor instead.
func (*CrewQuartersGunRackItemSaveData) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{28}
}

func (x *CrewQuartersGunRackItemSaveData) GetEncryptedSerialNumber() []byte {
	if x != nil {
		return x.EncryptedSerialNumber
	}
	return nil
}

func (x *CrewQuartersGunRackItemSaveData) GetSlotAssetPath() string {
	if x != nil {
		return x.SlotAssetPath
	}
	return ""
}

func (x *CrewQuartersGunRackItemSaveData) GetDevelopmentSaveData() *InventoryBalanceStateInitializationData {
	if x != nil {
		return x.DevelopmentSaveData
	}
	return nil
}

type CrewQuartersGunRackSaveData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RackSaveData []*CrewQuartersGunRackItemSaveData `protobuf:"bytes,1,rep,name=rack_save_data,json=rackSaveData,proto3" json:"rack_save_data"`
}

func (x *CrewQuartersGunRackSaveData) Reset() {
	*x = CrewQuartersGunRackSaveData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrewQuartersGunRackSaveData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrewQuartersGunRackSaveData) ProtoMessage() {}

func (x *CrewQuartersGunRackSaveData) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrewQuartersGunRackSaveData.ProtoReflect.Descriptor instead.
func (*CrewQuartersGunRackSaveData) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{29}
}

func (x *CrewQuartersGunRackSaveData) GetRackSaveData() []*CrewQuartersGunRackItemSaveData {
	if x != nil {
		return x.RackSaveData
	}
	return nil
}

type EchoLogSaveGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasBeenSeenInLog bool   `protobuf:"varint,1,opt,name=has_been_seen_in_log,json=hasBeenSeenInLog,proto3" json:"has_been_seen_in_log"`
	EchoLogPath      string `protobuf:"bytes,2,opt,name=echo_log_path,json=echoLogPath,proto3" json:"echo_log_path"`
}

func (x *EchoLogSaveGameData) Reset() {
	*x = EchoLogSaveGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoLogSaveGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoLogSaveGameData) ProtoMessage() {}

func (x *EchoLogSaveGameData) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoLogSaveGameData.ProtoReflect.Descriptor instead.
func (*EchoLogSaveGameData) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{30}
}

func (x *EchoLogSaveGameData) GetHasBeenSeenInLog() bool {
	if x != nil {
		return x.HasBeenSeenInLog
	}
	return false
}

func (x *EchoLogSaveGameData) GetEchoLogPath() string {
	if x != nil {
		return x.EchoLogPath
	}
	return ""
}

type MapIDData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZoneNameId uint32 `protobuf:"varint,1,opt,name=zone_name_id,json=zoneNameId,proto3" json:"zone_name_id"`
	MapNameId  uint32 `protobuf:"varint,2,opt,name=map_name_id,json=mapNameId,proto3" json:"map_name_id"`
}

func (x *MapIDData) Reset() {
	*x = MapIDData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapIDData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapIDData) ProtoMessage() {}

func (x *MapIDData) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapIDData.ProtoReflect.Descriptor instead.
func (*MapIDData) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{31}
}

func (x *MapIDData) GetZoneNameId() uint32 {
	if x != nil {
		return x.ZoneNameId
	}
	return 0
}

func (x *MapIDData) GetMapNameId() uint32 {
	if x != nil {
		return x.MapNameId
	}
	return 0
}

type GameStateSaveData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastTraveledMapId *MapIDData `protobuf:"bytes,1,opt,name=last_traveled_map_id,json=lastTraveledMapId,proto3" json:"last_traveled_map_id"`
	MayhemLevel       int32      `protobuf:"varint,2,opt,name=mayhem_level,json=mayhemLevel,proto3" json:"mayhem_level"`
	MayhemRandomSeed  int32      `protobuf:"varint,3,opt,name=mayhem_random_seed,json=mayhemRandomSeed,proto3" json:"mayhem_random_seed"`
}

func (x *GameStateSaveData) Reset() {
	*x = GameStateSaveData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameStateSaveData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameStateSaveData) ProtoMessage() {}

func (x *GameStateSaveData) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameStateSaveData.ProtoReflect.Descriptor instead.
func (*GameStateSaveData) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{32}
}

func (x *GameStateSaveData) GetLastTraveledMapId() *MapIDData {
	if x != nil {
		return x.LastTraveledMapId
	}
	return nil
}

func (x *GameStateSaveData) GetMayhemLevel() int32 {
	if x != nil {
		return x.MayhemLevel
	}
	return 0
}

func (x *GameStateSaveData) GetMayhemRandomSeed() int32 {
	if x != nil {
		return x.MayhemRandomSeed
	}
	return 0
}

type ChallengeCategoryProgressSaveData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryProgress []byte `protobuf:"bytes,1,opt,name=category_progress,json=categoryProgress,proto3" json:"category_progress"`
}

func (x *ChallengeCategoryProgressSaveData) Reset() {
	*x = ChallengeCategoryProgressSaveData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeCategoryProgressSaveData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeCategoryProgressSaveData) ProtoMessage() {}

func (x *ChallengeCategoryProgressSaveData) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeCategoryProgressSaveData.ProtoReflect.Descriptor instead.
func (*ChallengeCategoryProgressSaveData) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{33}
}

func (x *ChallengeCategoryProgressSaveData) GetCategoryProgress() []byte {
	if x != nil {
		return x.CategoryProgress
	}
	return nil
}

type OakPlayerCharacterAugmentSaveGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotAssetPath    string `protobuf:"bytes,1,opt,name=slot_asset_path,json=slotAssetPath,proto3" json:"slot_asset_path"`
	AugmentAssetPath string `protobuf:"bytes,2,opt,name=augment_asset_path,json=augmentAssetPath,proto3" json:"augment_asset_path"`
}

func (x *OakPlayerCharacterAugmentSaveGameData) Reset() {
	*x = OakPlayerCharacterAugmentSaveGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OakPlayerCharacterAugmentSaveGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OakPlayerCharacterAugmentSaveGameData) ProtoMessage() {}

func (x *OakPlayerCharacterAugmentSaveGameData) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OakPlayerCharacterAugmentSaveGameData.ProtoReflect.Descriptor instead.
func (*OakPlayerCharacterAugmentSaveGameData) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{34}
}

func (x *OakPlayerCharacterAugmentSaveGameData) GetSlotAssetPath() string {
	if x != nil {
		return x.SlotAssetPath
	}
	return ""
}

func (x *OakPlayerCharacterAugmentSaveGameData) GetAugmentAssetPath() string {
	if x != nil {
		return x.AugmentAssetPath
	}
	return ""
}

type OakPlayerCharacterSlotSaveGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AugmentSlotList []*OakPlayerCharacterAugmentSaveGameData `protobuf:"bytes,1,rep,name=augment_slot_list,json=augmentSlotList,proto3" json:"augment_slot_list"`
}

func (x *OakPlayerCharacterSlotSaveGameData) Reset() {
	*x = OakPlayerCharacterSlotSaveGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OakPlayerCharacterSlotSaveGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OakPlayerCharacterSlotSaveGameData) ProtoMessage() {}

func (x *OakPlayerCharacterSlotSaveGameData) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OakPlayerCharacterSlotSaveGameData.ProtoReflect.Descriptor instead.
func (*OakPlayerCharacterSlotSaveGameData) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{35}
}

func (x *OakPlayerCharacterSlotSaveGameData) GetAugmentSlotList() []*OakPlayerCharacterAugmentSaveGameData {
	if x != nil {
		return x.AugmentSlotList
	}
	return nil
}

type UITrackingSaveGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasSeenSkillMenuUnlock        bool     `protobuf:"varint,1,opt,name=has_seen_skill_menu_unlock,json=hasSeenSkillMenuUnlock,proto3" json:"has_seen_skill_menu_unlock"`
	HasSeenGuardianRankMenuUnlock bool     `protobuf:"varint,2,opt,name=has_seen_guardian_rank_menu_unlock,json=hasSeenGuardianRankMenuUnlock,proto3" json:"has_seen_guardian_rank_menu_unlock"`
	HasSeenEchoBootAmmoBar        bool     `protobuf:"varint,3,opt,name=has_seen_echo_boot_ammo_bar,json=hasSeenEchoBootAmmoBar,proto3" json:"has_seen_echo_boot_ammo_bar"`
	HasSeenEchoBootShieldBar      bool     `protobuf:"varint,4,opt,name=has_seen_echo_boot_shield_bar,json=hasSeenEchoBootShieldBar,proto3" json:"has_seen_echo_boot_shield_bar"`
	HasSeenEchoBootGrenades       bool     `protobuf:"varint,5,opt,name=has_seen_echo_boot_grenades,json=hasSeenEchoBootGrenades,proto3" json:"has_seen_echo_boot_grenades"`
	HighestThvmBreadcrumbSeen     int32    `protobuf:"varint,6,opt,name=highest_thvm_breadcrumb_seen,json=highestThvmBreadcrumbSeen,proto3" json:"highest_thvm_breadcrumb_seen"`
	InventorySlotUnlocksSeen      []string `protobuf:"bytes,7,rep,name=inventory_slot_unlocks_seen,json=inventorySlotUnlocksSeen,proto3" json:"inventory_slot_unlocks_seen"`
	SavedSpinOffset               int32    `protobuf:"varint,8,opt,name=saved_spin_offset,json=savedSpinOffset,proto3" json:"saved_spin_offset"`
}

func (x *UITrackingSaveGameData) Reset() {
	*x = UITrackingSaveGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UITrackingSaveGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UITrackingSaveGameData) ProtoMessage() {}

func (x *UITrackingSaveGameData) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UITrackingSaveGameData.ProtoReflect.Descriptor instead.
func (*UITrackingSaveGameData) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{36}
}

func (x *UITrackingSaveGameData) GetHasSeenSkillMenuUnlock() bool {
	if x != nil {
		return x.HasSeenSkillMenuUnlock
	}
	return false
}

func (x *UITrackingSaveGameData) GetHasSeenGuardianRankMenuUnlock() bool {
	if x != nil {
		return x.HasSeenGuardianRankMenuUnlock
	}
	return false
}

func (x *UITrackingSaveGameData) GetHasSeenEchoBootAmmoBar() bool {
	if x != nil {
		return x.HasSeenEchoBootAmmoBar
	}
	return false
}

func (x *UITrackingSaveGameData) GetHasSeenEchoBootShieldBar() bool {
	if x != nil {
		return x.HasSeenEchoBootShieldBar
	}
	return false
}

func (x *UITrackingSaveGameData) GetHasSeenEchoBootGrenades() bool {
	if x != nil {
		return x.HasSeenEchoBootGrenades
	}
	return false
}

func (x *UITrackingSaveGameData) GetHighestThvmBreadcrumbSeen() int32 {
	if x != nil {
		return x.HighestThvmBreadcrumbSeen
	}
	return 0
}

func (x *UITrackingSaveGameData) GetInventorySlotUnlocksSeen() []string {
	if x != nil {
		return x.InventorySlotUnlocksSeen
	}
	return nil
}

func (x *UITrackingSaveGameData) GetSavedSpinOffset() int32 {
	if x != nil {
		return x.SavedSpinOffset
	}
	return 0
}

type PlanetCycleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanetName     string  `protobuf:"bytes,1,opt,name=planet_name,json=planetName,proto3" json:"planet_name"`
	CycleLength    float32 `protobuf:"fixed32,2,opt,name=cycle_length,json=cycleLength,proto3" json:"cycle_length"`
	LastCachedTime float32 `protobuf:"fixed32,3,opt,name=last_cached_time,json=lastCachedTime,proto3" json:"last_cached_time"`
}

func (x *PlanetCycleInfo) Reset() {
	*x = PlanetCycleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanetCycleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanetCycleInfo) ProtoMessage() {}

func (x *PlanetCycleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanetCycleInfo.ProtoReflect.Descriptor instead.
func (*PlanetCycleInfo) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{37}
}

func (x *PlanetCycleInfo) GetPlanetName() string {
	if x != nil {
		return x.PlanetName
	}
	return ""
}

func (x *PlanetCycleInfo) GetCycleLength() float32 {
	if x != nil {
		return x.CycleLength
	}
	return 0
}

func (x *PlanetCycleInfo) GetLastCachedTime() float32 {
	if x != nil {
		return x.LastCachedTime
	}
	return 0
}

type TimeOfDaySaveGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlanetCycleInfo []*PlanetCycleInfo `protobuf:"bytes,1,rep,name=planet_cycle_info,json=planetCycleInfo,proto3" json:"planet_cycle_info"`
	PlanetCycle     string             `protobuf:"bytes,2,opt,name=planet_cycle,json=planetCycle,proto3" json:"planet_cycle"`
}

func (x *TimeOfDaySaveGameData) Reset() {
	*x = TimeOfDaySaveGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeOfDaySaveGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeOfDaySaveGameData) ProtoMessage() {}

func (x *TimeOfDaySaveGameData) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeOfDaySaveGameData.ProtoReflect.Descriptor instead.
func (*TimeOfDaySaveGameData) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{38}
}

func (x *TimeOfDaySaveGameData) GetPlanetCycleInfo() []*PlanetCycleInfo {
	if x != nil {
		return x.PlanetCycleInfo
	}
	return nil
}

func (x *TimeOfDaySaveGameData) GetPlanetCycle() string {
	if x != nil {
		return x.PlanetCycle
	}
	return ""
}

type LevelPersistence_Actor_SaveGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorName      string `protobuf:"bytes,1,opt,name=actor_name,json=actorName,proto3" json:"actor_name"`
	TimerRemaining int32  `protobuf:"varint,2,opt,name=timer_remaining,json=timerRemaining,proto3" json:"timer_remaining"`
}

func (x *LevelPersistence_Actor_SaveGameData) Reset() {
	*x = LevelPersistence_Actor_SaveGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LevelPersistence_Actor_SaveGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LevelPersistence_Actor_SaveGameData) ProtoMessage() {}

func (x *LevelPersistence_Actor_SaveGameData) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LevelPersistence_Actor_SaveGameData.ProtoReflect.Descriptor instead.
func (*LevelPersistence_Actor_SaveGameData) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{39}
}

func (x *LevelPersistence_Actor_SaveGameData) GetActorName() string {
	if x != nil {
		return x.ActorName
	}
	return ""
}

func (x *LevelPersistence_Actor_SaveGameData) GetTimerRemaining() int32 {
	if x != nil {
		return x.TimerRemaining
	}
	return 0
}

type LevelPersistence_Level_SaveGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelName   string                                 `protobuf:"bytes,1,opt,name=level_name,json=levelName,proto3" json:"level_name"`
	SavedActors []*LevelPersistence_Actor_SaveGameData `protobuf:"bytes,2,rep,name=saved_actors,json=savedActors,proto3" json:"saved_actors"`
}

func (x *LevelPersistence_Level_SaveGameData) Reset() {
	*x = LevelPersistence_Level_SaveGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LevelPersistence_Level_SaveGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LevelPersistence_Level_SaveGameData) ProtoMessage() {}

func (x *LevelPersistence_Level_SaveGameData) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LevelPersistence_Level_SaveGameData.ProtoReflect.Descriptor instead.
func (*LevelPersistence_Level_SaveGameData) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{40}
}

func (x *LevelPersistence_Level_SaveGameData) GetLevelName() string {
	if x != nil {
		return x.LevelName
	}
	return ""
}

func (x *LevelPersistence_Level_SaveGameData) GetSavedActors() []*LevelPersistence_Actor_SaveGameData {
	if x != nil {
		return x.SavedActors
	}
	return nil
}

type GbxZoneMapFODSavedLevelData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelName           string  `protobuf:"bytes,1,opt,name=level_name,json=levelName,proto3" json:"level_name"`
	FodTextureSize      uint32  `protobuf:"varint,2,opt,name=fod_texture_size,json=fodTextureSize,proto3" json:"fod_texture_size"`
	NumChunks           uint32  `protobuf:"varint,3,opt,name=num_chunks,json=numChunks,proto3" json:"num_chunks"`
	DiscoveryPercentage float32 `protobuf:"fixed32,4,opt,name=discovery_percentage,json=discoveryPercentage,proto3" json:"discovery_percentage"`
	DataState           uint32  `protobuf:"varint,5,opt,name=data_state,json=dataState,proto3" json:"data_state"`
	DataRevision        uint32  `protobuf:"varint,6,opt,name=data_revision,json=dataRevision,proto3" json:"data_revision"`
	FodData             []byte  `protobuf:"bytes,7,opt,name=fod_data,json=fodData,proto3" json:"fod_data"`
}

func (x *GbxZoneMapFODSavedLevelData) Reset() {
	*x = GbxZoneMapFODSavedLevelData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GbxZoneMapFODSavedLevelData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GbxZoneMapFODSavedLevelData) ProtoMessage() {}

func (x *GbxZoneMapFODSavedLevelData) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GbxZoneMapFODSavedLevelData.ProtoReflect.Descriptor instead.
func (*GbxZoneMapFODSavedLevelData) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{41}
}

func (x *GbxZoneMapFODSavedLevelData) GetLevelName() string {
	if x != nil {
		return x.LevelName
	}
	return ""
}

func (x *GbxZoneMapFODSavedLevelData) GetFodTextureSize() uint32 {
	if x != nil {
		return x.FodTextureSize
	}
	return 0
}

func (x *GbxZoneMapFODSavedLevelData) GetNumChunks() uint32 {
	if x != nil {
		return x.NumChunks
	}
	return 0
}

func (x *GbxZoneMapFODSavedLevelData) GetDiscoveryPercentage() float32 {
	if x != nil {
		return x.DiscoveryPercentage
	}
	return 0
}

func (x *GbxZoneMapFODSavedLevelData) GetDataState() uint32 {
	if x != nil {
		return x.DataState
	}
	return 0
}

func (x *GbxZoneMapFODSavedLevelData) GetDataRevision() uint32 {
	if x != nil {
		return x.DataRevision
	}
	return 0
}

func (x *GbxZoneMapFODSavedLevelData) GetFodData() []byte {
	if x != nil {
		return x.FodData
	}
	return nil
}

type GbxZoneMapFODSaveGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LevelData []*GbxZoneMapFODSavedLevelData `protobuf:"bytes,1,rep,name=level_data,json=levelData,proto3" json:"level_data"`
}

func (x *GbxZoneMapFODSaveGameData) Reset() {
	*x = GbxZoneMapFODSaveGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GbxZoneMapFODSaveGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GbxZoneMapFODSaveGameData) ProtoMessage() {}

func (x *GbxZoneMapFODSaveGameData) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GbxZoneMapFODSaveGameData.ProtoReflect.Descriptor instead.
func (*GbxZoneMapFODSaveGameData) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{42}
}

func (x *GbxZoneMapFODSaveGameData) GetLevelData() []*GbxZoneMapFODSavedLevelData {
	if x != nil {
		return x.LevelData
	}
	return nil
}

type Character struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SaveGameId                                   uint32                                         `protobuf:"varint,1,opt,name=save_game_id,json=saveGameId,proto3" json:"save_game_id"`
	LastSaveTimestamp                            int64                                          `protobuf:"varint,2,opt,name=last_save_timestamp,json=lastSaveTimestamp,proto3" json:"last_save_timestamp"`
	TimePlayedSeconds                            uint32                                         `protobuf:"varint,3,opt,name=time_played_seconds,json=timePlayedSeconds,proto3" json:"time_played_seconds"`
	PlayerClassData                              *PlayerClassSaveGameData                       `protobuf:"bytes,4,opt,name=player_class_data,json=playerClassData,proto3" json:"player_class_data"`
	ResourcePools                                []*ResourcePoolSavegameData                    `protobuf:"bytes,5,rep,name=resource_pools,json=resourcePools,proto3" json:"resource_pools"`
	SavedRegions                                 []*RegionSaveGameData                          `protobuf:"bytes,6,rep,name=saved_regions,json=savedRegions,proto3" json:"saved_regions"`
	ExperiencePoints                             int32                                          `protobuf:"varint,7,opt,name=experience_points,json=experiencePoints,proto3" json:"experience_points"`
	GameStatsData                                []*GameStatSaveGameData                        `protobuf:"bytes,8,rep,name=game_stats_data,json=gameStatsData,proto3" json:"game_stats_data"`
	InventoryCategoryList                        []*InventoryCategorySaveData                   `protobuf:"bytes,9,rep,name=inventory_category_list,json=inventoryCategoryList,proto3" json:"inventory_category_list"`
	InventoryItems                               []*OakInventoryItemSaveGameData                `protobuf:"bytes,10,rep,name=inventory_items,json=inventoryItems,proto3" json:"inventory_items"`
	EquippedInventoryList                        []*EquippedInventorySaveGameData               `protobuf:"bytes,11,rep,name=equipped_inventory_list,json=equippedInventoryList,proto3" json:"equipped_inventory_list"`
	ActiveWeaponList                             []int32                                        `protobuf:"varint,12,rep,packed,name=active_weapon_list,json=activeWeaponList,proto3" json:"active_weapon_list"`
	AbilityData                                  *OakPlayerAbilitySaveGameData                  `protobuf:"bytes,13,opt,name=ability_data,json=abilityData,proto3" json:"ability_data"`
	LastPlayThroughIndex                         int32                                          `protobuf:"varint,14,opt,name=last_play_through_index,json=lastPlayThroughIndex,proto3" json:"last_play_through_index"`
	PlaythroughsCompleted                        int32                                          `protobuf:"varint,15,opt,name=playthroughs_completed,json=playthroughsCompleted,proto3" json:"playthroughs_completed"`
	ShowNewPlaythroughNotification               bool                                           `protobuf:"varint,16,opt,name=show_new_playthrough_notification,json=showNewPlaythroughNotification,proto3" json:"show_new_playthrough_notification"`
	MissionPlaythroughsData                      []*MissionPlaythroughSaveGameData              `protobuf:"bytes,17,rep,name=mission_playthroughs_data,json=missionPlaythroughsData,proto3" json:"mission_playthroughs_data"`
	ActiveTravelStations                         []string                                       `protobuf:"bytes,21,rep,name=active_travel_stations,json=activeTravelStations,proto3" json:"active_travel_stations"`
	DiscoveryData                                *DiscoverySaveData                             `protobuf:"bytes,22,opt,name=discovery_data,json=discoveryData,proto3" json:"discovery_data"`
	LastActiveTravelStation                      string                                         `protobuf:"bytes,23,opt,name=last_active_travel_station,json=lastActiveTravelStation,proto3" json:"last_active_travel_station"`
	VehiclesUnlockedData                         []*VehicleUnlockedSaveGameData                 `protobuf:"bytes,24,rep,name=vehicles_unlocked_data,json=vehiclesUnlockedData,proto3" json:"vehicles_unlocked_data"`
	VehiclePartsUnlocked                         []string                                       `protobuf:"bytes,25,rep,name=vehicle_parts_unlocked,json=vehiclePartsUnlocked,proto3" json:"vehicle_parts_unlocked"`
	VehicleLoadouts                              []*OakCARMenuVehicleConfigSaveData             `protobuf:"bytes,26,rep,name=vehicle_loadouts,json=vehicleLoadouts,proto3" json:"vehicle_loadouts"`
	VehicleLastLoadoutIndex                      int32                                          `protobuf:"varint,27,opt,name=vehicle_last_loadout_index,json=vehicleLastLoadoutIndex,proto3" json:"vehicle_last_loadout_index"`
	ChallengeData                                []*ChallengeSaveGameData                       `protobuf:"bytes,28,rep,name=challenge_data,json=challengeData,proto3" json:"challenge_data"`
	SduList                                      []*OakSDUSaveGameData                          `protobuf:"bytes,29,rep,name=sdu_list,json=sduList,proto3" json:"sdu_list"`
	SelectedCustomizations                       []string                                       `protobuf:"bytes,30,rep,name=selected_customizations,json=selectedCustomizations,proto3" json:"selected_customizations"`
	EquippedEmoteCustomizations                  []int32                                        `protobuf:"varint,31,rep,packed,name=equipped_emote_customizations,json=equippedEmoteCustomizations,proto3" json:"equipped_emote_customizations"`
	SelectedColorCustomizations                  []*CustomPlayerColorSaveGameData               `protobuf:"bytes,32,rep,name=selected_color_customizations,json=selectedColorCustomizations,proto3" json:"selected_color_customizations"`
	GuardianRank                                 *GuardianRankSaveGameData                      `protobuf:"bytes,33,opt,name=guardian_rank,json=guardianRank,proto3" json:"guardian_rank"`
	CrewQuartersRoom                             *CrewQuartersSaveData                          `protobuf:"bytes,34,opt,name=crew_quarters_room,json=crewQuartersRoom,proto3" json:"crew_quarters_room"`
	CrewQuartersGunRack                          *CrewQuartersGunRackSaveData                   `protobuf:"bytes,35,opt,name=crew_quarters_gun_rack,json=crewQuartersGunRack,proto3" json:"crew_quarters_gun_rack"`
	UnlockedEchoLogs                             []*EchoLogSaveGameData                         `protobuf:"bytes,36,rep,name=unlocked_echo_logs,json=unlockedEchoLogs,proto3" json:"unlocked_echo_logs"`
	HasPlayedSpecialEchoLogInsertAlready         bool                                           `protobuf:"varint,37,opt,name=has_played_special_echo_log_insert_already,json=hasPlayedSpecialEchoLogInsertAlready,proto3" json:"has_played_special_echo_log_insert_already"`
	NicknameMappings                             []*Character_NicknameMappingsEntry             `protobuf:"bytes,38,rep,name=nickname_mappings,json=nicknameMappings,proto3" json:"nickname_mappings"`
	LastTraveledMapId                            *MapIDData                                     `protobuf:"bytes,39,opt,name=last_traveled_map_id,json=lastTraveledMapId,proto3" json:"last_traveled_map_id"`
	ChallengeCategoryCompletionPcts              *ChallengeCategoryProgressSaveData             `protobuf:"bytes,40,opt,name=challenge_category_completion_pcts,json=challengeCategoryCompletionPcts,proto3" json:"challenge_category_completion_pcts"`
	CharacterSlotSaveGameData                    *OakPlayerCharacterSlotSaveGameData            `protobuf:"bytes,41,opt,name=character_slot_save_game_data,json=characterSlotSaveGameData,proto3" json:"character_slot_save_game_data"`
	UiTrackingSaveGameData                       *UITrackingSaveGameData                        `protobuf:"bytes,42,opt,name=ui_tracking_save_game_data,json=uiTrackingSaveGameData,proto3" json:"ui_tracking_save_game_data"`
	PreferredCharacterName                       string                                         `protobuf:"bytes,43,opt,name=preferred_character_name,json=preferredCharacterName,proto3" json:"preferred_character_name"`
	NameCharacterLimit                           int32                                          `protobuf:"varint,44,opt,name=name_character_limit,json=nameCharacterLimit,proto3" json:"name_character_limit"`
	PreferredGroupMode                           uint32                                         `protobuf:"varint,45,opt,name=preferred_group_mode,json=preferredGroupMode,proto3" json:"preferred_group_mode"`
	TimeOfDaySaveGameData                        *TimeOfDaySaveGameData                         `protobuf:"bytes,46,opt,name=time_of_day_save_game_data,json=timeOfDaySaveGameData,proto3" json:"time_of_day_save_game_data"`
	LevelPersistenceData                         []*LevelPersistence_Level_SaveGameData         `protobuf:"bytes,47,rep,name=level_persistence_data,json=levelPersistenceData,proto3" json:"level_persistence_data"`
	AccumulatedLevelPersistenceResetTimerSeconds uint32                                         `protobuf:"varint,48,opt,name=accumulated_level_persistence_reset_timer_seconds,json=accumulatedLevelPersistenceResetTimerSeconds,proto3" json:"accumulated_level_persistence_reset_timer_seconds"`
	MayhemLevel                                  uint32                                         `protobuf:"varint,49,opt,name=mayhem_level,json=mayhemLevel,proto3" json:"mayhem_level"`
	GbxZoneMapFodSaveGameData                    *GbxZoneMapFODSaveGameData                     `protobuf:"bytes,50,opt,name=gbx_zone_map_fod_save_game_data,json=gbxZoneMapFodSaveGameData,proto3" json:"gbx_zone_map_fod_save_game_data"`
	ActiveOrBlacklistedTravelStations            []*ActiveFastTravelSaveData                    `protobuf:"bytes,51,rep,name=active_or_blacklisted_travel_stations,json=activeOrBlacklistedTravelStations,proto3" json:"active_or_blacklisted_travel_stations"`
	LastActiveTravelStationForPlaythrough        []string                                       `protobuf:"bytes,52,rep,name=last_active_travel_station_for_playthrough,json=lastActiveTravelStationForPlaythrough,proto3" json:"last_active_travel_station_for_playthrough"`
	GameStateSaveDataForPlaythrough              []*GameStateSaveData                           `protobuf:"bytes,53,rep,name=game_state_save_data_for_playthrough,json=gameStateSaveDataForPlaythrough,proto3" json:"game_state_save_data_for_playthrough"`
	RegisteredDownloadableEntitlements           []*RegisteredDownloadableEntitlements          `protobuf:"bytes,54,rep,name=registered_downloadable_entitlements,json=registeredDownloadableEntitlements,proto3" json:"registered_downloadable_entitlements"`
	ActiveTravelStationsForPlaythrough           []*PlaythroughActiveFastTravelSaveData         `protobuf:"bytes,55,rep,name=active_travel_stations_for_playthrough,json=activeTravelStationsForPlaythrough,proto3" json:"active_travel_stations_for_playthrough"`
	SaveGameGuid                                 string                                         `protobuf:"bytes,56,opt,name=save_game_guid,json=saveGameGuid,proto3" json:"save_game_guid"`
	GuardianRankCharacterData                    *GuardianRankCharacterSaveGameData             `protobuf:"bytes,57,opt,name=guardian_rank_character_data,json=guardianRankCharacterData,proto3" json:"guardian_rank_character_data"`
	OptionalObjectiveRewardFixupApplied          bool                                           `protobuf:"varint,58,opt,name=optional_objective_reward_fixup_applied,json=optionalObjectiveRewardFixupApplied,proto3" json:"optional_objective_reward_fixup_applied"`
	VehiclePartRewardsFixupApplied               bool                                           `protobuf:"varint,59,opt,name=vehicle_part_rewards_fixup_applied,json=vehiclePartRewardsFixupApplied,proto3" json:"vehicle_part_rewards_fixup_applied"`
	LastActiveLeague                             uint32                                         `protobuf:"varint,60,opt,name=last_active_league,json=lastActiveLeague,proto3" json:"last_active_league"`
	LastActiveLeagueInstance                     uint32                                         `protobuf:"varint,61,opt,name=last_active_league_instance,json=lastActiveLeagueInstance,proto3" json:"last_active_league_instance"`
	ActiveLeagueInstanceForEvent                 []*Character_ActiveLeagueInstanceForEventEntry `protobuf:"bytes,62,rep,name=active_league_instance_for_event,json=activeLeagueInstanceForEvent,proto3" json:"active_league_instance_for_event"`
	LevelledSaveVehiclePartRewardsFixupApplied   bool                                           `protobuf:"varint,63,opt,name=levelled_save_vehicle_part_rewards_fixup_applied,json=levelledSaveVehiclePartRewardsFixupApplied,proto3" json:"levelled_save_vehicle_part_rewards_fixup_applied"`
}

func (x *Character) Reset() {
	*x = Character{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Character) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Character) ProtoMessage() {}

func (x *Character) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Character.ProtoReflect.Descriptor instead.
func (*Character) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{43}
}

func (x *Character) GetSaveGameId() uint32 {
	if x != nil {
		return x.SaveGameId
	}
	return 0
}

func (x *Character) GetLastSaveTimestamp() int64 {
	if x != nil {
		return x.LastSaveTimestamp
	}
	return 0
}

func (x *Character) GetTimePlayedSeconds() uint32 {
	if x != nil {
		return x.TimePlayedSeconds
	}
	return 0
}

func (x *Character) GetPlayerClassData() *PlayerClassSaveGameData {
	if x != nil {
		return x.PlayerClassData
	}
	return nil
}

func (x *Character) GetResourcePools() []*ResourcePoolSavegameData {
	if x != nil {
		return x.ResourcePools
	}
	return nil
}

func (x *Character) GetSavedRegions() []*RegionSaveGameData {
	if x != nil {
		return x.SavedRegions
	}
	return nil
}

func (x *Character) GetExperiencePoints() int32 {
	if x != nil {
		return x.ExperiencePoints
	}
	return 0
}

func (x *Character) GetGameStatsData() []*GameStatSaveGameData {
	if x != nil {
		return x.GameStatsData
	}
	return nil
}

func (x *Character) GetInventoryCategoryList() []*InventoryCategorySaveData {
	if x != nil {
		return x.InventoryCategoryList
	}
	return nil
}

func (x *Character) GetInventoryItems() []*OakInventoryItemSaveGameData {
	if x != nil {
		return x.InventoryItems
	}
	return nil
}

func (x *Character) GetEquippedInventoryList() []*EquippedInventorySaveGameData {
	if x != nil {
		return x.EquippedInventoryList
	}
	return nil
}

func (x *Character) GetActiveWeaponList() []int32 {
	if x != nil {
		return x.ActiveWeaponList
	}
	return nil
}

func (x *Character) GetAbilityData() *OakPlayerAbilitySaveGameData {
	if x != nil {
		return x.AbilityData
	}
	return nil
}

func (x *Character) GetLastPlayThroughIndex() int32 {
	if x != nil {
		return x.LastPlayThroughIndex
	}
	return 0
}

func (x *Character) GetPlaythroughsCompleted() int32 {
	if x != nil {
		return x.PlaythroughsCompleted
	}
	return 0
}

func (x *Character) GetShowNewPlaythroughNotification() bool {
	if x != nil {
		return x.ShowNewPlaythroughNotification
	}
	return false
}

func (x *Character) GetMissionPlaythroughsData() []*MissionPlaythroughSaveGameData {
	if x != nil {
		return x.MissionPlaythroughsData
	}
	return nil
}

func (x *Character) GetActiveTravelStations() []string {
	if x != nil {
		return x.ActiveTravelStations
	}
	return nil
}

func (x *Character) GetDiscoveryData() *DiscoverySaveData {
	if x != nil {
		return x.DiscoveryData
	}
	return nil
}

func (x *Character) GetLastActiveTravelStation() string {
	if x != nil {
		return x.LastActiveTravelStation
	}
	return ""
}

func (x *Character) GetVehiclesUnlockedData() []*VehicleUnlockedSaveGameData {
	if x != nil {
		return x.VehiclesUnlockedData
	}
	return nil
}

func (x *Character) GetVehiclePartsUnlocked() []string {
	if x != nil {
		return x.VehiclePartsUnlocked
	}
	return nil
}

func (x *Character) GetVehicleLoadouts() []*OakCARMenuVehicleConfigSaveData {
	if x != nil {
		return x.VehicleLoadouts
	}
	return nil
}

func (x *Character) GetVehicleLastLoadoutIndex() int32 {
	if x != nil {
		return x.VehicleLastLoadoutIndex
	}
	return 0
}

func (x *Character) GetChallengeData() []*ChallengeSaveGameData {
	if x != nil {
		return x.ChallengeData
	}
	return nil
}

func (x *Character) GetSduList() []*OakSDUSaveGameData {
	if x != nil {
		return x.SduList
	}
	return nil
}

func (x *Character) GetSelectedCustomizations() []string {
	if x != nil {
		return x.SelectedCustomizations
	}
	return nil
}

func (x *Character) GetEquippedEmoteCustomizations() []int32 {
	if x != nil {
		return x.EquippedEmoteCustomizations
	}
	return nil
}

func (x *Character) GetSelectedColorCustomizations() []*CustomPlayerColorSaveGameData {
	if x != nil {
		return x.SelectedColorCustomizations
	}
	return nil
}

func (x *Character) GetGuardianRank() *GuardianRankSaveGameData {
	if x != nil {
		return x.GuardianRank
	}
	return nil
}

func (x *Character) GetCrewQuartersRoom() *CrewQuartersSaveData {
	if x != nil {
		return x.CrewQuartersRoom
	}
	return nil
}

func (x *Character) GetCrewQuartersGunRack() *CrewQuartersGunRackSaveData {
	if x != nil {
		return x.CrewQuartersGunRack
	}
	return nil
}

func (x *Character) GetUnlockedEchoLogs() []*EchoLogSaveGameData {
	if x != nil {
		return x.UnlockedEchoLogs
	}
	return nil
}

func (x *Character) GetHasPlayedSpecialEchoLogInsertAlready() bool {
	if x != nil {
		return x.HasPlayedSpecialEchoLogInsertAlready
	}
	return false
}

func (x *Character) GetNicknameMappings() []*Character_NicknameMappingsEntry {
	if x != nil {
		return x.NicknameMappings
	}
	return nil
}

func (x *Character) GetLastTraveledMapId() *MapIDData {
	if x != nil {
		return x.LastTraveledMapId
	}
	return nil
}

func (x *Character) GetChallengeCategoryCompletionPcts() *ChallengeCategoryProgressSaveData {
	if x != nil {
		return x.ChallengeCategoryCompletionPcts
	}
	return nil
}

func (x *Character) GetCharacterSlotSaveGameData() *OakPlayerCharacterSlotSaveGameData {
	if x != nil {
		return x.CharacterSlotSaveGameData
	}
	return nil
}

func (x *Character) GetUiTrackingSaveGameData() *UITrackingSaveGameData {
	if x != nil {
		return x.UiTrackingSaveGameData
	}
	return nil
}

func (x *Character) GetPreferredCharacterName() string {
	if x != nil {
		return x.PreferredCharacterName
	}
	return ""
}

func (x *Character) GetNameCharacterLimit() int32 {
	if x != nil {
		return x.NameCharacterLimit
	}
	return 0
}

func (x *Character) GetPreferredGroupMode() uint32 {
	if x != nil {
		return x.PreferredGroupMode
	}
	return 0
}

func (x *Character) GetTimeOfDaySaveGameData() *TimeOfDaySaveGameData {
	if x != nil {
		return x.TimeOfDaySaveGameData
	}
	return nil
}

func (x *Character) GetLevelPersistenceData() []*LevelPersistence_Level_SaveGameData {
	if x != nil {
		return x.LevelPersistenceData
	}
	return nil
}

func (x *Character) GetAccumulatedLevelPersistenceResetTimerSeconds() uint32 {
	if x != nil {
		return x.AccumulatedLevelPersistenceResetTimerSeconds
	}
	return 0
}

func (x *Character) GetMayhemLevel() uint32 {
	if x != nil {
		return x.MayhemLevel
	}
	return 0
}

func (x *Character) GetGbxZoneMapFodSaveGameData() *GbxZoneMapFODSaveGameData {
	if x != nil {
		return x.GbxZoneMapFodSaveGameData
	}
	return nil
}

func (x *Character) GetActiveOrBlacklistedTravelStations() []*ActiveFastTravelSaveData {
	if x != nil {
		return x.ActiveOrBlacklistedTravelStations
	}
	return nil
}

func (x *Character) GetLastActiveTravelStationForPlaythrough() []string {
	if x != nil {
		return x.LastActiveTravelStationForPlaythrough
	}
	return nil
}

func (x *Character) GetGameStateSaveDataForPlaythrough() []*GameStateSaveData {
	if x != nil {
		return x.GameStateSaveDataForPlaythrough
	}
	return nil
}

func (x *Character) GetRegisteredDownloadableEntitlements() []*RegisteredDownloadableEntitlements {
	if x != nil {
		return x.RegisteredDownloadableEntitlements
	}
	return nil
}

func (x *Character) GetActiveTravelStationsForPlaythrough() []*PlaythroughActiveFastTravelSaveData {
	if x != nil {
		return x.ActiveTravelStationsForPlaythrough
	}
	return nil
}

func (x *Character) GetSaveGameGuid() string {
	if x != nil {
		return x.SaveGameGuid
	}
	return ""
}

func (x *Character) GetGuardianRankCharacterData() *GuardianRankCharacterSaveGameData {
	if x != nil {
		return x.GuardianRankCharacterData
	}
	return nil
}

func (x *Character) GetOptionalObjectiveRewardFixupApplied() bool {
	if x != nil {
		return x.OptionalObjectiveRewardFixupApplied
	}
	return false
}

func (x *Character) GetVehiclePartRewardsFixupApplied() bool {
	if x != nil {
		return x.VehiclePartRewardsFixupApplied
	}
	return false
}

func (x *Character) GetLastActiveLeague() uint32 {
	if x != nil {
		return x.LastActiveLeague
	}
	return 0
}

func (x *Character) GetLastActiveLeagueInstance() uint32 {
	if x != nil {
		return x.LastActiveLeagueInstance
	}
	return 0
}

func (x *Character) GetActiveLeagueInstanceForEvent() []*Character_ActiveLeagueInstanceForEventEntry {
	if x != nil {
		return x.ActiveLeagueInstanceForEvent
	}
	return nil
}

func (x *Character) GetLevelledSaveVehiclePartRewardsFixupApplied() bool {
	if x != nil {
		return x.LevelledSaveVehiclePartRewardsFixupApplied
	}
	return false
}

type Character_NicknameMappingsEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
}

func (x *Character_NicknameMappingsEntry) Reset() {
	*x = Character_NicknameMappingsEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Character_NicknameMappingsEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Character_NicknameMappingsEntry) ProtoMessage() {}

func (x *Character_NicknameMappingsEntry) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Character_NicknameMappingsEntry.ProtoReflect.Descriptor instead.
func (*Character_NicknameMappingsEntry) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{43, 0}
}

func (x *Character_NicknameMappingsEntry) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Character_NicknameMappingsEntry) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Character_ActiveLeagueInstanceForEventEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   uint32 `protobuf:"varint,1,opt,name=key,proto3" json:"key"`
	Value uint32 `protobuf:"varint,2,opt,name=value,proto3" json:"value"`
}

func (x *Character_ActiveLeagueInstanceForEventEntry) Reset() {
	*x = Character_ActiveLeagueInstanceForEventEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_OakSave_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Character_ActiveLeagueInstanceForEventEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Character_ActiveLeagueInstanceForEventEntry) ProtoMessage() {}

func (x *Character_ActiveLeagueInstanceForEventEntry) ProtoReflect() protoreflect.Message {
	mi := &file_OakSave_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Character_ActiveLeagueInstanceForEventEntry.ProtoReflect.Descriptor instead.
func (*Character_ActiveLeagueInstanceForEventEntry) Descriptor() ([]byte, []int) {
	return file_OakSave_proto_rawDescGZIP(), []int{43, 1}
}

func (x *Character_ActiveLeagueInstanceForEventEntry) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *Character_ActiveLeagueInstanceForEventEntry) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

var File_OakSave_proto protoreflect.FileDescriptor

var file_OakSave_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x1a, 0x0f, 0x4f, 0x61, 0x6b, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6b, 0x0a, 0x17, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x24, 0x0a, 0x0e, 0x64, 0x6c, 0x63, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x6c, 0x63, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x61, 0x76, 0x65, 0x67, 0x61, 0x6d, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22,
	0xa4, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61,
	0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x68,
	0x72, 0x6f, 0x75, 0x67, 0x68, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x49, 0x64, 0x78, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x24, 0x0a, 0x0e, 0x64, 0x6c, 0x63, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x6c, 0x63, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xfc, 0x02, 0x0a, 0x27, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b,
	0x0a, 0x11, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x61, 0x6e, 0x75, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x61, 0x72, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a,
	0x17, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa0, 0x02, 0x0a, 0x1c, 0x4f, 0x61, 0x6b, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61,
	0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x10, 0x69, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x77, 0x65, 0x61, 0x70,
	0x6f, 0x6e, 0x5f, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x53, 0x6b, 0x69, 0x6e, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x64, 0x0a, 0x15, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x13, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x61, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0xbd, 0x01, 0x0a, 0x1d, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x70, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x61,
	0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x6c, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x11,
	0x74, 0x72, 0x69, 0x6e, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x69, 0x6e, 0x6b, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x74, 0x68, 0x22, 0xa8, 0x01, 0x0a, 0x1e, 0x4f, 0x61, 0x6b,
	0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x72, 0x65, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x53,
	0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x61, 0x78, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72,
	0x65, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x72, 0x65, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x22, 0x72, 0x0a, 0x1a, 0x4f, 0x61, 0x6b, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x53, 0x6c, 0x6f, 0x74, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x26, 0x0a, 0x0f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6c, 0x6f, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0xb6, 0x01, 0x0a, 0x23, 0x4f, 0x61, 0x6b, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x75, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x39, 0x0a, 0x19, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x6c,
	0x6f, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6c, 0x6f, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x61, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x22, 0xe3, 0x01, 0x0a, 0x30, 0x4f, 0x61, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x61, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x6f, 0x64, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x6d, 0x6f, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x6f, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0xd7, 0x03, 0x0a, 0x1c, 0x4f, 0x61, 0x6b, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x61, 0x76, 0x65, 0x47,
	0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x4d,
	0x0a, 0x0e, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65,
	0x2e, 0x4f, 0x61, 0x6b, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x72, 0x65, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0c, 0x74, 0x72, 0x65, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4f, 0x0a,
	0x11, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61,
	0x76, 0x65, 0x2e, 0x4f, 0x61, 0x6b, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x6c, 0x6f,
	0x74, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x58,
	0x0a, 0x11, 0x61, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x4f, 0x61, 0x6b, 0x53,
	0x61, 0x76, 0x65, 0x2e, 0x4f, 0x61, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x41, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x61, 0x76, 0x65, 0x47,
	0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x61, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x6c, 0x6f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x77, 0x0a, 0x1a, 0x61, 0x75, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x4f,
	0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x4f, 0x61, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x61, 0x76, 0x65, 0x47,
	0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x18, 0x61, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x72, 0x65, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65,
	0x22, 0x96, 0x04, 0x0a, 0x1f, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x16, 0x68, 0x61, 0x73, 0x5f, 0x62, 0x65, 0x65, 0x6e, 0x5f,
	0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x68, 0x61, 0x73, 0x42, 0x65, 0x65, 0x6e, 0x56, 0x69, 0x65, 0x77,
	0x65, 0x64, 0x49, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x2f, 0x0a, 0x13, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x12, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x6c, 0x63, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x6c, 0x63, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6b, 0x69, 0x63, 0x6b, 0x6f,
	0x66, 0x66, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x6b, 0x69, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x60, 0x0a, 0x0c, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x53, 0x5f, 0x4e, 0x6f,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x53,
	0x5f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x53, 0x5f,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x53,
	0x5f, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x53, 0x5f,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x04, 0x22, 0xaa, 0x01, 0x0a, 0x1e, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68,
	0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4b, 0x0a, 0x0c,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x50, 0x61, 0x74, 0x68, 0x22, 0x79, 0x0a, 0x18, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x46, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x53, 0x61, 0x76, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x3b, 0x0a, 0x1a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x72, 0x61,
	0x76, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x72,
	0x61, 0x76, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x64, 0x22, 0x7e, 0x0a, 0x23, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x46, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c,
	0x53, 0x61, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x57, 0x0a, 0x16, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61,
	0x76, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x46, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x76, 0x65, 0x6c, 0x53, 0x61, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x14, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x7f, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x41,
	0x72, 0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65,
	0x64, 0x41, 0x72, 0x65, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x17, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x68, 0x72, 0x6f,
	0x75, 0x67, 0x68, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67,
	0x68, 0x73, 0x22, 0xd1, 0x01, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65,
	0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37,
	0x0a, 0x17, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x61,
	0x79, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x16, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x74,
	0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x73, 0x12, 0x4d, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x12, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x41, 0x72,
	0x65, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x67, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b,
	0x0a, 0x11, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x69,
	0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x22,
	0x65, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x61, 0x76, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x50, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x65, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x13, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x61, 0x0a, 0x1b, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x6a, 0x75, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6a, 0x75, 0x73,
	0x74, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x22, 0xf1, 0x04, 0x0a, 0x1f, 0x4f, 0x61,
	0x6b, 0x43, 0x41, 0x52, 0x4d, 0x65, 0x6e, 0x75, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x61, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a,
	0x11, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75,
	0x74, 0x53, 0x61, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x6f, 0x64,
	0x79, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x62, 0x6f, 0x64, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x28, 0x0a, 0x10, 0x77, 0x68, 0x65, 0x65, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x68, 0x65,
	0x65, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x61,
	0x72, 0x6d, 0x6f, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2d, 0x0a, 0x13, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x37, 0x0a, 0x18, 0x67, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x77,
	0x65, 0x61, 0x70, 0x6f, 0x6e, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x67, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x57, 0x65,
	0x61, 0x70, 0x6f, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x37, 0x0a,
	0x18, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x5f, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x39, 0x0a, 0x19, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x44, 0x65, 0x63, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x5f, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x31, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x5f, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x32, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x33, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x33, 0x22, 0x8f, 0x02,
	0x0a, 0x1d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x33, 0x52, 0x0c,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x0b,
	0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x33,
	0x52, 0x0a, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x11,
	0x75, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x17, 0x75, 0x73, 0x65, 0x5f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x75, 0x73, 0x65, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x22,
	0x70, 0x0a, 0x18, 0x47, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x53,
	0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x52, 0x61, 0x6e, 0x6b,
	0x12, 0x2f, 0x0a, 0x13, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x22, 0x91, 0x01, 0x0a, 0x27, 0x47, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x52, 0x61,
	0x6e, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a,
	0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x50, 0x61, 0x74, 0x68, 0x22, 0x6c, 0x0a, 0x25, 0x47, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61,
	0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x50, 0x65, 0x72, 0x6b, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x70, 0x65, 0x72, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x50,
	0x61, 0x74, 0x68, 0x22, 0x85, 0x04, 0x0a, 0x21, 0x47, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e,
	0x52, 0x61, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x61, 0x76,
	0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x19, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61,
	0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x2f, 0x0a, 0x13, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61,
	0x6e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x0c, 0x72,
	0x61, 0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x47, 0x75, 0x61, 0x72,
	0x64, 0x69, 0x61, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0b, 0x72, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x4d, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x6b, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x47,
	0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x50, 0x65, 0x72, 0x6b, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x50, 0x65, 0x72, 0x6b, 0x73, 0x12,
	0x3d, 0x0a, 0x1b, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65, 0x65, 0x64, 0x12, 0x36,
	0x0a, 0x17, 0x6e, 0x65, 0x77, 0x5f, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x15, 0x6e, 0x65, 0x77, 0x47, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x72, 0x61, 0x6e,
	0x6b, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x7d, 0x0a, 0x1e, 0x43,
	0x72, 0x65, 0x77, 0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x73, 0x44, 0x65, 0x63, 0x6f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x61, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a,
	0x10, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x63, 0x6f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x74, 0x68, 0x22, 0xc3, 0x01, 0x0a, 0x14, 0x43,
	0x72, 0x65, 0x77, 0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x73, 0x53, 0x61, 0x76, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x19, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x49, 0x0a, 0x0b, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x77, 0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x73, 0x44, 0x65, 0x63, 0x6f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x61, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x64,
	0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x6f, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x74, 0x68,
	0x22, 0xe7, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x77, 0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72,
	0x73, 0x47, 0x75, 0x6e, 0x52, 0x61, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x61, 0x76, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f,
	0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6c, 0x6f, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x64, 0x0a, 0x15, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x13, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x61, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x6d, 0x0a, 0x1b, 0x43, 0x72,
	0x65, 0x77, 0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x73, 0x47, 0x75, 0x6e, 0x52, 0x61, 0x63,
	0x6b, 0x53, 0x61, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x0e, 0x72, 0x61, 0x63,
	0x6b, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x77,
	0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x73, 0x47, 0x75, 0x6e, 0x52, 0x61, 0x63, 0x6b, 0x49,
	0x74, 0x65, 0x6d, 0x53, 0x61, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x72, 0x61, 0x63,
	0x6b, 0x53, 0x61, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x69, 0x0a, 0x13, 0x45, 0x63, 0x68,
	0x6f, 0x4c, 0x6f, 0x67, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x2e, 0x0a, 0x14, 0x68, 0x61, 0x73, 0x5f, 0x62, 0x65, 0x65, 0x6e, 0x5f, 0x73, 0x65, 0x65,
	0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x68, 0x61, 0x73, 0x42, 0x65, 0x65, 0x6e, 0x53, 0x65, 0x65, 0x6e, 0x49, 0x6e, 0x4c, 0x6f, 0x67,
	0x12, 0x22, 0x0a, 0x0d, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x63, 0x68, 0x6f, 0x4c, 0x6f, 0x67,
	0x50, 0x61, 0x74, 0x68, 0x22, 0x4d, 0x0a, 0x09, 0x4d, 0x61, 0x70, 0x49, 0x44, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x20, 0x0a, 0x0c, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x7a, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x49, 0x64, 0x22, 0xa9, 0x01, 0x0a, 0x11, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x53, 0x61, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x14, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76,
	0x65, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x44, 0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x6c, 0x61, 0x73,
	0x74, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x61, 0x79, 0x68, 0x65, 0x6d, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x79, 0x68, 0x65, 0x6d, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x79, 0x68, 0x65, 0x6d, 0x5f, 0x72, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6d,
	0x61, 0x79, 0x68, 0x65, 0x6d, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65, 0x65, 0x64, 0x22,
	0x50, 0x0a, 0x21, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x61, 0x76, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x10, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x7d, 0x0a, 0x25, 0x4f, 0x61, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x41, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x61,
	0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x6c,
	0x6f, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6c, 0x6f, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x61, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x22, 0x80, 0x01, 0x0a, 0x22, 0x4f, 0x61, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x53, 0x61, 0x76, 0x65, 0x47,
	0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5a, 0x0a, 0x11, 0x61, 0x75, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x4f, 0x61, 0x6b,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x41,
	0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0f, 0x61, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x87, 0x04, 0x0a, 0x16, 0x55, 0x49, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a,
	0x0a, 0x1a, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x68, 0x61, 0x73, 0x53, 0x65, 0x65, 0x6e, 0x53, 0x6b, 0x69, 0x6c, 0x6c,
	0x4d, 0x65, 0x6e, 0x75, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x49, 0x0a, 0x22, 0x68, 0x61,
	0x73, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f,
	0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x68, 0x61, 0x73, 0x53, 0x65, 0x65, 0x6e, 0x47,
	0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x4d, 0x65, 0x6e, 0x75, 0x55,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3b, 0x0a, 0x1b, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x65, 0x65,
	0x6e, 0x5f, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x61, 0x6d, 0x6d, 0x6f,
	0x5f, 0x62, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x68, 0x61, 0x73, 0x53,
	0x65, 0x65, 0x6e, 0x45, 0x63, 0x68, 0x6f, 0x42, 0x6f, 0x6f, 0x74, 0x41, 0x6d, 0x6d, 0x6f, 0x42,
	0x61, 0x72, 0x12, 0x3f, 0x0a, 0x1d, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x65,
	0x63, 0x68, 0x6f, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x62, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x68, 0x61, 0x73, 0x53, 0x65,
	0x65, 0x6e, 0x45, 0x63, 0x68, 0x6f, 0x42, 0x6f, 0x6f, 0x74, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64,
	0x42, 0x61, 0x72, 0x12, 0x3c, 0x0a, 0x1b, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f,
	0x65, 0x63, 0x68, 0x6f, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x67, 0x72, 0x65, 0x6e, 0x61, 0x64,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x68, 0x61, 0x73, 0x53, 0x65, 0x65,
	0x6e, 0x45, 0x63, 0x68, 0x6f, 0x42, 0x6f, 0x6f, 0x74, 0x47, 0x72, 0x65, 0x6e, 0x61, 0x64, 0x65,
	0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x68, 0x76,
	0x6d, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x64, 0x63, 0x72, 0x75, 0x6d, 0x62, 0x5f, 0x73, 0x65, 0x65,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74,
	0x54, 0x68, 0x76, 0x6d, 0x42, 0x72, 0x65, 0x61, 0x64, 0x63, 0x72, 0x75, 0x6d, 0x62, 0x53, 0x65,
	0x65, 0x6e, 0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x73, 0x65, 0x65,
	0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x53, 0x65, 0x65,
	0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x69, 0x6e, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x61,
	0x76, 0x65, 0x64, 0x53, 0x70, 0x69, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x7f, 0x0a,
	0x0f, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x80,
	0x01, 0x0a, 0x15, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x53, 0x61, 0x76, 0x65,
	0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x74, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x50, 0x6c,
	0x61, 0x6e, 0x65, 0x74, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x74, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x43, 0x79, 0x63, 0x6c,
	0x65, 0x22, 0x6d, 0x0a, 0x23, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x53, 0x61, 0x76, 0x65,
	0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x22, 0x95, 0x01, 0x0a, 0x23, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x53, 0x61, 0x76, 0x65,
	0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x0c, 0x73, 0x61, 0x76, 0x65, 0x64,
	0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x53,
	0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x73, 0x61, 0x76,
	0x65, 0x64, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x97, 0x02, 0x0a, 0x1b, 0x47, 0x62, 0x78,
	0x5a, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x46, 0x4f, 0x44, 0x53, 0x61, 0x76, 0x65, 0x64, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x6f, 0x64, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x66, 0x6f, 0x64, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73,
	0x12, 0x31, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x6f, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x66, 0x6f, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x60, 0x0a, 0x19, 0x47, 0x62, 0x78, 0x5a, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70,
	0x46, 0x4f, 0x44, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x43, 0x0a, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x47, 0x62,
	0x78, 0x5a, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x46, 0x4f, 0x44, 0x53, 0x61, 0x76, 0x65, 0x64,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x22, 0xd8, 0x25, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x61, 0x76, 0x65, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x61, 0x76,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x61, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x4c, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x48, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70,
	0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x4f, 0x61, 0x6b,
	0x53, 0x61, 0x76, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x53, 0x61, 0x76, 0x65, 0x67, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x40, 0x0a, 0x0d,
	0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0c, 0x73, 0x61, 0x76, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b,
	0x0a, 0x11, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x0f, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x5a, 0x0a, 0x17, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53,
	0x61, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x15, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4e,
	0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76,
	0x65, 0x2e, 0x4f, 0x61, 0x6b, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74,
	0x65, 0x6d, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x5e,
	0x0a, 0x17, 0x65, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x70,
	0x65, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x61, 0x76, 0x65, 0x47,
	0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x15, 0x65, 0x71, 0x75, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c,
	0x0a, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x05, 0x52, 0x10, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x0c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x4f, 0x61, 0x6b,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x61, 0x76,
	0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x35, 0x0a,
	0x16, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x73, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x70,
	0x6c, 0x61, 0x79, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x21, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6e, 0x65, 0x77,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x5f, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1e, 0x73, 0x68, 0x6f, 0x77, 0x4e, 0x65, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x68, 0x72, 0x6f,
	0x75, 0x67, 0x68, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x63, 0x0a, 0x19, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x74,
	0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x53,
	0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x17, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74,
	0x72, 0x61, 0x76, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x72, 0x61, 0x76,
	0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x61, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a,
	0x1a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x72, 0x61,
	0x76, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x72, 0x61,
	0x76, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x16, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4f, 0x61, 0x6b,
	0x53, 0x61, 0x76, 0x65, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x55, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x14, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x16, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x18, 0x19, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x73, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x10,
	0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x73,
	0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65,
	0x2e, 0x4f, 0x61, 0x6b, 0x43, 0x41, 0x52, 0x4d, 0x65, 0x6e, 0x75, 0x56, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x61, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74,
	0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x61,
	0x73, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x45,
	0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65,
	0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61,
	0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x08, 0x73, 0x64, 0x75, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76,
	0x65, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x44, 0x55, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x73, 0x64, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a,
	0x17, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x42, 0x0a, 0x1d, 0x65, 0x71, 0x75, 0x69, 0x70, 0x70,
	0x65, 0x64, 0x5f, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x05, 0x52, 0x1b, 0x65,
	0x71, 0x75, 0x69, 0x70, 0x70, 0x65, 0x64, 0x45, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6a, 0x0a, 0x1d, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x61, 0x76,
	0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x1b, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x0d, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69,
	0x61, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x47, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e,
	0x52, 0x61, 0x6e, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0c, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x4b,
	0x0a, 0x12, 0x63, 0x72, 0x65, 0x77, 0x5f, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x73, 0x5f,
	0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4f, 0x61, 0x6b,
	0x53, 0x61, 0x76, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x77, 0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72,
	0x73, 0x53, 0x61, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x63, 0x72, 0x65, 0x77, 0x51,
	0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x73, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x59, 0x0a, 0x16, 0x63,
	0x72, 0x65, 0x77, 0x5f, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x67, 0x75, 0x6e,
	0x5f, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x4f, 0x61,
	0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x77, 0x51, 0x75, 0x61, 0x72, 0x74, 0x65,
	0x72, 0x73, 0x47, 0x75, 0x6e, 0x52, 0x61, 0x63, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x13, 0x63, 0x72, 0x65, 0x77, 0x51, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x73, 0x47,
	0x75, 0x6e, 0x52, 0x61, 0x63, 0x6b, 0x12, 0x4a, 0x0a, 0x12, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x5f, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x24, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x45, 0x63, 0x68,
	0x6f, 0x4c, 0x6f, 0x67, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x10, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x45, 0x63, 0x68, 0x6f, 0x4c, 0x6f,
	0x67, 0x73, 0x12, 0x58, 0x0a, 0x2a, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x6c, 0x6f,
	0x67, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x24, 0x68, 0x61, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x63, 0x68, 0x6f, 0x4c, 0x6f, 0x67, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0x55, 0x0a, 0x11,
	0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x26, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76,
	0x65, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x10, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x43, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x76,
	0x65, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x49,
	0x44, 0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x76, 0x65,
	0x6c, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x77, 0x0a, 0x22, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x63, 0x74, 0x73, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x61, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x1f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x63, 0x74,
	0x73, 0x12, 0x6d, 0x0a, 0x1d, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x73,
	0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61,
	0x76, 0x65, 0x2e, 0x4f, 0x61, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x19, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x53, 0x6c, 0x6f, 0x74, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x5b, 0x0a, 0x1a, 0x75, 0x69, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x61, 0x76, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x2a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x55,
	0x49, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x16, 0x75, 0x69, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a,
	0x18, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x2c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6e, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x59, 0x0a, 0x1a, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66,
	0x44, 0x61, 0x79, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x15, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61,
	0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x62, 0x0a, 0x16, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x2f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65,
	0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x14, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x67, 0x0a, 0x31, 0x61, 0x63,
	0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x30, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x2c, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x79, 0x68, 0x65, 0x6d, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x79, 0x68, 0x65,
	0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x66, 0x0a, 0x1f, 0x67, 0x62, 0x78, 0x5f, 0x7a, 0x6f,
	0x6e, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x66, 0x6f, 0x64, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x47, 0x62, 0x78, 0x5a, 0x6f, 0x6e,
	0x65, 0x4d, 0x61, 0x70, 0x46, 0x4f, 0x44, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x19, 0x67, 0x62, 0x78, 0x5a, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x46,
	0x6f, 0x64, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x73,
	0x0a, 0x25, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x72, 0x5f, 0x62, 0x6c, 0x61, 0x63,
	0x6b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x33, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x46, 0x61,
	0x73, 0x74, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x53, 0x61, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x21, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x72, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c,
	0x69, 0x73, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x59, 0x0a, 0x2a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67,
	0x68, 0x18, 0x34, 0x20, 0x03, 0x28, 0x09, 0x52, 0x25, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x6f, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x12, 0x69,
	0x0a, 0x24, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x61, 0x76,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x74,
	0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x18, 0x35, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x4f,
	0x61, 0x6b, 0x53, 0x61, 0x76, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x53, 0x61, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x1f, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x53, 0x61, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x72, 0x50, 0x6c,
	0x61, 0x79, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x12, 0x7d, 0x0a, 0x24, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x36, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76,
	0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x22, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x26, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x74, 0x68, 0x72, 0x6f,
	0x75, 0x67, 0x68, 0x18, 0x37, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x4f, 0x61, 0x6b, 0x53,
	0x61, 0x76, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x46, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x53,
	0x61, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x22, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54,
	0x72, 0x61, 0x76, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72,
	0x50, 0x6c, 0x61, 0x79, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x12, 0x24, 0x0a, 0x0e, 0x73,
	0x61, 0x76, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x18, 0x38, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x47, 0x75, 0x69,
	0x64, 0x12, 0x6b, 0x0a, 0x1c, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x72, 0x61,
	0x6e, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76,
	0x65, 0x2e, 0x47, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x61, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x19, 0x67, 0x75, 0x61, 0x72, 0x64, 0x69, 0x61, 0x6e, 0x52, 0x61, 0x6e,
	0x6b, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x54,
	0x0a, 0x27, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x66, 0x69, 0x78, 0x75,
	0x70, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x23, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x46, 0x69, 0x78, 0x75, 0x70, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x22, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x66, 0x69, 0x78,
	0x75, 0x70, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1e, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x46, 0x69, 0x78, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6c, 0x61,
	0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x12, 0x3d,
	0x0a, 0x1b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x3d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x7c, 0x0a,
	0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x3e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x4f, 0x61, 0x6b, 0x53, 0x61, 0x76,
	0x65, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1c, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x64, 0x0a, 0x30, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x76, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x5f, 0x66, 0x69, 0x78, 0x75, 0x70, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18,
	0x3f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x53,
	0x61, 0x76, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x46, 0x69, 0x78, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x1a, 0x3f, 0x0a, 0x15, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0x4b, 0x0a, 0x21, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_OakSave_proto_rawDescOnce sync.Once
	file_OakSave_proto_rawDescData = file_OakSave_proto_rawDesc
)

func file_OakSave_proto_rawDescGZIP() []byte {
	file_OakSave_proto_rawDescOnce.Do(func() {
		file_OakSave_proto_rawDescData = protoimpl.X.CompressGZIP(file_OakSave_proto_rawDescData)
	})
	return file_OakSave_proto_rawDescData
}

var file_OakSave_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_OakSave_proto_msgTypes = make([]protoimpl.MessageInfo, 46)
var file_OakSave_proto_goTypes = []interface{}{
	(MissionStatusPlayerSaveGameData_MissionState)(0),        // 0: OakSave.MissionStatusPlayerSaveGameData.MissionState
	(*PlayerClassSaveGameData)(nil),                          // 1: OakSave.PlayerClassSaveGameData
	(*ResourcePoolSavegameData)(nil),                         // 2: OakSave.ResourcePoolSavegameData
	(*RegionSaveGameData)(nil),                               // 3: OakSave.RegionSaveGameData
	(*InventoryBalanceStateInitializationData)(nil),          // 4: OakSave.InventoryBalanceStateInitializationData
	(*OakInventoryItemSaveGameData)(nil),                     // 5: OakSave.OakInventoryItemSaveGameData
	(*EquippedInventorySaveGameData)(nil),                    // 6: OakSave.EquippedInventorySaveGameData
	(*OakAbilityTreeItemSaveGameData)(nil),                   // 7: OakSave.OakAbilityTreeItemSaveGameData
	(*OakAbilitySlotSaveGameData)(nil),                       // 8: OakSave.OakAbilitySlotSaveGameData
	(*OakActionAbilityAugmentSaveGameData)(nil),              // 9: OakSave.OakActionAbilityAugmentSaveGameData
	(*OakActionAbilityAugmentConfigurationSaveGameData)(nil), // 10: OakSave.OakActionAbilityAugmentConfigurationSaveGameData
	(*OakPlayerAbilitySaveGameData)(nil),                     // 11: OakSave.OakPlayerAbilitySaveGameData
	(*MissionStatusPlayerSaveGameData)(nil),                  // 12: OakSave.MissionStatusPlayerSaveGameData
	(*MissionPlaythroughSaveGameData)(nil),                   // 13: OakSave.MissionPlaythroughSaveGameData
	(*ActiveFastTravelSaveData)(nil),                         // 14: OakSave.ActiveFastTravelSaveData
	(*PlaythroughActiveFastTravelSaveData)(nil),              // 15: OakSave.PlaythroughActiveFastTravelSaveData
	(*DiscoveredAreaInfo)(nil),                               // 16: OakSave.DiscoveredAreaInfo
	(*DiscoveredLevelInfo)(nil),                              // 17: OakSave.DiscoveredLevelInfo
	(*DiscoveredPlanetInfo)(nil),                             // 18: OakSave.DiscoveredPlanetInfo
	(*DiscoverySaveData)(nil),                                // 19: OakSave.DiscoverySaveData
	(*VehicleUnlockedSaveGameData)(nil),                      // 20: OakSave.VehicleUnlockedSaveGameData
	(*OakCARMenuVehicleConfigSaveData)(nil),                  // 21: OakSave.OakCARMenuVehicleConfigSaveData
	(*CustomPlayerColorSaveGameData)(nil),                    // 22: OakSave.CustomPlayerColorSaveGameData
	(*GuardianRankSaveGameData)(nil),                         // 23: OakSave.GuardianRankSaveGameData
	(*GuardianRankRewardCharacterSaveGameData)(nil),          // 24: OakSave.GuardianRankRewardCharacterSaveGameData
	(*GuardianRankPerkCharacterSaveGameData)(nil),            // 25: OakSave.GuardianRankPerkCharacterSaveGameData
	(*GuardianRankCharacterSaveGameData)(nil),                // 26: OakSave.GuardianRankCharacterSaveGameData
	(*CrewQuartersDecorationSaveData)(nil),                   // 27: OakSave.CrewQuartersDecorationSaveData
	(*CrewQuartersSaveData)(nil),                             // 28: OakSave.CrewQuartersSaveData
	(*CrewQuartersGunRackItemSaveData)(nil),                  // 29: OakSave.CrewQuartersGunRackItemSaveData
	(*CrewQuartersGunRackSaveData)(nil),                      // 30: OakSave.CrewQuartersGunRackSaveData
	(*EchoLogSaveGameData)(nil),                              // 31: OakSave.EchoLogSaveGameData
	(*MapIDData)(nil),                                        // 32: OakSave.MapIDData
	(*GameStateSaveData)(nil),                                // 33: OakSave.GameStateSaveData
	(*ChallengeCategoryProgressSaveData)(nil),                // 34: OakSave.ChallengeCategoryProgressSaveData
	(*OakPlayerCharacterAugmentSaveGameData)(nil),            // 35: OakSave.OakPlayerCharacterAugmentSaveGameData
	(*OakPlayerCharacterSlotSaveGameData)(nil),               // 36: OakSave.OakPlayerCharacterSlotSaveGameData
	(*UITrackingSaveGameData)(nil),                           // 37: OakSave.UITrackingSaveGameData
	(*PlanetCycleInfo)(nil),                                  // 38: OakSave.PlanetCycleInfo
	(*TimeOfDaySaveGameData)(nil),                            // 39: OakSave.TimeOfDaySaveGameData
	(*LevelPersistence_Actor_SaveGameData)(nil),              // 40: OakSave.LevelPersistence_Actor_SaveGameData
	(*LevelPersistence_Level_SaveGameData)(nil),              // 41: OakSave.LevelPersistence_Level_SaveGameData
	(*GbxZoneMapFODSavedLevelData)(nil),                      // 42: OakSave.GbxZoneMapFODSavedLevelData
	(*GbxZoneMapFODSaveGameData)(nil),                        // 43: OakSave.GbxZoneMapFODSaveGameData
	(*Character)(nil),                                        // 44: OakSave.Character
	(*Character_NicknameMappingsEntry)(nil),                  // 45: OakSave.Character.NicknameMappingsEntry
	(*Character_ActiveLeagueInstanceForEventEntry)(nil),      // 46: OakSave.Character.ActiveLeagueInstanceForEventEntry
	(*Vec3)(nil),                               // 47: OakSave.Vec3
	(*GameStatSaveGameData)(nil),               // 48: OakSave.GameStatSaveGameData
	(*InventoryCategorySaveData)(nil),          // 49: OakSave.InventoryCategorySaveData
	(*ChallengeSaveGameData)(nil),              // 50: OakSave.ChallengeSaveGameData
	(*OakSDUSaveGameData)(nil),                 // 51: OakSave.OakSDUSaveGameData
	(*RegisteredDownloadableEntitlements)(nil), // 52: OakSave.RegisteredDownloadableEntitlements
}
var file_OakSave_proto_depIdxs = []int32{
	4,  // 0: OakSave.OakInventoryItemSaveGameData.development_save_data:type_name -> OakSave.InventoryBalanceStateInitializationData
	7,  // 1: OakSave.OakPlayerAbilitySaveGameData.tree_item_list:type_name -> OakSave.OakAbilityTreeItemSaveGameData
	8,  // 2: OakSave.OakPlayerAbilitySaveGameData.ability_slot_list:type_name -> OakSave.OakAbilitySlotSaveGameData
	9,  // 3: OakSave.OakPlayerAbilitySaveGameData.augment_slot_list:type_name -> OakSave.OakActionAbilityAugmentSaveGameData
	10, // 4: OakSave.OakPlayerAbilitySaveGameData.augment_configuration_list:type_name -> OakSave.OakActionAbilityAugmentConfigurationSaveGameData
	0,  // 5: OakSave.MissionStatusPlayerSaveGameData.status:type_name -> OakSave.MissionStatusPlayerSaveGameData.MissionState
	12, // 6: OakSave.MissionPlaythroughSaveGameData.mission_list:type_name -> OakSave.MissionStatusPlayerSaveGameData
	14, // 7: OakSave.PlaythroughActiveFastTravelSaveData.active_travel_stations:type_name -> OakSave.ActiveFastTravelSaveData
	16, // 8: OakSave.DiscoveredLevelInfo.discovered_area_info:type_name -> OakSave.DiscoveredAreaInfo
	17, // 9: OakSave.DiscoverySaveData.discovered_level_info:type_name -> OakSave.DiscoveredLevelInfo
	47, // 10: OakSave.CustomPlayerColorSaveGameData.applied_color:type_name -> OakSave.Vec3
	47, // 11: OakSave.CustomPlayerColorSaveGameData.split_color:type_name -> OakSave.Vec3
	24, // 12: OakSave.GuardianRankCharacterSaveGameData.rank_rewards:type_name -> OakSave.GuardianRankRewardCharacterSaveGameData
	25, // 13: OakSave.GuardianRankCharacterSaveGameData.rank_perks:type_name -> OakSave.GuardianRankPerkCharacterSaveGameData
	27, // 14: OakSave.CrewQuartersSaveData.decorations:type_name -> OakSave.CrewQuartersDecorationSaveData
	4,  // 15: OakSave.CrewQuartersGunRackItemSaveData.development_save_data:type_name -> OakSave.InventoryBalanceStateInitializationData
	29, // 16: OakSave.CrewQuartersGunRackSaveData.rack_save_data:type_name -> OakSave.CrewQuartersGunRackItemSaveData
	32, // 17: OakSave.GameStateSaveData.last_traveled_map_id:type_name -> OakSave.MapIDData
	35, // 18: OakSave.OakPlayerCharacterSlotSaveGameData.augment_slot_list:type_name -> OakSave.OakPlayerCharacterAugmentSaveGameData
	38, // 19: OakSave.TimeOfDaySaveGameData.planet_cycle_info:type_name -> OakSave.PlanetCycleInfo
	40, // 20: OakSave.LevelPersistence_Level_SaveGameData.saved_actors:type_name -> OakSave.LevelPersistence_Actor_SaveGameData
	42, // 21: OakSave.GbxZoneMapFODSaveGameData.level_data:type_name -> OakSave.GbxZoneMapFODSavedLevelData
	1,  // 22: OakSave.Character.player_class_data:type_name -> OakSave.PlayerClassSaveGameData
	2,  // 23: OakSave.Character.resource_pools:type_name -> OakSave.ResourcePoolSavegameData
	3,  // 24: OakSave.Character.saved_regions:type_name -> OakSave.RegionSaveGameData
	48, // 25: OakSave.Character.game_stats_data:type_name -> OakSave.GameStatSaveGameData
	49, // 26: OakSave.Character.inventory_category_list:type_name -> OakSave.InventoryCategorySaveData
	5,  // 27: OakSave.Character.inventory_items:type_name -> OakSave.OakInventoryItemSaveGameData
	6,  // 28: OakSave.Character.equipped_inventory_list:type_name -> OakSave.EquippedInventorySaveGameData
	11, // 29: OakSave.Character.ability_data:type_name -> OakSave.OakPlayerAbilitySaveGameData
	13, // 30: OakSave.Character.mission_playthroughs_data:type_name -> OakSave.MissionPlaythroughSaveGameData
	19, // 31: OakSave.Character.discovery_data:type_name -> OakSave.DiscoverySaveData
	20, // 32: OakSave.Character.vehicles_unlocked_data:type_name -> OakSave.VehicleUnlockedSaveGameData
	21, // 33: OakSave.Character.vehicle_loadouts:type_name -> OakSave.OakCARMenuVehicleConfigSaveData
	50, // 34: OakSave.Character.challenge_data:type_name -> OakSave.ChallengeSaveGameData
	51, // 35: OakSave.Character.sdu_list:type_name -> OakSave.OakSDUSaveGameData
	22, // 36: OakSave.Character.selected_color_customizations:type_name -> OakSave.CustomPlayerColorSaveGameData
	23, // 37: OakSave.Character.guardian_rank:type_name -> OakSave.GuardianRankSaveGameData
	28, // 38: OakSave.Character.crew_quarters_room:type_name -> OakSave.CrewQuartersSaveData
	30, // 39: OakSave.Character.crew_quarters_gun_rack:type_name -> OakSave.CrewQuartersGunRackSaveData
	31, // 40: OakSave.Character.unlocked_echo_logs:type_name -> OakSave.EchoLogSaveGameData
	45, // 41: OakSave.Character.nickname_mappings:type_name -> OakSave.Character.NicknameMappingsEntry
	32, // 42: OakSave.Character.last_traveled_map_id:type_name -> OakSave.MapIDData
	34, // 43: OakSave.Character.challenge_category_completion_pcts:type_name -> OakSave.ChallengeCategoryProgressSaveData
	36, // 44: OakSave.Character.character_slot_save_game_data:type_name -> OakSave.OakPlayerCharacterSlotSaveGameData
	37, // 45: OakSave.Character.ui_tracking_save_game_data:type_name -> OakSave.UITrackingSaveGameData
	39, // 46: OakSave.Character.time_of_day_save_game_data:type_name -> OakSave.TimeOfDaySaveGameData
	41, // 47: OakSave.Character.level_persistence_data:type_name -> OakSave.LevelPersistence_Level_SaveGameData
	43, // 48: OakSave.Character.gbx_zone_map_fod_save_game_data:type_name -> OakSave.GbxZoneMapFODSaveGameData
	14, // 49: OakSave.Character.active_or_blacklisted_travel_stations:type_name -> OakSave.ActiveFastTravelSaveData
	33, // 50: OakSave.Character.game_state_save_data_for_playthrough:type_name -> OakSave.GameStateSaveData
	52, // 51: OakSave.Character.registered_downloadable_entitlements:type_name -> OakSave.RegisteredDownloadableEntitlements
	15, // 52: OakSave.Character.active_travel_stations_for_playthrough:type_name -> OakSave.PlaythroughActiveFastTravelSaveData
	26, // 53: OakSave.Character.guardian_rank_character_data:type_name -> OakSave.GuardianRankCharacterSaveGameData
	46, // 54: OakSave.Character.active_league_instance_for_event:type_name -> OakSave.Character.ActiveLeagueInstanceForEventEntry
	55, // [55:55] is the sub-list for method output_type
	55, // [55:55] is the sub-list for method input_type
	55, // [55:55] is the sub-list for extension type_name
	55, // [55:55] is the sub-list for extension extendee
	0,  // [0:55] is the sub-list for field type_name
}

func init() { file_OakSave_proto_init() }
func file_OakSave_proto_init() {
	if File_OakSave_proto != nil {
		return
	}
	file_OakShared_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_OakSave_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerClassSaveGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourcePoolSavegameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegionSaveGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InventoryBalanceStateInitializationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OakInventoryItemSaveGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquippedInventorySaveGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OakAbilityTreeItemSaveGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OakAbilitySlotSaveGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OakActionAbilityAugmentSaveGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OakActionAbilityAugmentConfigurationSaveGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OakPlayerAbilitySaveGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissionStatusPlayerSaveGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissionPlaythroughSaveGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveFastTravelSaveData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaythroughActiveFastTravelSaveData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscoveredAreaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscoveredLevelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscoveredPlanetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscoverySaveData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleUnlockedSaveGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OakCARMenuVehicleConfigSaveData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomPlayerColorSaveGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuardianRankSaveGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuardianRankRewardCharacterSaveGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuardianRankPerkCharacterSaveGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuardianRankCharacterSaveGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrewQuartersDecorationSaveData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrewQuartersSaveData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrewQuartersGunRackItemSaveData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrewQuartersGunRackSaveData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EchoLogSaveGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapIDData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameStateSaveData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChallengeCategoryProgressSaveData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OakPlayerCharacterAugmentSaveGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OakPlayerCharacterSlotSaveGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UITrackingSaveGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanetCycleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeOfDaySaveGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LevelPersistence_Actor_SaveGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LevelPersistence_Level_SaveGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GbxZoneMapFODSavedLevelData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GbxZoneMapFODSaveGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Character); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Character_NicknameMappingsEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_OakSave_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Character_ActiveLeagueInstanceForEventEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_OakSave_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   46,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_OakSave_proto_goTypes,
		DependencyIndexes: file_OakSave_proto_depIdxs,
		EnumInfos:         file_OakSave_proto_enumTypes,
		MessageInfos:      file_OakSave_proto_msgTypes,
	}.Build()
	File_OakSave_proto = out.File
	file_OakSave_proto_rawDesc = nil
	file_OakSave_proto_goTypes = nil
	file_OakSave_proto_depIdxs = nil
}
